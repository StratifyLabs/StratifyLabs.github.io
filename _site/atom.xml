<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Stratify Labs</title>
 <link href="http://stratifylabs.co/" rel="self"/>
 <link href="http://stratifylabs.co"/>
 <updated>2016-03-13T07:52:21-06:00</updated>
 <id>http://stratifylabs.co</id>
 <author>
   <name>Stratify Labs, Inc</name>
   <email>tyler@stratifylabs.co</email>
 </author>

 
 <entry>
   <title>Building and Installing a Cortex-M4 Compiler on Mac OS X</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2014/10/05/Tips-Building-and-Installing-a-Cortex-M4-Compiler-on-Mac-OS-X"/>
   <updated>2014-10-05T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2014/10/05/Tips-Building-and-Installing-a-Cortex-M4-Compiler-on-Mac-OS-X</id>
   <content type="html">&lt;p&gt;Installing a compiler for the ARM Cortex M4 is similiar to the CM3.  The following environment variable needs to be changed from the Cortex-M3 settings:&lt;/p&gt;

&lt;pre&gt;
export CPU=cm4
export FLOAT=hard
export FPU=--with-fpu=fpv4-sp-d16
&lt;/pre&gt;

&lt;p&gt;Other than that change, just follow the &lt;a href=&quot;/embedded%20design%20tips/2013/10/06/Tips-Building-and-Installing-a-Cortex-M3-Compiler-on-Mac-OS-X&quot;&gt;instructions for installing a CM3 compiler&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Applications without an MMU</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2014/05/03/Applications-without-MMU"/>
   <updated>2014-05-03T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2014/05/03/Applications-without-MMU</id>
   <content type="html">&lt;p&gt;One of CoActionOS’s biggest software challenges is providing the ability to install applications separately from the OS–without an MMU.  Overcoming this challenge contributes to both ease-of-use and portability.  By installing just the application, you save the programmer the work of integrating and compiling the OS with the application.  The programmer can also distribute the binary file to other devices running CoActionOS.  In the MMU-free world, these features are only available on uCLinux and now CoActionOS.&lt;/p&gt;

&lt;p&gt;This begs the question:  why not just use ucLinux?  The RAM requirements for uCLinux, which are in the megabyte range (versus low KB range for CoActionOS), are too high for many small systems.  uCLinux also requires a Linux computer to compile programs.&lt;/p&gt;

&lt;h2 id=&quot;how&quot;&gt;How&lt;/h2&gt;

&lt;p&gt;Without an MMU, compiling and installing independent programs can be done using one of several approaches:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Implement an ELF parser in the embedded installer&lt;/li&gt;
  &lt;li&gt;Compile using position independent code/executables (PIC or PIE) and have the embedded installer update the global offset table when installing the firmware&lt;/li&gt;
  &lt;li&gt;Compile using relocatable code and translate the memory locations of the binary program using an embedded installer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CoActionOS uses the last approach.  &lt;/p&gt;

&lt;p&gt;The disadvantage of using an ELF parser is that it requires more processing on the firmware side than the other options.  This means a larger portion of precious flash memory is dedicated to installing programs.  &lt;/p&gt;

&lt;p&gt;Position independent code is a good solution but slightly degrades performance due to a layer of indirection using a global offset table.&lt;/p&gt;

&lt;p&gt;Using relocatable code and translating the memory locations is simpler than an ELF parser and yields slightly better performance than position independent code.  &lt;/p&gt;

&lt;h3 id=&quot;details&quot;&gt;Details&lt;/h3&gt;

&lt;p&gt;The compiler, per se, does not create a relocatable binary.  Doing so requires using a couple tricks such that the embedded installer can distinguish what parts of the program refer to memory addresses and what parts are instructions.  This is accomplished by doing two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Compile using mlong-calls in GCC&lt;/li&gt;
  &lt;li&gt;Link to an address space that does not coincide with any instruction&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When using mlong-calls, GCC always loads the 32-bit address of a function from a literal pool to a register.  This makes it easier for the embedded installer to find addresses within the binary.  Linking to a region of memory distinct from any instruction allows the embedded installer to know which 32-bit words are instructions and which are memory addresses.&lt;/p&gt;

&lt;p&gt;For the ARMv7-M instruction set, the instruction 0xDExx is permanently undefined.  Therefore, if the program is linked to an address space starting at 0xDE000000, all instances of 0xDExxxxxx in the binary must be data rather than instructions.&lt;/p&gt;

&lt;p&gt;The code below shows an excerpt from the CoActionOS Hello World program.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;de00004c &amp;lt;main&amp;gt;:
de00004c:	b508      	push	{r3, lr}
de00004e:	4802      	ldr	r0, [pc, #8]	; (de000058 &amp;lt;main+0xc&amp;gt;)
de000050:	4b02      	ldr	r3, [pc, #8]	; (de00005c &amp;lt;main+0x10&amp;gt;)
de000052:	4798      	blx	r3
de000054:	2000      	movs	r0, #0
de000056:	bd08      	pop	{r3, pc}
de000058:	de00003c 	.word	0xde00003c
de00005c:	deff826d 	.word	0xdeff826d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When this program is installed, the value 0xdeff826d (penultimate line) is changed to the location of the printf() function (a system call) and 0xde00003c (last line) is changed to the location of the “Hello World\n” string.  The instructions (0xb500, 0x4b02, etc) are not changed.&lt;/p&gt;

&lt;h2 id=&quot;limitations&quot;&gt;Limitations&lt;/h2&gt;

&lt;p&gt;This approach has two limitations.  First, the program (flash and RAM) must be less than 16MB (not a problem for most microcontroller applications).  Second, if the program uses data between 0xDE000000 and 0xDEFFFFFF (integers between 3.72 billion and 3.74 billion), the embedded installer will modify the data even if it does not refer to a memory location.  For example, the embedded installer will mistake the following variable for a memory address and translate it to a new location.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;uint32_t world_population_1970 = 3733996830; //0xDE90451E&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Implementing an embedded installer that can dynamically relocate code has been well worth it.  Users can easily compile and install CoActionOS applications without worrying about compiling or installing the OS.  It also allows firmware application portability between different
boards running CoActionOS.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Deploying CoActionOS</title>
   <link href="http://stratifylabs.co/user%20guides/2014/04/15/CoActionOS-User-Guide-Deploying-CoActionOS"/>
   <updated>2014-04-15T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/user%20guides/2014/04/15/CoActionOS-User-Guide-Deploying-CoActionOS</id>
   <content type="html">&lt;h2 id=&quot;from-development-to-production&quot;&gt;From Development to Production&lt;/h2&gt;

&lt;p&gt;There are two approaches to deploying CoActionOS.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;As Is&lt;/li&gt;
  &lt;li&gt;Stripped Down&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;deploy-as-is&quot;&gt;Deploy As Is&lt;/h3&gt;

&lt;p&gt;The first option is to deploy CoActionOS as is without stripping away any part of the OS.  This method has the following advantages.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User Upgradeable Firmware (Applications and Kernel)&lt;/li&gt;
  &lt;li&gt;User Installable Apps (3rd Parties can innovate on your product!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The disadvantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Larger ROM size&lt;/li&gt;
  &lt;li&gt;Security (Users can install code on your device)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deploy-a-stripped-down-version&quot;&gt;Deploy a Stripped Down Version&lt;/h3&gt;

&lt;p&gt;If the cons for the As Is deployment option outweight the pros, you can also deploy a stripped down version of CoActionOS.  You can strip 
away any part of the OS that you don’t need.&lt;/p&gt;

&lt;h4 id=&quot;exclude-unused-drivers&quot;&gt;Exclude Unused Drivers&lt;/h4&gt;

&lt;p&gt;The easiest way to shrink the ROM size is to remove device drivers or filesystems that are not needed.  If you look at the files in the &lt;a href=&quot;https://github.com/CoActionOS/CoActionOS-HW&quot;&gt;board
support packages&lt;/a&gt;, you will find a file called devices.c.  This file references the device drivers
and filesystems that will be available to applications.  You just need to comment out anything you are not using to exclude those items
from the binary.  For example, the following lines are commented out to exclude the I2C drivers.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;//DEVICE_PERIPH(&amp;quot;i2c0&amp;quot;, hwpl_i2c, 0, 0666, USER_ROOT, GROUP_ROOT, S_IFCHR),
//DEVICE_PERIPH(&amp;quot;i2c1&amp;quot;, hwpl_i2c, 1, 0666, USER_ROOT, GROUP_ROOT, S_IFCHR),
//DEVICE_PERIPH(&amp;quot;i2c2&amp;quot;, hwpl_i2c, 2, 0666, USER_ROOT, GROUP_ROOT, S_IFCHR),&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you aren’t using the CoActionOS flash filesystem, that can also be excluded.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;const sysfs_t const sysfs_list[] = {
	//the folder for ram/flash applications
	SYSFS_APP(&amp;quot;/app&amp;quot;, &amp;amp;(devices[MEM_DEV]), SYSFS_ALL_ACCESS),
	SYSFS_DEV(&amp;quot;/dev&amp;quot;, devices, SYSFS_READONLY_ACCESS), //devices
	//CAFS_LITE(&amp;quot;/home&amp;quot;, &amp;amp;cafs_lite_cfg, SYSFS_ALL_ACCESS), //user files
	SYSFS_ROOT(&amp;quot;/&amp;quot;, sysfs_list, SYSFS_READONLY_ACCESS), //root
	SYSFS_TERMINATOR
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;exclude-unused-cposix-functions&quot;&gt;Exclude Unused C/POSIX functions&lt;/h4&gt;

&lt;p&gt;To remove unsed portions of the standard C library or POSIX functions, you need to do a custom build of &lt;a href=&quot;https://github.com/CoActionOS/CoActionOS-Public&quot;&gt;CoActionOS&lt;/a&gt;.  The file you want to modify is src/sys/symbols.c.  This file contains a list of all the functions that, if
not used by the kernel, are still included in the build so that they are available to applications.  It ensures that if an application links
to printf() (see src/crt/crt_symbols.S), then the printf() code will be part of the kernel.  However, if none of your deployed applications use printf(), you don’t need it in the kernel.  To exclude a function, place a zero in the table (don’t delete the line or simply comment it out!).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;uint32_t const symbols_table[] = {
	//...
	0, //(uint32_t)fprintf,
	0, //(uint32_t)printf,
	0, //(uint32_t)snprintf,
	(uint32_t)vfprintf,
	(uint32_t)sprintf,
	(uint32_t)vprintf,
	(uint32_t)vsnprintf,
	(uint32_t)vsprintf,
	//...

};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;unify-kernel-and-application&quot;&gt;Unify Kernel and Application&lt;/h4&gt;

&lt;p&gt;If you still need to make the binary smaller, you can compile the application with the kernel.  In this case, you will want to exclude src/sys/symbols.c from the build entirely.  In the CoActionOS kernel library, the first thread is called intial_thread() and is weakly bound.  You can
add this function to your board support package to override the version in the kernel library.  The default initial thread function is shown below extracted from src/sys/intial_thread.c.  Instead of initializing the link functionality (link_init() and link_update()), you can call the main() function to your application and add the applicatoin source code directly to the board support package in Eclipse.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;void * initial_thread(void * arg){

	hwpl_core_privcall(priv_check_reset_source, NULL);

	//Initialize the file systems
	if ( init_fs() &amp;lt; 0 ){
		;
	}

	//Initialize the CoActionOS Link interface
	if ( link_init() &amp;lt; 0 ){
		hwpl_core_privcall(gled_priv_error, 0);
	}

	startup_fs();

	open(&amp;quot;/dev/rtc&amp;quot;, O_RDWR);

	usleep(100*1000);
	led_startup();
	link_update(NULL); 	//Run the link update thread--never returns

	return NULL;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;remove-the-bootloader&quot;&gt;Remove the Bootloader&lt;/h4&gt;

&lt;p&gt;On the CoAction-Hero, the bootloader is installed at address 0x0 while the kernel is installed at 0x40000 (at the 256K boundary of the 512K device).  If you don’t need the bootloader, you can tell Eclipse to compile the kernel to execute at address 0x0 instead of 0x40000 (see Eclipse Project Properties-&amp;gt;C/C++ Build-&amp;gt;Build Variables-&amp;gt;START_ADDR) and then use a JTAG or UART install tool to load the kernel.&lt;/p&gt;

&lt;h2 id=&quot;take-away&quot;&gt;Take Away&lt;/h2&gt;

&lt;p&gt;The easiest way to shrink the size of CoActionOS is to exclude used drivers.  You can do this and still allow users to install custom apps and
upgrade the kernel.  You can further reduce the kernel size by limited the C/POSIX functions that are available to applications by modifying the symbol table in the CoActionOS kernel library.  Finally, you can disregard the kernel symbol table and just compile the application and kernel in a unified binary.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Integrating Doxygen and Bootstrap</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2014/01/07/Tips-Integrating-Doxygen-and-Bootstrap"/>
   <updated>2014-01-07T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2014/01/07/Tips-Integrating-Doxygen-and-Bootstrap</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/doxygen-and-bootstrap.png&quot; /&gt;
Doxygen is a great tool for documenting embedded projects.  Twitter Bootstrap is
an elegant, HTML5 framework that works great on both desktop and mobile browsers.  Using
jquery and javascript, the two technologies can be easily integrated.&lt;/p&gt;

&lt;h2 id=&quot;customizing-doxygen-output&quot;&gt;Customizing Doxygen Output&lt;/h2&gt;

&lt;p&gt;Doxygen provides for a handful of ways to &lt;a href=&quot;http://www.stack.nl/~dimitri/doxygen/manual/customize.html&quot;&gt;customize the output&lt;/a&gt;.  If
you want full control over all of the Doxygen objects, you can have Doxygen output XML and then
write your own output generator to do anything you want.  The drawback of doing this is that
it requires a substantial effort.  It is much easier to simply customize the Doxygen HTML
output.&lt;/p&gt;

&lt;p&gt;Doxygen allows you to customize the HTML output by modifying the master HTML header, footer, and
stylesheet.  The following command will generate the default Doxygen HTML files.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;doxygen -w html header.html footer.html customdoxygen.css&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Modifying these files alone is not enough to get good Twitter Bootstrap integration.  Bootstrap 
requires that certain classes be applied within the body of the HTML.  For example, 
a Bootstrap “table” needs to have a class called “table” in order
to apply the Bootstrap table formatting.  Doxygen does a good job of applying classes
to different objects.  We just need to augment those classes with the Bootstrap classes.  To
do this, we use javascript and jquery.  The code below will add Bootstrap formatting
to various Doxygen tables.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;$( document ).ready(function() {
	$(&amp;quot;table.params&amp;quot;).addClass(&amp;quot;table&amp;quot;);
	$(&amp;quot;table.directory&amp;quot;).addClass(&amp;quot;table table-striped&amp;quot;);
	$(&amp;quot;table.fieldtable&amp;quot;).addClass(&amp;quot;table&amp;quot;);	
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For this to work well, we need to modify doxygen’s default stylesheet and remove almost all
formatting.  We leave the code highlighting formatting in place since this doesn’t affect
any of the Bootstrap formatting, but pretty much all other Doxygen formatting is removed.&lt;br /&gt;
We also modify the HTML header or footer to load the Bootstrap css/javascript and 
our custom javascript (doxy-boot.js).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;link href=&amp;quot;bootstrap3/css/bootstrap.min.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;bootstrap3/js/jquery-2.0.3.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;bootstrap3/js/bootstrap.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;doxy-boot.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The following code shows the full contents of doxy-boot.js used on the 
&lt;a href=&quot;/coactionos/html/&quot;&gt;CoActionOS documentation&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;$( document ).ready(function() {

	$(&amp;quot;div.headertitle&amp;quot;).addClass(&amp;quot;page-header&amp;quot;);
	$(&amp;quot;div.title&amp;quot;).addClass(&amp;quot;h1&amp;quot;);
	
	$(&amp;#39;li &amp;gt; a[href=&amp;quot;index.html&amp;quot;] &amp;gt; span&amp;#39;).before(&amp;quot;&amp;lt;i class=&amp;#39;fa fa-cog&amp;#39;&amp;gt;&amp;lt;/i&amp;gt; &amp;quot;);
	$(&amp;#39;li &amp;gt; a[href=&amp;quot;index.html&amp;quot;] &amp;gt; span&amp;#39;).text(&amp;quot;CoActionOS&amp;quot;);
	$(&amp;#39;li &amp;gt; a[href=&amp;quot;modules.html&amp;quot;] &amp;gt; span&amp;#39;).before(&amp;quot;&amp;lt;i class=&amp;#39;fa fa-square&amp;#39;&amp;gt;&amp;lt;/i&amp;gt; &amp;quot;);
	$(&amp;#39;li &amp;gt; a[href=&amp;quot;namespaces.html&amp;quot;] &amp;gt; span&amp;#39;).before(&amp;quot;&amp;lt;i class=&amp;#39;fa fa-bars&amp;#39;&amp;gt;&amp;lt;/i&amp;gt; &amp;quot;);
	$(&amp;#39;li &amp;gt; a[href=&amp;quot;annotated.html&amp;quot;] &amp;gt; span&amp;#39;).before(&amp;quot;&amp;lt;i class=&amp;#39;fa fa-list-ul&amp;#39;&amp;gt;&amp;lt;/i&amp;gt; &amp;quot;);
	$(&amp;#39;li &amp;gt; a[href=&amp;quot;classes.html&amp;quot;] &amp;gt; span&amp;#39;).before(&amp;quot;&amp;lt;i class=&amp;#39;fa fa-book&amp;#39;&amp;gt;&amp;lt;/i&amp;gt; &amp;quot;);
	$(&amp;#39;li &amp;gt; a[href=&amp;quot;inherits.html&amp;quot;] &amp;gt; span&amp;#39;).before(&amp;quot;&amp;lt;i class=&amp;#39;fa fa-sitemap&amp;#39;&amp;gt;&amp;lt;/i&amp;gt; &amp;quot;);
	$(&amp;#39;li &amp;gt; a[href=&amp;quot;functions.html&amp;quot;] &amp;gt; span&amp;#39;).before(&amp;quot;&amp;lt;i class=&amp;#39;fa fa-list&amp;#39;&amp;gt;&amp;lt;/i&amp;gt; &amp;quot;);
	$(&amp;#39;li &amp;gt; a[href=&amp;quot;functions_func.html&amp;quot;] &amp;gt; span&amp;#39;).before(&amp;quot;&amp;lt;i class=&amp;#39;fa fa-list&amp;#39;&amp;gt;&amp;lt;/i&amp;gt; &amp;quot;);
	$(&amp;#39;li &amp;gt; a[href=&amp;quot;functions_vars.html&amp;quot;] &amp;gt; span&amp;#39;).before(&amp;quot;&amp;lt;i class=&amp;#39;fa fa-list&amp;#39;&amp;gt;&amp;lt;/i&amp;gt; &amp;quot;);
	$(&amp;#39;li &amp;gt; a[href=&amp;quot;functions_enum.html&amp;quot;] &amp;gt; span&amp;#39;).before(&amp;quot;&amp;lt;i class=&amp;#39;fa fa-list&amp;#39;&amp;gt;&amp;lt;/i&amp;gt; &amp;quot;);
	$(&amp;#39;li &amp;gt; a[href=&amp;quot;functions_eval.html&amp;quot;] &amp;gt; span&amp;#39;).before(&amp;quot;&amp;lt;i class=&amp;#39;fa fa-list&amp;#39;&amp;gt;&amp;lt;/i&amp;gt; &amp;quot;);
	$(&amp;#39;img[src=&amp;quot;ftv2ns.png&amp;quot;]&amp;#39;).replaceWith(&amp;#39;&amp;lt;span class=&amp;quot;label label-danger&amp;quot;&amp;gt;N&amp;lt;/span&amp;gt; &amp;#39;);
	$(&amp;#39;img[src=&amp;quot;ftv2cl.png&amp;quot;]&amp;#39;).replaceWith(&amp;#39;&amp;lt;span class=&amp;quot;label label-danger&amp;quot;&amp;gt;C&amp;lt;/span&amp;gt; &amp;#39;);
	
	$(&amp;quot;ul.tablist&amp;quot;).addClass(&amp;quot;nav nav-pills nav-justified&amp;quot;);
	$(&amp;quot;ul.tablist&amp;quot;).css(&amp;quot;margin-top&amp;quot;, &amp;quot;0.5em&amp;quot;);
	$(&amp;quot;ul.tablist&amp;quot;).css(&amp;quot;margin-bottom&amp;quot;, &amp;quot;0.5em&amp;quot;);
	$(&amp;quot;li.current&amp;quot;).addClass(&amp;quot;active&amp;quot;);
	$(&amp;quot;iframe&amp;quot;).attr(&amp;quot;scrolling&amp;quot;, &amp;quot;yes&amp;quot;);
	
	$(&amp;quot;#nav-path &amp;gt; ul&amp;quot;).addClass(&amp;quot;breadcrumb&amp;quot;);
	
	$(&amp;quot;table.params&amp;quot;).addClass(&amp;quot;table&amp;quot;);
	$(&amp;quot;div.ingroups&amp;quot;).wrapInner(&amp;quot;&amp;lt;small&amp;gt;&amp;lt;/small&amp;gt;&amp;quot;);
	$(&amp;quot;div.levels&amp;quot;).css(&amp;quot;margin&amp;quot;, &amp;quot;0.5em&amp;quot;);
	$(&amp;quot;div.levels &amp;gt; span&amp;quot;).addClass(&amp;quot;btn btn-default btn-xs&amp;quot;);
	$(&amp;quot;div.levels &amp;gt; span&amp;quot;).css(&amp;quot;margin-right&amp;quot;, &amp;quot;0.25em&amp;quot;);
	
	$(&amp;quot;table.directory&amp;quot;).addClass(&amp;quot;table table-striped&amp;quot;);
	$(&amp;quot;div.summary &amp;gt; a&amp;quot;).addClass(&amp;quot;btn btn-default btn-xs&amp;quot;);
	$(&amp;quot;table.fieldtable&amp;quot;).addClass(&amp;quot;table&amp;quot;);
	$(&amp;quot;.fragment&amp;quot;).addClass(&amp;quot;well&amp;quot;);
	$(&amp;quot;.memitem&amp;quot;).addClass(&amp;quot;panel panel-default&amp;quot;);
	$(&amp;quot;.memproto&amp;quot;).addClass(&amp;quot;panel-heading&amp;quot;);
	$(&amp;quot;.memdoc&amp;quot;).addClass(&amp;quot;panel-body&amp;quot;);
	$(&amp;quot;span.mlabel&amp;quot;).addClass(&amp;quot;label label-info&amp;quot;);
	
	$(&amp;quot;table.memberdecls&amp;quot;).addClass(&amp;quot;table&amp;quot;);
	$(&amp;quot;[class^=memitem]&amp;quot;).addClass(&amp;quot;active&amp;quot;);
	
	$(&amp;quot;div.ah&amp;quot;).addClass(&amp;quot;btn btn-default&amp;quot;);
	$(&amp;quot;span.mlabels&amp;quot;).addClass(&amp;quot;pull-right&amp;quot;);
	$(&amp;quot;table.mlabels&amp;quot;).css(&amp;quot;width&amp;quot;, &amp;quot;100%&amp;quot;)
	$(&amp;quot;td.mlabels-right&amp;quot;).addClass(&amp;quot;pull-right&amp;quot;);

	$(&amp;quot;div.ttc&amp;quot;).addClass(&amp;quot;panel panel-info&amp;quot;);
	$(&amp;quot;div.ttname&amp;quot;).addClass(&amp;quot;panel-heading&amp;quot;);
	$(&amp;quot;div.ttdef,div.ttdoc,div.ttdeci&amp;quot;).addClass(&amp;quot;panel-body&amp;quot;);
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There are various ways to customize the Doxygen output.  The easiest way to integrate
Doxygen and Twitter Bootstrap is to use a few lines of javascript/jquery code to apply the desired
Bootstrap classes to the already well documented Doxygen output.  This results in
fully responsive, mobile-ready code documentation.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing Windows Device Drivers</title>
   <link href="http://stratifylabs.co/user%20guides/2013/12/20/CoActionOS-User-Guide-Installing-Windows-Device-Drivers"/>
   <updated>2013-12-20T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/user%20guides/2013/12/20/CoActionOS-User-Guide-Installing-Windows-Device-Drivers</id>
   <content type="html">&lt;h2 id=&quot;windows-xpvista7&quot;&gt;Windows XP/Vista/7&lt;/h2&gt;

&lt;p&gt;When CoActionOS Link is installed, it copies the driver files to C:\Windows\inf (or whatever your Windows directory is).  When a CoActionOS device is connected, Windows 7 automatically installs the driver.&lt;/p&gt;

&lt;h2 id=&quot;windows-81&quot;&gt;Windows 8.1&lt;/h2&gt;

&lt;p&gt;When CoActionOS Link is installed, it copes the driver files to C:\Windows\inf.&lt;br /&gt;
However, Windows 8 is not able to automatically install the drivers.  To install 
the drivers follow the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;After installing CoActionOS Link, connect the CoActionOS powered  device&lt;/li&gt;
  &lt;li&gt;Move CoActionOS-cdc-acm.inf and coactionos-cdc-acm.cat from C:\Windows\inf to the Desktop (or another easily accessible location)&lt;/li&gt;
  &lt;li&gt;Start the device manager&lt;/li&gt;
  &lt;li&gt;You should see “CoActionOS” under other; right click on it and select “Update Driver Software”&lt;/li&gt;
  &lt;li&gt;Select the option to specify a location for the driver&lt;/li&gt;
  &lt;li&gt;Specify to installed from the Desktop (e.g., C:\Users\you\Desktop)&lt;/li&gt;
  &lt;li&gt;Windows 8 should successfully install the driver&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These steps only need to be taken the first time a device is connected.  Subsequently, 
other CoActionOS devices should be automatically loaded by Windows 8.1.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Device Driver Development</title>
   <link href="http://stratifylabs.co/user%20guides/2013/12/18/CoActionOS-User-Guide-Device-Driver-Development"/>
   <updated>2013-12-18T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/user%20guides/2013/12/18/CoActionOS-User-Guide-Device-Driver-Development</id>
   <content type="html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Device drivers are code that is included in the kernel and used to access hardware.  They are integrated with the filesystem and populate the /dev folder.  The user application accesses drivers the same way as files.&lt;/p&gt;

&lt;h4 id=&quot;why-write-a-device-driver&quot;&gt;Why write a device driver?&lt;/h4&gt;

&lt;p&gt;It is not necessary to write a new device driver to access external circuitry.  CoActionOS includes devices drivers for the on-chip MCU peripherals such as the UART, SPI, PIO, etc.  These drivers can be used in most cases to access external chips.  However, device drivers provide much better real-time performance than application code.&lt;/p&gt;

&lt;p&gt;This code is an example of how to access a SPI device in user code (without a custom device driver):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;applib/Pin.hpp&amp;gt;
#include &amp;lt;applib/Spi.hpp&amp;gt;
...
Pin cs(1,0); //The chip select pin on P1.0
Spi spi(0); //Use SPI port 0
char buffer[16];
//Initialization
cs.init(PIO_MODE_OUTPUT); //this calls open(&amp;quot;/dev/pio1&amp;quot;, O_RDWR) and ioctl() with I_PIO_SETATTR
spi.init(4000000); //this calls open(&amp;quot;/dev/spi0&amp;quot;, O_RDWR) and ioctl() with I_SPI_SETATTR
//SPI read operation
cs = false; //drive CS low
spi.read(buffer, 16);
cs = true; //drive CS high
//Cleanup
cs.close();
spi.close();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above example, the application code uses the /dev/pio and /dev/spi devices (using Applib) to access a SPI device.  We can access the same device in a single read by writing a device driver for the SPI device.  The driver will manage both the chip select pin and the SPI bus.  The application code will then look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;applib/Periph.hpp&amp;gt;
int fd; //the fd to provide to Applib
bool initialized; //another variable required for custom applib peripherals
char buffer[16];

Periph my_periph(0, 1, &amp;amp;fd, &amp;amp;initialzed);
my_periph.open(&amp;quot;/dev/my_spi&amp;quot;, Periph::RDWR);
//The driver for /dev/my_spi can be configured to drive CS low, 
//perform a SPI bus operation, then drive CS high all with the read() call
my_periph.read(buffer, 16);

my_periph.close();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;spi-driver-example&quot;&gt;SPI Driver Example&lt;/h3&gt;

&lt;p&gt;Drivers are built with the kernel by populating a device_t.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;typedef struct {
	char name[NAME_MAX] /*! \brief The name of the device */;
	uint8_t uid /*! \brief The user ID of the device */;
	uint8_t gid /*! \brief The group ID of the device */;
	uint16_t mode /*! \brief The file access values */;
	device_driver_t driver /*! \brief The driver functions */;
	device_cfg_t cfg /*! \brief The configuration for the device */;
} device_t;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;em&gt;name&lt;/em&gt; shows up in the /dev folder.  For example, if the &lt;em&gt;name&lt;/em&gt; is adc3, the file /dev/adc3 will exist.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;uid&lt;/em&gt; and &lt;em&gt;gid&lt;/em&gt; are the user and group ID’s.  CoActionOS currently has a single user system so these items have no meaning.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;mode&lt;/em&gt; is the unix access permissions.  Most devices are 0666&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;driver&lt;/em&gt; points to the functions that will be called when the user accesses the device&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;cfg&lt;/em&gt; points to a structure that allows the board support package to reconfigured what hardware is used for the port.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;em&gt;device_driver_t&lt;/em&gt; is shown below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;typedef struct HWPL_PACK {
	device_driver_open_t open /*! \brief A pointer to the periph_open() function */;
	device_driver_ioctl_t ioctl /*! \brief A pointer to the periph_ioctl() function */;
	device_driver_read_t read /*! \brief A pointer to the periph_read() function */;
	device_driver_write_t write /*! \brief A pointer to the periph_write() function */;
	device_driver_close_t close /*! \brief A pointer to the periph_close() function */;
} device_driver_t;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;device_driver_t&lt;/em&gt; structure defines five function pointers that will be called when the user calls open(), read(), write(), ioctl(), or close().&lt;/p&gt;

&lt;p&gt;Finally, the &lt;em&gt;device_cfg_t&lt;/em&gt; allows the board support package to configure what hardware is used to access the device.  For example, one board might use SPI port 1 with P1.0 as the chip select to access an external SPI device.  Another board may use SPI port 0 with P2.8 as the chip select.  The &lt;em&gt;device_cfg_t&lt;/em&gt; data structure allows both boards to use the exact same device driver.  It is not even necessary to recompile the driver-just to re-link with it. This approach allows device driver developers to release hardware configurable drivers with or without releasing the source code.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;typedef struct HWPL_PACK {
	device_periph_t periph /*! \brief This is the configuration used for all peripherals */;
	uint8_t pin_assign /*! \brief The GPIO pin configuration */;
	uint32_t bitrate /*! \brief Specifies the max bit rate in bps */;
	union {
		device_spi_cfg_t spi /*! \brief The configuration for devices that are connected via SPI bus */;
		device_pwm_cfg_t pwm /*! \brief The configuration for devices connected via PWM */;
		device_adc_cfg_t adc /*! \brief The configuration for devices connected to ADC pins */;
		device_uart_cfg_t uart /*! \brief The configuration for devices connected to UART pins */;
		device_i2c_cfg_t i2c /*! \brief The configuration for devices connected via I2C bus */;
		pio_t pio[4] /*! \brief Used for generic GPIO devices such as LEDs */;
	} pcfg;
	const void * dcfg /*! \brief Pointer to device specific configuration */;
	void * state /*! \brief Pointer to device specific state (RAM) */;
} device_cfg_t;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;periph&lt;/em&gt; contains data describes the MCU peripheral; current this is a single value that specifies the port number&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;pin_assign&lt;/em&gt; specifies how to map the peripheral to the hardware pins.  As an example, see “the pin assignments for the lpc17xx”:/redmine/projects/coactionos/embedded/group___l_p_c17_x_x_d_e_v.html.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;bitrate&lt;/em&gt; specifies the maximum bitrate&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;pcfg&lt;/em&gt; contains data that is useful for most serial drivers.  For example, the &lt;em&gt;device_spi_cfg_t&lt;/em&gt; data allows the driver to specify the port/pin combination for the chip select line.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;dcfg&lt;/em&gt; allows the driver developer to provide any additional constant data that is needed.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;state&lt;/em&gt; allows the driver developer to provide any additional volatile data&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Designing Applications using State Machines</title>
   <link href="http://stratifylabs.co/user%20guides/2013/12/17/CoActionOS-User-Guide-Designing-Applications-using-State-Machines"/>
   <updated>2013-12-17T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/user%20guides/2013/12/17/CoActionOS-User-Guide-Designing-Applications-using-State-Machines</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;A state machine is a model that helps when designing computer programs.  The state 
machine is represented by a state diagram that shows 1) what states the 
program can have, 2) how the program transitions between states, and 3) what 
actions the programs takes while entering, exiting, or executing a state.  A 
simple example of a state machine is a turnstile.  The following 
diagram (from wikipedia) shows how the state machine works.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/turnstile.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The diagram shows at startup, the turnstile is locked.  When a coin is inserted, the 
turnstile transitions to unlocked until someone walks through.&lt;/p&gt;

&lt;h2 id=&quot;a-coactionos-example&quot;&gt;A CoActionOS Example&lt;/h2&gt;

&lt;h3 id=&quot;smach-and-state&quot;&gt;SMach and State&lt;/h3&gt;

&lt;p&gt;CoActionOS Applib provides a C++ class for defining and executing state machines.  For 
this example, we will use an alarm application.  The program will start in the “home” 
state.  When the user pushes start, the program will enter the “timer” state.  From 
the “timer” state the user can push the reset button to return “home” or after 10 
seconds, the state machine will transition to the “alarm” state.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/states.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To implement the state machine, we use two Applib classes &lt;a href=&quot;/coactionos-applib/html/class_s_mach.html&quot;&gt;SMach&lt;/a&gt; as 
the top level state machine and &lt;a href=&quot;/coactionos-applib/html/class_state.html&quot;&gt;State&lt;/a&gt; for 
each individual state.  Each state is implemented as it’s own class which 
inherits &lt;a href=&quot;/coactionos-applib/html/class_state.html&quot;&gt;State&lt;/a&gt; and re-implements:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;const char * name();  //unique state name
bool entry_action(void); //action to execute when entering the state
bool action(void); //action to execute while state is active
State * exit_condition(State * slist[]); //Executing to see if state should transition&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The methods above fit in to the state diagram above as noted below.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/states-info.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;home-state&quot;&gt;Home State&lt;/h3&gt;

&lt;p&gt;This means the “home” state class looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;applib/State.hpp&amp;gt;
#include &amp;lt;applib/Pin.hpp&amp;gt;

class HomeState : public State {
public:
	HomeState() : State() {};

	//The name of the state
	const char * name(){ return &amp;quot;home&amp;quot;; }

	//The state machine executes this function when the state is entered
	bool entry_action(void){ return true; }

	//The state executes this function while the state is active
	bool action(void){ return true; }

	//The state executes this function while the state is active
	//If this function returns a State other than 0 -- the state machine will transition to the new state
	State * exit_condition(State * slist[]){
		State * next = 0;
		Pin start(1,0); //assume state button is on P1.0
		start.init(Pin::INPUT | Pin::PULLDOWN); //this only NEEDS to be called once at system startup
		if( start.value() == true ){
			next = find(slist, &amp;quot;timer&amp;quot;);
		}
		return next;
	}
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The “timer” and “alarm” states are similarly defined.  The “timer” state’s name() method must return “timer” in order to the home state to find the state in the list.  Next we will look at how the state machine is executed using SMach.&lt;/p&gt;

&lt;h3 id=&quot;state-machine-execution&quot;&gt;State Machine Execution&lt;/h3&gt;

&lt;p&gt;The state machine is a special type of state that contains a list of states that define the machine.  It is declared quite similarly to a State.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;applib/SMach.hpp&amp;gt;
class Machine : public SMach {
public:
	Machine();
	void run(void);
	bool action(void);
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The run() method will be used to execute the state machine.  The action() method is optional.  It allows the state machine to execute some action whenever any state within the machine is active.  For example, if you want to delay 10ms between executing state actions for all states, it can be done using the action() method as in the example below.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;applib/Timer.hpp&amp;gt;
#include &amp;quot;Machine.hpp&amp;quot;

#include &amp;quot;HomeState.hpp&amp;quot;
#include &amp;quot;AlarmState.hpp&amp;quot;
#include &amp;quot;TimerState.hpp&amp;quot;

static HomeState home;
static AlarmState alarm;
static TimerState timer;

//This is the state list -- it defines the states within the state machine
State * states[] = {
		&amp;amp;home,
		&amp;amp;timer,
		&amp;amp;alarm,
		0
};

Machine::Machine() : SMach(states, &amp;amp;home){}

void Machine::run(void){
	SMach::exec(states, this);
}

bool Machine::action(void){
	//This is executed when any state within the state machine is active
	Timer::wait_msec(10);
	//Now call the parent action to execute the action within the active state
	return SMach::action();
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see in the action() method, we delay for 10ms.  This will be called in the “home”, “timer”, and “alarm” states.  Call it a “global” action.  If a global state machine action is not used, you don’t need to re-implement the action() method at all.&lt;/p&gt;

&lt;p&gt;Since this &lt;a href=&quot;/coactionos-applib/html/class_s_mach.html&quot;&gt;SMach&lt;/a&gt; is a top 
level machine, we don’t implement the exit_condition() method.  However, 
an &lt;a href=&quot;/coactionos-applib/html/class_s_mach.html&quot;&gt;SMach&lt;/a&gt; is just a special 
type of &lt;a href=&quot;/coactionos-applib/html/class_state.html&quot;&gt;State&lt;/a&gt; and can be part 
of a higher level SMach’s state list.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;State machines are a great way of designing complex firmware programs.  Using the Applib 
&lt;a href=&quot;/coactionos-applib/html/class_s_mach.html&quot;&gt;SMach&lt;/a&gt; and &lt;a href=&quot;/coactionos-applib/html/class_state.html&quot;&gt;State&lt;/a&gt; classes 
makes doing so quick and easy.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Developing on CoActionOS using Eclipse</title>
   <link href="http://stratifylabs.co/user%20guides/2013/12/16/CoActionOS-User-Guide-CoActionOS-and-Eclipse"/>
   <updated>2013-12-16T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/user%20guides/2013/12/16/CoActionOS-User-Guide-CoActionOS-and-Eclipse</id>
   <content type="html">&lt;p&gt;Eclipse is an Integrated Development Environement (IDE) that works great for developing CoActionOS applications.&lt;/p&gt;

&lt;p&gt;To start using Eclipse with CoActionOS, you’ll first need to download and install 
the latest version of Eclipse.  You can then import sample projects 
downloaded from this website into Eclipse. Eclipse can then be used to build and debug programs.&lt;/p&gt;

&lt;h3 id=&quot;download-eclipse&quot;&gt;Download Eclipse&lt;/h3&gt;

&lt;p&gt;Eclipse can be downloaded for free from http://www.eclipse.org/downloads/. You want to download the Eclipse IDE for C/C++ Developers (known as C/C++ Developer Tools or CDT). The download package includes a single zip file.&lt;/p&gt;

&lt;h3 id=&quot;installing&quot;&gt;Installing&lt;/h3&gt;

&lt;h4 id=&quot;windows&quot;&gt;Windows&lt;/h4&gt;

&lt;p&gt;Eclipse is distributed as a zip file.  It just needs to be extracted and then you can create a shortcut to the eclipse.exe executable.&lt;/p&gt;

&lt;h4 id=&quot;mac-os-x&quot;&gt;Mac OS X&lt;/h4&gt;

&lt;p&gt;Eclipse is distributed as an application bundle.  You can copy the bundle to the /Applications folder (or anywhere else you like) to install Eclipse.&lt;/p&gt;

&lt;h4 id=&quot;linux&quot;&gt;Linux&lt;/h4&gt;

&lt;p&gt;Eclipse is also available on Linux.  You can usually just download the latest package and extract the files.  Some distributions (Ubuntu, for example) have Eclipse in their built-in software stores.&lt;/p&gt;

&lt;h3 id=&quot;starting-eclipse&quot;&gt;Starting Eclipse&lt;/h3&gt;

&lt;p&gt;When Eclipse starts, it will prompt you for a workspace. The most common place to put the workspace on Windows 7 and Mac OS X is in /Users/username/workspace. On Windows XP, it is easiest to use c:\workspace.&lt;/p&gt;

&lt;p&gt;Once Eclipse starts, you will want to open the C/C++ perspective by:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click Window-&amp;gt;Open Perspective-&amp;gt;Other… (or C/C++ if it is shown)&lt;/li&gt;
  &lt;li&gt;Highlight C/C++ then click OK&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;adding-a-coactionos-application-to-eclipse&quot;&gt;Adding a CoActionOS Application to Eclipse&lt;/h3&gt;

&lt;p&gt;To add a new project to Eclipse, first import the Hello World sample project. You then rename the project to whatever you wish (but don’t use any spaces or CoActionOS will reject the binary that is created).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=6-rbEx6AV6A&quot;&gt;This youtube video&lt;/a&gt; walks through importing a project in Eclipse.&lt;/p&gt;

&lt;h3 id=&quot;updating-the-include-paths-and-rebuilding-the-index&quot;&gt;Updating the Include Paths and Rebuilding the Index&lt;/h3&gt;

&lt;p&gt;If you are getting code errors in the default Hello World program, you may need to re-initialize the include paths and re-build the index. To do this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Right click on the project and click “Properties”&lt;/li&gt;
  &lt;li&gt;In the left pane, browser to “C/C++ General -&amp;gt; Preprocessor Include Paths”&lt;/li&gt;
  &lt;li&gt;In the center of the window, click “Providers”&lt;/li&gt;
  &lt;li&gt;Highlight “CDT GCC Builtin Compilter Settings” and then click the “Clear Entries” button in the right pane&lt;/li&gt;
  &lt;li&gt;Hit “Apply” then “OK”&lt;/li&gt;
  &lt;li&gt;Right click on the project and click “Index -&amp;gt; Rebuild”&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Building and Installing CoActionOS</title>
   <link href="http://stratifylabs.co/user%20guides/2013/12/15/CoActionOS-User-Guide-Building-and-Installing-CoActionOS"/>
   <updated>2013-12-15T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/user%20guides/2013/12/15/CoActionOS-User-Guide-Building-and-Installing-CoActionOS</id>
   <content type="html">&lt;h3 id=&quot;building-and-installing-coactionos-static-libraries&quot;&gt;Building and Installing CoActionOS Static Libraries&lt;/h3&gt;

&lt;p&gt;CoActionOS is built as a library.  The library just needs to link to the board support 
package to make the final binary.  To build CoActionOS, you need to download the 
&lt;a href=&quot;https://github.com/CoActionOS/CoActionOS&quot;&gt;source code&lt;/a&gt; and import the CoActionOS 
project in to Eclipse.  Once in Eclipse, you can right click on CoActionOS 
then click Build Configurations-&amp;gt;Build All.  Or you can just click the hammer 
icon and select the target architecture.&lt;/p&gt;

&lt;p&gt;The build process will launch a script called post-process.sh (unix/linux) or post-process.bat 
(win32).  To install correctly in unix/linux you need to make sure sudo can be run with 
post-process.sh.  The easiest way to do this is to add the folowing line to /etc/sudoers.&lt;br /&gt;
Otherwise you can edit the ask-pass.sh program to write your password to the standard output.&lt;/p&gt;

&lt;pre&gt;your_username	ALL=(ALL) NOPASSWD:ALL&lt;/pre&gt;

&lt;h3 id=&quot;building-and-installing-kernel-binaries&quot;&gt;Building and Installing Kernel Binaries&lt;/h3&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;span class=&quot;label label-danger&quot;&gt;Note&lt;/span&gt; The latest version 
of the CoActionOS library is installed when you download and install the compiler.&lt;/div&gt;

&lt;p&gt;Once the CoActionOS library is built and installed on your development system, you can build the kernel.  The kernel is built by downloading a “board support package”:/redmine/projects/hardware/files and importing it in to Eclipse.  With the board support package, you can modify what devices and filesystems are available on the board.  For example, the CoAction Hero board support package comes with /dev/i2c0, /dev/i2c1, /dev/i2c2.  If you comment out the following lines, these devices won’t be available to user applications.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;//DEVICE_PERIPH(&amp;quot;i2c0&amp;quot;, hwpl_i2c, 0, 0666, USER_ROOT, GROUP_ROOT, S_IFCHR),
//DEVICE_PERIPH(&amp;quot;i2c1&amp;quot;, hwpl_i2c, 1, 0666, USER_ROOT, GROUP_ROOT, S_IFCHR),
//DEVICE_PERIPH(&amp;quot;i2c2&amp;quot;, hwpl_i2c, 2, 0666, USER_ROOT, GROUP_ROOT, S_IFCHR),&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;span class=&quot;label label-danger&quot;&gt;Note&lt;/span&gt; If you remove 
all three I2C ports, the resulting binary will exclude the I2C driver.  However, if you 
include just one port, the resulting binary will be almost the same size as including 
all three ports.&lt;/div&gt;

&lt;p&gt;The filesystems are also linked in the board support package.  You can remove a 
filesystem by commenting it out.  The / (root), /app, and /dev filesystems are 
required for proper operation.  The /home filesystem mount if for storing files 
on an external flash chip and is not required for normal operation.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;const sysfs_t const sysfs_list[] = {
	//the folder for ram/flash applications
	SYSFS_APP(&amp;quot;/app&amp;quot;, &amp;amp;(devices[MEM_DEV]), SYSFS_ALL_ACCESS),
	SYSFS_DEV(&amp;quot;/dev&amp;quot;, devices, SYSFS_READONLY_ACCESS), //devices
	CAFS_LITE(&amp;quot;/home&amp;quot;, &amp;amp;cafs_lite_cfg, SYSFS_ALL_ACCESS), //user files
	SYSFS_ROOT(&amp;quot;/&amp;quot;, sysfs_list, SYSFS_READONLY_ACCESS), //root
	SYSFS_TERMINATOR
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you have the devices and filesystems you want, you just hit the hammer in Eclipse 
to build the kernel binary.  You can then use CoActionOS Link to install the binary.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Getting Started</title>
   <link href="http://stratifylabs.co/user%20guides/2013/12/14/CoActionOS-User-Guide-Getting-Started"/>
   <updated>2013-12-14T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/user%20guides/2013/12/14/CoActionOS-User-Guide-Getting-Started</id>
   <content type="html">&lt;h3 id=&quot;buy-hardware&quot;&gt;Buy Hardware&lt;/h3&gt;

&lt;p&gt;Buy the &lt;a href=&quot;/getting%20started/2013/09/01/Getting-Started-Buy-the-Hardware&quot;&gt;CoAction Hero&lt;/a&gt; (easiest way to get started). Or
you can install CoActionOS on the mbed LPC1768 platform.&lt;/p&gt;

&lt;h3 id=&quot;install-eclipse-ide&quot;&gt;Install Eclipse IDE&lt;/h3&gt;

&lt;p&gt;The Eclipse IDE is used for editing and building CoActionOS applications.  You 
can download the &lt;a href=&quot;http://www.eclipse.org/cdt/downloads.php&quot;&gt;Eclipse IDE&lt;/a&gt; for free.&lt;/p&gt;

&lt;h3 id=&quot;install-the-sdk&quot;&gt;Install the SDK&lt;/h3&gt;

&lt;p&gt;To build and install applications on CoActionOS, you will need 
to &lt;a href=&quot;/getting%20started/2013/09/02/Getting-Started-Get-the-Software&quot;&gt;get the software&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;build-and-install-your-first-application&quot;&gt;Build and Install Your First Application&lt;/h3&gt;

&lt;p&gt;Read the &lt;a href=&quot;/coactionos%20tutorials/2013/11/01/CoActionOS-Tutorial-First-Project&quot;&gt;CoActionOS Tutorial&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Order of Operations Reference</title>
   <link href="http://stratifylabs.co/embedded%20c%20tutorial/2013/12/11/Embedded-C-Tutorial-Order-of-Operations"/>
   <updated>2013-12-11T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/embedded%20c%20tutorial/2013/12/11/Embedded-C-Tutorial-Order-of-Operations</id>
   <content type="html">&lt;p&gt;The following is a list of the C order of operations from highest precendence to lowest.&lt;br /&gt;
Operators within the same group have equal precendence and evaluate lefto-to-right 
or right-to-left as indicated.&lt;/p&gt;

&lt;h3 id=&quot;left-to-right&quot;&gt;Left-to-Right&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;++ post increment&lt;/li&gt;
  &lt;li&gt;– post decrement&lt;/li&gt;
  &lt;li&gt;() function call&lt;/li&gt;
  &lt;li&gt;[] array subscripting&lt;/li&gt;
  &lt;li&gt;-&amp;gt; element selection via pointer&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;right-to-left&quot;&gt;Right-to-Left&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;++ pre increment&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;–&lt;/span&gt; pre decrement&lt;/li&gt;
  &lt;li&gt;+ unary plus&lt;/li&gt;
  &lt;li&gt;- unary minus&lt;/li&gt;
  &lt;li&gt;! logical not&lt;/li&gt;
  &lt;li&gt;~ bitwise not&lt;/li&gt;
  &lt;li&gt;(type) type casting&lt;/li&gt;
  &lt;li&gt;* dereference&lt;/li&gt;
  &lt;li&gt;&amp;amp; address of&lt;/li&gt;
  &lt;li&gt;sizeof() sizeof type or variable&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;left-to-right-1&quot;&gt;Left-to-Right&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;* multiplication&lt;/li&gt;
  &lt;li&gt;/ division&lt;/li&gt;
  &lt;li&gt;% modulo&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;left-to-right-2&quot;&gt;Left-to-Right&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;+ addition&lt;/li&gt;
  &lt;li&gt;- subtraction&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;left-to-right-3&quot;&gt;Left-to-Right&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt; bitwise shift right&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt; bitwise shift left&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;left-to-right-4&quot;&gt;Left-to-Right&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;span&gt;&amp;lt;&lt;/span&gt; less than&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;&amp;lt;=&lt;/span&gt; less than or equal to&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; greater than&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;&amp;gt;=&lt;/span&gt; greater than or equal to&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;left-to-right-5&quot;&gt;Left-to-Right&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;span&gt;!=&lt;/span&gt; not equal to&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;==&lt;/span&gt; equal to&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;left-to-right-6&quot;&gt;Left-to-Right&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&amp;amp; bitwise and&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;left-to-right-7&quot;&gt;Left-to-Right&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;^ bitwise xor&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;left-to-right-8&quot;&gt;Left-to-Right&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;bitwise or&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;left-to-right-9&quot;&gt;Left-to-Right&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&amp;amp;&amp;amp; logical and&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;left-to-right-10&quot;&gt;Left-to-Right&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt; &lt;/td&gt;
          &lt;td&gt;logical or&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;left-to-right-11&quot;&gt;Left-to-Right&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;?: ternary operator&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;right-to-left-1&quot;&gt;Right-to-Left&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;span&gt;=&lt;/span&gt; assign&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;+=&lt;/span&gt; assign sum&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;-=&lt;/span&gt; assign difference&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;*=&lt;/span&gt; assign product&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;/=&lt;/span&gt; assign quotient&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;%=&lt;/span&gt; assign remainder&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;&amp;lt;&amp;lt;=&lt;/span&gt; assign shift left&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;&amp;gt;&amp;gt;=&lt;/span&gt; assign shift right&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;&amp;amp;=&lt;/span&gt; assign and&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;^=&lt;/span&gt; assign xor&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;span&gt;&lt;/span&gt;&lt;/td&gt;
          &lt;td&gt;=&amp;lt;/span&amp;gt; assign or&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;left-to-right-12&quot;&gt;Left-to-Right&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;, comma (evaluates to the value of the second argument)&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Keywords Reference</title>
   <link href="http://stratifylabs.co/embedded%20c%20tutorial/2013/12/10/Embedded-C-Tutorial-Keyword-Reference"/>
   <updated>2013-12-10T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/embedded%20c%20tutorial/2013/12/10/Embedded-C-Tutorial-Keyword-Reference</id>
   <content type="html">&lt;p&gt;This tutorial (part of the embedded C tutorial) is a list of the C keywords for reference.&lt;/p&gt;

&lt;h3 id=&quot;data-types&quot;&gt;Data Types&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;char &lt;/li&gt;
  &lt;li&gt;int&lt;/li&gt;
  &lt;li&gt;long&lt;/li&gt;
  &lt;li&gt;float&lt;/li&gt;
  &lt;li&gt;double&lt;/li&gt;
  &lt;li&gt;_Bool&lt;/li&gt;
  &lt;li&gt;void&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data-type-modifiers&quot;&gt;Data Type Modifiers&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;unsigned&lt;/li&gt;
  &lt;li&gt;const&lt;/li&gt;
  &lt;li&gt;static&lt;/li&gt;
  &lt;li&gt;volatile&lt;/li&gt;
  &lt;li&gt;extern&lt;/li&gt;
  &lt;li&gt;restrict&lt;/li&gt;
  &lt;li&gt;inline&lt;/li&gt;
  &lt;li&gt;auto&lt;/li&gt;
  &lt;li&gt;register&lt;/li&gt;
  &lt;li&gt;_Complex&lt;/li&gt;
  &lt;li&gt;_Imaginary&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;compound-data-types&quot;&gt;Compound Data Types&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;struct&lt;/li&gt;
  &lt;li&gt;enum&lt;/li&gt;
  &lt;li&gt;union&lt;/li&gt;
  &lt;li&gt;typedef&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;flow-control&quot;&gt;Flow Control&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;if&lt;/li&gt;
  &lt;li&gt;else&lt;/li&gt;
  &lt;li&gt;switch&lt;/li&gt;
  &lt;li&gt;case&lt;/li&gt;
  &lt;li&gt;default&lt;/li&gt;
  &lt;li&gt;goto&lt;/li&gt;
  &lt;li&gt;break&lt;/li&gt;
  &lt;li&gt;for&lt;/li&gt;
  &lt;li&gt;do&lt;/li&gt;
  &lt;li&gt;while&lt;/li&gt;
  &lt;li&gt;continue&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;utility&quot;&gt;Utility&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;sizeof&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Compound Data Types</title>
   <link href="http://stratifylabs.co/embedded%20c%20tutorial/2013/12/09/Embedded-C-Tutorial-Compound-Data-Types"/>
   <updated>2013-12-09T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/embedded%20c%20tutorial/2013/12/09/Embedded-C-Tutorial-Compound-Data-Types</id>
   <content type="html">&lt;p&gt;The C languages defines several types of compound data structures. The structures treat the data differently when stored in memory. The following compound data types exist.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;struct: data in a struct is allocated contiguously in memory&lt;/li&gt;
  &lt;li&gt;union: data in a union occupy the same memory location&lt;/li&gt;
  &lt;li&gt;enum: this is a list of valid values for the specified type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;C also provides two important tools for programmers that allow them to define new data types (using typedef) and check the size of existing types (using sizeof).&lt;/p&gt;

&lt;h3 id=&quot;struct&quot;&gt;struct&lt;/h3&gt;

&lt;p&gt;Of these types the struct is the most commonly used. In programming design, related data is combined in a struct. The C language, per se, does not define any struct’s. However, the C standard library defines a number of them. A good example of this is struct tm which is the data structure for storing calendar time. The following code segment shows how the structure is defined (part of the time.h header).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;struct tm {
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The program below shows how to access (read and write) members of a struct using the period (.) syntax to access members.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;time.h&amp;gt;  //&amp;quot;struct tm&amp;quot; is defined here 
int main(int argc, char * argv[]){ 
     struct tm t; //declare t as a struct tm 
     t.tm_sec = 30; //assign 30 to the tm_sec member 
     t.tm_min = 5; //assign 5 to the tm_min member 
     t.tm_hour = 10; //assign 10 to the tm_hour member 
     printf(&amp;quot;time is %d:%d:%d\n&amp;quot;, t.tm_hour, t.tm_min, t.tm_sec); 
     exit(0); 
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This program ouputs:&lt;/p&gt;

&lt;pre&gt;
time is 10:5:30
union
&lt;/pre&gt;

&lt;p&gt;The syntax for union is similar to that of struct. However, the memory allocation for a union is very different. For a struct, each member is assigned a unique location in memory, but all members of a union share the same memory location. The size of the union in memory is at least large enough to hold the largest member.&lt;/p&gt;

&lt;h3 id=&quot;enum&quot;&gt;enum&lt;/h3&gt;

&lt;p&gt;An enum is a list of values that should be assigned to a variable. An enum variable occupies enough memory to hold the largest value of the enum and has values rather than members (unlike union and struct). Using enum is equivalent to using an integer type large enough to hold all enum values. The compiler does not ensure that values assigned to enum types are in the list.&lt;/p&gt;

&lt;h2 id=&quot;combining-compound-data-types&quot;&gt;Combining Compound Data Types&lt;/h2&gt;

&lt;p&gt;Compound data types (specifically, unions and structs) can be combined in various ways. There can be unions within structs, vice versa, and almost any other combination. The following code shows a couple of examples.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
struct point { 
     //This structure has location and color data 
     int x; 
     int y; 
     int z; 
     union color_union { //The color data can be accesses as elements or one number               struct rgb_struct { 
                uint8_t r; //red element 
                uint8_t g; //green element 
                uint8_t b; //blue element 
                uint8_t alpha; //transparency element 
          } rgb; 
          uint32_t rgba; //rgb and transparency elements 
     } color; }; 
 
int main(int argc, char * argv[]){ 
     struct point p0; 
     p0.x = 100; 
     p0.y = 200; 
     p0.z = 500; 
     p0.color.rgb.r = 255; 
     p0.color.rgb.g = 0; 
     p0.color.rgb.b = 0; 
     p0.color.rgb.alpha = 8; 
     printf(&amp;quot;%d,%d,%d %d\n&amp;quot;, p0.x, p0.y, p0.z, p0.color.rgba); 
     exit(0); 
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example, there is a struct within a union within a struct. When p0 is assigned memory, it has the following layout assuming int is four bytes:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/memory-layout.svg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;type-definitions&quot;&gt;Type Definitions&lt;/h3&gt;

&lt;p&gt;Users (C Programmers) can define types using any raw or compound data type as well as previously defined user types. The stdint.h header is a good example of user-defined types using purely raw data types. The code snippet below shows a partial, simplied implemenation of stdint.h on a 32-bit processor.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#ifndef _STDINT_H  //this is the header guard
#define _STDINT_H
typedef unsigned int uint32_t;
typedef signed int int32_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef unsigned short uint16_t;
typedef signed short int16_t;
#endif&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since this is a header file, the first thing is the header guard as mentioned in the preprocessor directives lesson. Next, the typedef keyword is introduced which defines a new data type than can be declared just like any other data type. The example then uses raw types to define the C99 integers in stdint.h. The code below illustrates the use of these types alongside raw types; it also introduces a new C keyword: sizeof.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;  
#include &amp;lt;stdint.h
int main(int argc, char * argv[]){ 
	unsigned char x;
	uint8_t y; //x and y are the same type on most processors 
	int w; 
	int32_t z; //show the sizes (number of bytes in memory) used by each variable 
	printf(&amp;quot;sizeof(x) is %d, sizeof(y) is %d\n&amp;quot;, sizeof(x), sizeof(y)); 
	printf(&amp;quot;sizeof(w) is %d, sizeof(z) is %d\n&amp;quot;, sizeof(w), sizeof(z)); 
	exit(0);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As shown, uint8_t can be used just like unsigned char after the typedef unsigned char uint8_t line which is located in stdint.h. The program has the following output showing that the uint8_t/unsigned char types use one byte in memory while the int32_t/int types use four bytes in memory.&lt;/p&gt;

&lt;pre&gt;
sizeof(x) is 1, sizeof(y) is 1
sizeof(w) is 4, sizeof(z) is 4
&lt;/pre&gt;

&lt;p&gt;The sizeof keyword can operate both on types and variables. The example above uses the variable, for example sizeof(x). But it is also OK to use sizeof(unsigned char). The sizeof keyword is especially useful with structs. For the calendar time struct mentioned above, we use sizeof(struct tm). This notation is used when the struct has not been defined as a type using typedef.&lt;/p&gt;

&lt;h2 id=&quot;take-away&quot;&gt;Take Away&lt;/h2&gt;

&lt;p&gt;Compound data types in C give the programmer a powerful set of tools for organizing data. The C struct is the most common compound data type and organizes data contiguously in memory. A union allows the same place in memory to be treated as different types. An enum defines a list of values but acts more like a macro (see #define) than a compound data type. Users can also create customized types using the typedef keyword. Finally, the sizeof keyword determines the amount of memory used by a variable or type.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Preprocessor Directives</title>
   <link href="http://stratifylabs.co/embedded%20c%20tutorial/2013/12/08/Embedded-C-Tutorial-Preprocessor"/>
   <updated>2013-12-08T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/embedded%20c%20tutorial/2013/12/08/Embedded-C-Tutorial-Preprocessor</id>
   <content type="html">&lt;p&gt;The C language preprocesses all code before compilation. Within the program, preprocessor directives give special instructions to the preprocessor. Preprocessor directives in C start with the hash symbol (#). This tutorial describes the basic function of preprocessor directives in C. The following directives are available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;#include: include another file in the source&lt;/li&gt;
  &lt;li&gt;#define: define a symbol to be replaced during preprocessing&lt;/li&gt;
  &lt;li&gt;#undef: un-define a previously defined symbol&lt;/li&gt;
  &lt;li&gt;#if, #ifdef, #ifndef, #else, #endif: tell the preprocessor to conditionally compile parts of the code&lt;/li&gt;
  &lt;li&gt;#pragma: give a special instruction to the compiler&lt;/li&gt;
  &lt;li&gt;#error: specify a user-defined error&lt;/li&gt;
  &lt;li&gt;#warning: specifiy a user-define warning&lt;/li&gt;
  &lt;li&gt;#include&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the preprocessor encounters the #include directive, it replaces the #include line with the contents of the included file. Local files are included using quotation marks while system files are included using less/greater than symbols.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;//This is a system file 
#include &amp;quot;local.h&amp;quot; //This is a local include file&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;define-and-undef&quot;&gt;#define and #undef&lt;/h3&gt;

&lt;p&gt;When the preprocessor encounters the #define directive, it replaces the symbol with the specified definition. As a matter of convention, defined symbols are written in all capital letters using underscores to separate words. The #undef directive can be used to remove the definition of a previous #define. The following program shows the basic usage of #define.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#define INIT_X_VALUE 10 
#define INIT_Y_VALUE 100 
int main(int argc, char * argv[]){ 
     int x, y; 
     x = INIT_X_VALUE; 
     y = INIT_Y_VALUE; 
     printf(&amp;quot;X is %d, Y is %d\n&amp;quot;, x, y); 
     exit(0);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;if-ifdef-ifndef-else-endif&quot;&gt;#if, #ifdef, #ifndef, #else, #endif&lt;/h3&gt;

&lt;p&gt;The conditional directives tell the compiler to omit or include certain code snippets based on various criteria. Let’s start with a program example.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#define DEBUG 1
#ifdef DEBUG
#define debug_printf(...) printf(__VA_ARGS) 
#else 
#define debug_printf(...) 
#endif 
int main(int argc, char * argv[]){ 
     debug_printf(&amp;quot;This is a debug message\n&amp;quot;); 
     exit(0); 
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The preceding program illustrates one way to enable and disable debugging messages in a program. It uses the #ifdef directive to tell the compiler to use printf() if DEBUG is defined and just use an empty statement if it is not.&lt;/p&gt;

&lt;p&gt;One standard use of the #ifndef directive is called a header guard. If a single program includes the same header more than once, this can sometimes cause problems because some types may be defined more than one time. A header guard prevents these problems by defining a new symbol and only including the header if the new symbol has not yet been defined. This ensures the preprocessor only includes the file one time.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#ifndef MY_HEADER_FILE_H_
#define MY_HEADER_FILE_H_
typedef int my_int_type;
int my_function_prototype(void);
#endif //end if for MY_HEADER_FILE_H_&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;error-and-warning&quot;&gt;#error and #warning&lt;/h3&gt;

&lt;p&gt;The #error and #warning directives allow for user defined errors and warnings that the compiler picks uThe utility of these directives is in making sure the program is configured correctly if there are limits on what conditions the program may compile. The following program illustrates how these directives may be used.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#define DEBUG 1 
#if DEBUG != 0 
#define debug_printf(...) printf(__VA_ARGS) 
#warning &amp;quot;Debugging is turned on&amp;quot; 
#else #define debug_printf(...) 
#endif 
int main(int argc, char * argv[]){ 
     debug_printf(&amp;quot;This is a debug message\n&amp;quot;); 
     exit(0); 
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The program above uses a preprocessor directive that causes the compiler to warn the user if debugging is enabled. In other situations, #error might be more appropriate. For example, if the user has defined a value that is not in a valid range.&lt;/p&gt;

&lt;h3 id=&quot;pragma&quot;&gt;#pragma&lt;/h3&gt;

&lt;p&gt;The #pragma directive gives special instructions to the compiler. The #pragma directive is especially useful in embedded C programming and can tell the compiler to allocate a certain variable in RAM or EEPROM. It can also tell the compiler to insert a snippet of assembly language code.&lt;/p&gt;

&lt;p&gt;The GNU GCC compiler, which is a popular compiler for various embedded architectures such as ARM and AVR, also uses attributes as an alternative syntax to the #pragma directive.&lt;/p&gt;

&lt;h3 id=&quot;take-away&quot;&gt;Take Away&lt;/h3&gt;

&lt;p&gt;C language compilers always preprocess the code and execute any preprocessor directives during that stage. The most commonly used preprocessor directives (especially among beginners) are #include and #define. #include is simple to use; you just need to remember quotes for local files and less/greater than symbols for system files. #define is handy for code maintenance. If a value is fixed, it should be defined as a macro so that if it needs to be changed, it only needs to be changed in one location. Lastly, if you create your own header file, it is imperative that you use a header guard of the form: #ifndef NAME_H&lt;em&gt;, #define NAME_H&lt;/em&gt;, … #endif.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Pointers and Arrays</title>
   <link href="http://stratifylabs.co/embedded%20c%20tutorial/2013/12/07/Embedded-C-Tutorial-Pointers-and-Arrays"/>
   <updated>2013-12-07T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/embedded%20c%20tutorial/2013/12/07/Embedded-C-Tutorial-Pointers-and-Arrays</id>
   <content type="html">&lt;p&gt;Pointers and arrays are powerful tools in C programming. While arrays are a straightforward concept, pointers are more difficult for new programmers to grasNonetheless, they are worth learning as they are an essential part of the C language.&lt;/p&gt;

&lt;p&gt;Conceptually arrays are lists of data, but more specifically they are an abstration of pointers. The namesake of pointers offer a clue as to what they are. Rather than be variables with a meaningful value, they “point” to variables that have a meaningful value. The value of a pointer is actually the memory address of the pointed to variable.&lt;/p&gt;

&lt;h2 id=&quot;arrays&quot;&gt;Arrays&lt;/h2&gt;

&lt;p&gt;An array in C is declared using brackets after the variable. In the declaration, the number inside the brackets represents how many elements are in the array. When assigning or reading values in the array, brackets are used again, but in this case, the number inside the brackets refers to which element (from zero to the total number of elements minus one) to assign or read. The example below helps to clarify how to use arrays.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
int main(int argc, char * argv[]){
     int xlist[5];  //declares an array of ten integers
     int i;
 
     for(i=0; i &amp;lt; 5; i++){
          xlist[i] = i*2; //assign i to the xlist
     }
     for(i=0; i  5; i++){
          printf(&amp;quot;xlist[%d] = %d\n&amp;quot;, i, xlist[i]);
     }
     exit(0);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above program has the following output:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;xlist[0] = 0
xlist[1] = 2
xlist[2] = 4
xlist[3] = 6
xlist[4] = 8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The example above demonstrates a one-dimensional array. In C, arrays can also be declared as multi-dimensional. Multi-dimensional arrays are stored in memory in row-major order. This means, the first row in memory is first, followed by the second row, and so on. This is contrasted to column-major order which stores the first column in memory first. The following program shows multi-dimensional array usage.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
int main(int argc, char * argv[]){
    int i, j;
    int a[2][5] = { {1, 2, 3, 4, 5}, {6, 7, 8, 9, 10} };
    int * ptr;
    ptr = (int*)a;
    for(i=0; i  2; i++ ){
        for(j=0; j &amp;lt; 5; j++){
            printf(&amp;quot;a[%d][%d] = %d\n&amp;quot;, i, j, a[i][j]);
        }
    }
    for(i=0; i &amp;lt; 10; i++){
        printf(&amp;quot;0xX=%d\n&amp;quot;, ptr, *ptr);
        ptr++;
    }
    exit(0);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above program has the following output.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;a[0][0] = 1
a[0][1] = 2
a[0][2] = 3
a[0][3] = 4
a[0][4] = 5
a[1][0] = 6
a[1][1] = 7
a[1][2] = 8
a[1][3] = 9
a[1][4] = 10
0x10002F90=1
0x10002F94=2
0x10002F98=3
0x10002F9C=4
0x10002FA0=5
0x10002FA4=6
0x10002FA8=7
0x10002FAC=8
0x10002FB0=9
0x10002FB4=10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that when the 2x5 array is declared, it is a[rows][columns].&lt;br /&gt;
We use a pointer (explained below) to show where in memory each element 
is stored.  The first row is stored in the first 20 bytes (four bytes per integer), 
and the second row occupies the next 20 bytes which is defined as row-major order.&lt;/p&gt;

&lt;h3 id=&quot;pointers&quot;&gt;Pointers&lt;/h3&gt;

&lt;p&gt;The value of a pointer is the memory address of the pointed-to variable. 
A pointer type is declared by inserting an asterisk between the type 
and the variable declaration.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;int x; //x is an integer type
int * ptr; //ptr is a pointer to an integer type&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When using pointers, the asterisk is prepended to the pointer to operate 
on the pointed-to variable. This is referred to as “de-referencing” 
in pointer jargon. In order to assign a pointer to an existing non-pointer 
variable, the ampersand (&amp;amp;) is placed in front of the to-be-pointed-to variable. 
Ampersand in this context is read “address of”. It is known as the “referencing” 
operator. The program below shows examples of these operators.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
int main(int argc, char * argv[]){
     int x; //x is an integer
     int * ptr; //ptr is a ptr to an integer
     ptr = &amp;amp;x; //ptr is assigned the &amp;quot;address of&amp;quot; x (ptr now &amp;quot;points&amp;quot; to x)
     x = 0; //assign 0 to x
     *ptr = 500; //This assigns 500 to the value that ptr points to (x in this case)
     printf(&amp;quot;x = %d, *ptr = %d\n&amp;quot;, x, *ptr);
     printf(&amp;quot;The address of x is 0x%X which is the same as ptr (0x%X)\n&amp;quot;,
          &amp;amp;x,
          ptr);
     exit(0);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output of the above program is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;x = 500, *ptr = 500&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The address of x is 0x10002FBC which is the same as ptr (0x10002FBC)
In the program output, you will notice the actual value of the pointer makes no sense. This is because the value of the pointer is just a memory address that is managed by the OS and compiler. When the pointer is de-referenced, the value matches that of x.&lt;/p&gt;

&lt;h3 id=&quot;pointers-and-arrays&quot;&gt;Pointers and Arrays&lt;/h3&gt;

&lt;p&gt;As discussed before, arrays are lists of data. On an elemental level an array is actually a pointer with memory allocated when it is declared. The following example illustrates how an array is a pointer and can be used in the same way.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
int main(int argc, char * argv[]){
     int i;
     int xlist[5] = {0, 5, 3, 7, 8};
     int * xptr; //pointer to an integer
     xptr = xlist; //xptr points to the beginning of the list
     for(i=0; i  5; i++){
          //xptr and xlist hold the same value
          printf(&amp;quot;xlist[%d] = %d and %d\n&amp;quot;, i, xptr[i], xlist[i]);
     }
     //as xptr is incremented it goes through the values in xlist
     for(i=0; i &amp;lt; 5; i++){
          printf(&amp;quot;*xptr = %d (value of xptr:0x%X)\n&amp;quot;, *xptr, (int)xptr);
          xptr++;
     }
     exit(0);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The program above has the following output.&lt;/p&gt;

&lt;pre&gt;
xlist[0] = 0 and 0
xlist[1] = 5 and 5
xlist[2] = 3 and 3
xlist[3] = 7 and 7
xlist[4] = 8 and 8
*xptr = 0 (value of xptr:0x10002FA8)
*xptr = 5 (value of xptr:0x10002FAC)
*xptr = 3 (value of xptr:0x10002FB0)
*xptr = 7 (value of xptr:0x10002FB4)
*xptr = 8 (value of xptr:0x10002FB8)
&lt;/pre&gt;

&lt;p&gt;There are a few important concepts to get from this program. The value of an array variable is actually the memory location of the first element. The bracket ([]) operators dereference from the beginning of the array based on the value in the brackets and the size of the element type, such as four for an int on a 32-bit processor. Likewise when a pointer is incremented, it increments by the size of the pointed-to-variable. Since xptr above points to type int, it is incremented by four bytes each time it is incremented. To make this point extra clear, assume xptr points to an int and sizeof(int) is equal to four, the statement xptr = xptr + 1 will increase the value of xptr by four which is the size of one int.&lt;/p&gt;

&lt;h3 id=&quot;pointers-and-strings&quot;&gt;Pointers and Strings&lt;/h3&gt;

&lt;p&gt;Strings are one of the most common usages of pointers (espcially for beginning programmers) in C. Strings can either be declared as an array of characters or a pointer to a character type. You can read or modify strings using either the pointer or array notation. A C string is always terminated with zero. This means an array of 16 bytes can hold a string that is 15 bytes long followed by a zero.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
int main(int argc, char * argv[]){
     char my_string[16]; //string of up to 15 bytes
     my_string[0] = &amp;#39;H&amp;#39;;
     my_string[1] = &amp;#39;e&amp;#39;;
     my_string[2] = &amp;#39;l&amp;#39;;
     my_string[3] = &amp;#39;l&amp;#39;;
     my_string[4] = &amp;#39;o&amp;#39;;
     my_string[5] = &amp;#39;W&amp;#39;;
     my_string[6] = &amp;#39;o&amp;#39;;
     my_string[7] = &amp;#39;r&amp;#39;;
     my_string[8] = &amp;#39;l&amp;#39;;
     my_string[9] = &amp;#39;d&amp;#39;;
     my_string[10] = 0; //the terminating zero
     printf(&amp;quot;My strings is:%s\n&amp;quot;, my_string);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the program above, an array of char’s is declared. Any array of char’s that ends with a zero is a valid string in C. We also introduce the %s escape sequence, which is used to insert a string when using printf(). Additionally, the C standard library contains a string module with many commonly used string manipulation functions.&lt;/p&gt;

&lt;h2 id=&quot;pointers-and-structs&quot;&gt;Pointers and Struct’s&lt;/h2&gt;

&lt;p&gt;Pointers are also commonly used when a function has too many parameters to be practical. The parameters are defined in a struct then a pointer to the struct is passed to the function. This approach has the advantage of not using an excessive number of arguments, and it allows the function to read and write the data. The following program illustrates this concept.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
struct xyzabc {
     int a;
     int b;
     int c;
     int x;
     int y;
     int z;
}
int many_parameters(int x, int y, int z, int a, int b, int c);
void few_parameters(struct xyzabc * params);
int main(int argc, char * argv[]){
     struct xyzabc var1;
     int result;
 
     result = many_parameters(1, 2, 3, 7, 8, 9);
     var1.a = 7;
     var1.b = 8;
     var1.c = 9;
     var1.x = 1;
     var1.y = 2;
     var1.z = 3;
     few_parameters(&amp;amp;var1);
     result = var1.c;
 
     return 0;
}
int many_parameters(int x, int y, int z, int a, int b){
     return a*b + x*y*z;
}
void few_parameters(struct xyzabc * params){
     params-&amp;gt;c = params-&amp;gt;a*params-&amp;gt;b + params-&amp;gt;x*params-&amp;gt;y*params-&amp;gt;z;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;take-away&quot;&gt;Take Away&lt;/h3&gt;

&lt;p&gt;Arrays and pointers are powerful tools in C. Arrays store lists or matrices of data while pointers access the memory of a variable rather than the variable itself. Though pointers can be difficult to master; it is very important that new programmers take the time to learn them for two reasons. First, they are used a lot in the standard C library and through many available libraries. Second, they can cause problems (crashing) if used incorrectly.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Flow Control</title>
   <link href="http://stratifylabs.co/embedded%20c%20tutorial/2013/12/05/Embedded-C-Tutorial-Flow-Control"/>
   <updated>2013-12-05T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/embedded%20c%20tutorial/2013/12/05/Embedded-C-Tutorial-Flow-Control</id>
   <content type="html">&lt;p&gt;The typical C program executes one statement after the next. Various mechanisms exist to vary the flow of the program in order to conditionally execute some statements while executing others over and over within a looThe C flow control keywords include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if, else&lt;/li&gt;
  &lt;li&gt;switch, case&lt;/li&gt;
  &lt;li&gt;default&lt;/li&gt;
  &lt;li&gt;goto, label&lt;/li&gt;
  &lt;li&gt;do, while, or for&lt;/li&gt;
  &lt;li&gt;break, continue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first three groups are associated with conditional execution while the last group is used to execute the same group of statements within a loop.&lt;/p&gt;

&lt;h2 id=&quot;if-else&quot;&gt;If, Else&lt;/h2&gt;

&lt;p&gt;The if and else keywords allow you to conditionally execute a group of statements based on certain conditions. The syntax includes the if keyword followed by an expression in parentheses and a statement to execute. If the statement includes multiple statements, curly brackets are used. Here is an example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;if ( x == 5 ) {
     printf(&amp;quot;x is equal to 5\n&amp;quot;);
}
//OR
if ( x == 5 ){
     printf(&amp;quot;x is equal to 5\n&amp;quot;);
} else {
     printf(&amp;quot;x is NOT equal to 5\n&amp;quot;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first if clause will print “x is equal to 5” if the variable x is equal to five. Otherwise, it will not output anything. The second if clause appends a statement to execute if x is not equal to five. The else portion of an if clause is always optional. If you are only executing one statement within an if clause, the curly brackets ({}) are also optional. Though, many programmers always include them to make the code more readable and to avoid ambiguous situations. Here are a few more examples.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;if(x&amp;gt;5) printf(&amp;quot;x is greater than 5\n&amp;quot;);
//there is a pitfall to omitting {}, it can create ambiguity with compound if statements
if(x&amp;gt;5)
     if(x10)
          printf(&amp;quot;x is greater than 5 and x less than 10\n&amp;quot;);
     else
          printf(&amp;quot;x is not less than 10 but it might be greater than 5\n);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the snippet above, it is not clear whether the else statement is attached to the first or second if statement. Using the curly brackets fixes the ambiguity.&lt;/p&gt;

&lt;p&gt;The above examples are simple, but if statements can be rather complex. Any combination of symbols and operators can be used.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;if ( (x + 5) / (y + 10) &amp;amp;amp;&amp;amp;amp; ((x  100) ){
     //statement
}
//sometimes logical and/or are separated on a newline for clarity
if( (x &amp;gt; 5) &amp;amp;amp;&amp;amp;amp;
     (x &amp;lt; 10) &amp;amp;amp;&amp;amp;amp;
     ((y  200)) ){
     //statement
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;switch-case&quot;&gt;Switch, Case&lt;/h2&gt;

&lt;p&gt;The switch/case flow control structure is designed to allow the user to execute a statement based on the value of an integer type variable. It is a shorthand version of a series of if, else statements which might look something like the following example.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;if( x == 0 ){
     //case 0
} else if ( x == 1 ){
     //case 1
} else if ( x == 2 ){
     //case 2
} else if ( x == 10 ){ 
     //case 10
} else {
     //default
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The equivalent code using switch and case is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;switch(x){
case 0:
     //statement
     break;
case 1:
     //statement
     break;
case 2:
     //statement
     break;
case 10:
     //statement
     break;
default:
     //statement
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The break keyword is used to exit the switch context. Many times it is present at the end of each case. However, break can be omitted if the same statement is to be executed for multiple cases.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;switch(x){
case 0:
     //statement for 0
case 1:
     //statement for 0 and 1
     break;
case 2:
case 3:
case 4:
case 5:
     //statement for 2, 3, 4, and 5
     break;
case 10:
     //statement
     break;
default:
     //statement
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;goto-label&quot;&gt;Goto, Label&lt;/h2&gt;

&lt;p&gt;The goto keyword is used to jump to another location in a program. The concept of the goto keyword has its root in assembly language which uses branches and jumps to move around the order of execution.  However, the use of goto in C is somewhat taboo because it makes a program difficult to maintain and understand.  Nonetheless, here is an example of using it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;amp;amp;gt.h
#include &amp;lt;stdlib.h&amp;gt;
int main(int argc, char * argv[]){
     printf(&amp;quot;start here\n&amp;quot;);
     goto the_end;
     printf(&amp;quot;skip over this part\n&amp;quot;);
 
     the_end: //this is the label, it is following by a colon like case labels
     printf(&amp;quot;the end\n&amp;quot;);
     exit(0);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;for-loop&quot;&gt;For Loop&lt;/h2&gt;

&lt;p&gt;While if/else and switch/case allow conditional execution of codes, loops allows the same code to be executed many times. C has two types of loops: for loops and while loops. The for loop includes an initial statement, a test statement, and an increment statement. The following is an example of using a for loop in a program.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;amp;amp;gt.h
#include &amp;lt;stdlib.h&amp;gt;
int main(int argc, char * argv[]){
     int i;
     for(i=0; i &amp;lt; 5; i++){ //intial; test; incremental
          printf(&amp;quot;i is %d\n&amp;quot;, i);
     }
     exit(0);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The initial statement is execute before the loop is entered. The increment statement executes when the loop completes. The condition statement executes before the loop restarts. If the condition statement is a non-zero value, the loop continues executing. The following example should clear up any conclusion:&lt;/p&gt;

&lt;p&gt;The output of the above program is shown below&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;i is 0
i is 1
i is 2
i is 3
i is 4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The loop in the above example executes five times. Once i is equal to five, the condition statement evaluates to zero, and the loop terminates.&lt;/p&gt;

&lt;h2 id=&quot;while-loops&quot;&gt;While Loops&lt;/h2&gt;

&lt;p&gt;While loops execute as long as a condition is true. They can take on two formats known as the while loop and the do/while looEach loop type is shown in the following program.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;amp;amp;gt.h
#include &amp;lt;stdlib.h&amp;gt;
int main(int argc, char * argv[]){
     int i;
     printf(&amp;quot;while loop:\n&amp;quot;);
     i = 0;
     while(i  5 ){
          printf(&amp;quot;i is %d\n&amp;quot;);
          i++;
     }
     printf(&amp;quot;do/while loop\n&amp;quot;);
     i = 0;
     do {
          printf(&amp;quot;i is %d\n&amp;quot;);
          i+;
     } while( i &amp;lt; 5 );
     exit(0);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The main difference between while and do/while is that the do/while loop will always execute at least once because the condition statement is not checked until the body statements have already been executed. Conversely, the while loop executes the condition statement before the body statements and can execute zero times if the condition statement is initially false.&lt;/p&gt;

&lt;p&gt;Here is the output of the above program.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;while loop:
i is 0
i is 1
i is 2
i is 3
i is 4
do/while loop
i is 0
i is 1
i is 2
i is 3
i is 4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the output of the while and do/while loops is identical to the output of the for loop in the previous example.&lt;/p&gt;

&lt;h2 id=&quot;take-away&quot;&gt;Take Away&lt;/h2&gt;

&lt;p&gt;Flow control in C programs is broken down to conditions and loops. C’s if/else clauses and switch/case clauses are the main tools for conditionally executing statements in C. Two mechanisms are available for loops: the for loop and the while loop.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Operators</title>
   <link href="http://stratifylabs.co/embedded%20c%20tutorial/2013/12/04/Embedded-C-Tutorial-Operators"/>
   <updated>2013-12-04T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/embedded%20c%20tutorial/2013/12/04/Embedded-C-Tutorial-Operators</id>
   <content type="html">&lt;p&gt;Now that we have a basic understanding of the raw data types, let’s look at the operators. You are likely already familiar with many of the C operators (unless you are still in kindergarten). The most basic are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;* multiply&lt;/li&gt;
  &lt;li&gt;/ divide&lt;/li&gt;
  &lt;li&gt;% remainder&lt;/li&gt;
  &lt;li&gt;+ add&lt;/li&gt;
  &lt;li&gt;- subtract&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;=&lt;/span&gt; assign value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are straightforward operators with three quirks: first, the order of operations is 
imperative; second, divide does not do any rounding; third, the operators may 
cause an overflow depending on the data type. The code below illustrates these 
operators and their quirks as well as introduces formatted number printing using printf().&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
int main(int argc, char * argv[]){
     uint8_t x, y, z;
     x = 5; //assign 5 to x
     y = 10;
     z = x*y + 10;
     //here printf is used to display z as a decimal (base 10 value)
     printf(&amp;quot;1.  5*10+10 is %d\n&amp;quot;, z); //the value of z replaces %d in the string
     z = x + y * 10;
     printf(&amp;quot;2.  5+10*10 is %d\n&amp;quot;, z);
     z = x / y;
     printf(&amp;quot;3.  5/10 is %d\n&amp;quot;, z);
     z = x - 6;
     printf(&amp;quot;4.  5-6 is %d\n&amp;quot;, z);
     z = 13 % 2;
     printf(&amp;quot;5.  13 % 2 is %d\n&amp;quot;, z);
     exit(0);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output of the above program is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;1.  5*10+10 is 60
2.  5+10*10 is 105
3.  5/10 is 0
4.  5-6 is 255
5.  13 % 2 is 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The program output illustrates how these operators work.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The order of operations is first to multiply then to add: (5 * 10) + 10 is 60&lt;/li&gt;
  &lt;li&gt;The order of operations again is to first multiply then add: 5+(10 * 10) is 105&lt;/li&gt;
  &lt;li&gt;Because 5 divided by 10 is 0 with a remainder of 5 the value assigned to z is 0. No rounding is performed.&lt;/li&gt;
  &lt;li&gt;Because z is an unsigned 8-bit number (0 to 255), assigning five minus six to it causes the number to overflow to 255 (see the diagram below).&lt;/li&gt;
  &lt;li&gt;z is assigned the remainder of 13 divided by two. This operation is very handy for identifying even and odd numbers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lines one and two both illustrate the order of operations. The operations are 
generally executed from left to right with multiply and divide always happening 
before add and subtract. The assign operator (&lt;span&gt;=&lt;/span&gt;) has the lowest precedence 
and is executed last. Parentheses always override the default order of operations; 
for example, z=(x+y) times 10 will first add x and y then multiply the result 
by 10 and assign the value to z.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/overflow-diagram.svg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;binary-operators&quot;&gt;Binary Operators&lt;/h2&gt;

&lt;p&gt;In addition to the easily recognizable operators, C has addition operators that are mostly based on binary number representation. In order to understand these operations, a cursory knowledge of binary numbers is required.&lt;/p&gt;

&lt;p&gt;A binary number uses just two symbols (0 and 1) to represent a value. This is why it is known as a base-2 numbering system. The classical number system most people are familiar with uses ten symbols (0 to 9) known as base-10 or decimal numbering. To understand binary, we need to take a closer look at the decimal system.&lt;/p&gt;

&lt;p&gt;When we count in the decimal system, we go through each of the ten symbols 
(usually skipping zero). When we hit the last symbol (the number 9), 
we go back to zero and add another column. Each symbol in the new column 
represents a number ten times greater than the last column. The counting below illustrates this:&lt;/p&gt;

&lt;p&gt;0, 1, 2 … 9, 10 (add a column and restart the symbols), … 98, 99, 100 (add a column and restart), 998, 999, 1000 (add a column and restart)
If we recall learning to count, we learned the first column is known as the one’s column, then the ten’s column, etc. If we apply this logic to binary, where there are only two symbols, we count like this:&lt;/p&gt;

&lt;p&gt;0, 1, 10 (add a column and restart), 11, 100 (add a column and start over), 101, 110, 111, 1000 (add a column and restart)
Instead of the one’s, ten’s and hundred’s column, each new column is just two times greater yieding the one’s, two’s, four’s, eight’s, and sixteen’s column. The table below shows binary numbers from 0 to 15.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image_tall&quot; src=&quot;/images/binary-count.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When looking at binary numbers, you can convert to decimal by adding the value of the column for the columns with a one. Take 12 for example. It is written 1100 in binary. The column values are 8-4-2-1. There are ones in the 8 column and the 4 column and 8+4 is equal to 12. For the binary number 7 (111), we add 4+2+1 to get 7.&lt;/p&gt;

&lt;p&gt;Armed with an understanding of binary numbers, the binary operators in C should come easily. The operators include “shift”, “and”, “or”, “xor”, and “not”. A shift comes in left and right varieties while the others can be either bit-wise or logical. The following code illustrates shifting.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
int main(int argc, char * argv[]){
    uint8_t x, y, z;
    x = 5; //this is a binary 00000101
    z = x &amp;gt;&amp;gt; 1; //this mean shift x right one bit and assign to z
    printf(&amp;quot;1.  5&amp;gt;&amp;gt;1 is %d\n&amp;quot;, z);
    y = 2; //binary 00000010
    z = y &amp;lt;&amp;lt; 3;  //shift y left 3 bits and assign to z
    printf(&amp;quot;2.  2&amp;lt;&amp;lt;3 is %d\n&amp;quot;, z);
    //shifting also has to deal with overflow
    x = 128;
    z = x &amp;lt;&amp;lt; 2; //shift x left 2 bits and assign to z
    printf(&amp;quot;3.  128&amp;lt;&amp;lt;2 is %d\n&amp;quot;, z);
    exit(0);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above program produces the following output.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;1. 5&amp;gt;&amp;gt;1 is 2 
2. 2&amp;lt;&amp;lt;3 is 16 
3. 128&amp;lt;&amp;lt;2 is 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looking at the output above:&lt;/p&gt;

&lt;p&gt;Five (0101) shifted to the right drops the one’s column to get binary 2 (010). Shifting one bit to the right is the same thing as dividing by 2. This is analogous to decimal numbers. If you shift a decimal number to the right 1, you are dividing by 10. Likewise, shifting right 2 bits divides by 4 and shifting right 3 bits divides by 8 and so on.
Two (010) becomes 16 (010000) when shifted to the left 3 bits. Since shift to the right is the same as dividing, shifting one bit to the left multiplies by 2; two bits multiplies by 4; three bits multiplies by 8; and so on. In this example, 2 shifted left 3 bits is equal to 2 times 8 or 16.
If a bit is shifted out of the data type, it is dropped. 128 (10000000) shifted left one becomes zero because the bit shifts out of the 8 bits because z is a uint8_t. If z were a uint16_t, the new value for z would be 256.&lt;/p&gt;

&lt;p&gt;The next operators are the bit-wise and logical “or”, “and”, “xor”, and “not”. 
The bit-wise “or” operator is represented by | (it is the one on the same key as ). 
If any of the inputs are one, the output is one. The bit-wise “and” operator is 
represented by the &amp;amp; symbol. For each bit, if both input are one, then the output 
is one. If any of the input is zero, the output is zero. For “xor”, represented by ^, 
the output is one if exactly one input is one. A truth table is typically used to 
document the output of binary bit-wise operators. The following is the truth table 
for &amp;amp; where x and y are inputs and z is the output.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/binary-truth.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The bit-wise “not” operator is denoted in C using the ~. It only has one argument. The output changes all the zeros to ones and vice-versa.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;p The logical versions of “and”, “or”, and “not” assume the inputs are either zero or non-zero and output one or zero accordingly. The symbols are &amp;amp;&amp;amp;,&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;(two, consecutive vertical lines), and ! respectively. The code example below illustratres how to use these operators.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
int main(int argc, char * argv[]){
    uint8_t x, y, z;
    x = 5;
    y = 7;
    z = x &amp;amp;amp; y;  //x and y are bit-wise and&amp;#39;ed then assigned to z
    printf(&amp;quot;1.  5&amp;amp;amp;7 is %d\n&amp;quot;, z);
    z = x | y; //x and y are bit-wise or&amp;#39;ed then assigned to z
    printf(&amp;quot;2.  5|7 is %d\n&amp;quot;, z);
    x = 0;
    y = 10;
    z = x &amp;amp;amp;&amp;amp;amp; y; //z is the logical and of x and y
    printf(&amp;quot;3.  0&amp;amp;amp;&amp;amp;amp;10 is %d\n&amp;quot;, z);
    x = 0;
    y = 10;
    z = x || y; //z is the logical and of x and y
    printf(&amp;quot;4.  0||10 is %d\n&amp;quot;, z);
    z = 1;
    printf(&amp;quot;5.  z is %d !z is %d\n&amp;quot;, z, !z);
    exit(0);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output of the above program is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;1.  5&amp;amp;7 is 5
2.  5|7 is 7
3.  0&amp;amp;&amp;amp;10 is 0
4.  0||10 is 1
5.  z is 1 !z is 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;This is a bitwise “and” of 0b00000101 (5) and 0b00000111 (7). Since bits 0 and 2 are one in both input values, they are both one in the output value of 0b00000101 (5).&lt;/li&gt;
  &lt;li&gt;For the bitwise “or” of 0b00000101 (5) as well as 0b00000111 (7), the output is 0b00000111 because these bits are set in either of the inputs.&lt;/li&gt;
  &lt;li&gt;For the logical “and” operation, the output is always zero or one. The inputs are considered non-zero or zero. A non-zero input acts as a one where a zero input acts as a zero. # # # Since x is zero, the output is zero.&lt;/li&gt;
  &lt;li&gt;The logical “or” treats the inputs in the same manner as the logical “and” but outputs a one because y is a non-zero input.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For logical “not”, the output is zero if the input is non-zero; the opposite is also 
true.&lt;/p&gt;

&lt;h2 id=&quot;comparison-operators&quot;&gt;Comparison Operators&lt;/h2&gt;

&lt;p&gt;We are going back to some basic operators with which you are already familiar. 
These operators (like logical “and”/”or”) only output a one or a zero. They are 
typically used in program flow control, which is covered later, rather than just 
doing math. Here are the operators:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;span&gt;==&lt;/span&gt; is one if the two arguments are equal; zero otherwise&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; is one if the left argument is greater than the right&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;&amp;gt;=&lt;/span&gt; is one if the left argument is greater than or equal to the right&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;&amp;lt;&lt;/span&gt; is one if the left argument is less than the right&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;&amp;lt;=&lt;/span&gt; is one if the left argument is less than or equal to the right&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;span class=&quot;label label-danger&quot;&gt;Note&lt;/span&gt; A single equal sign 
(=) is an assignment operator and a double equal sign (==) is a comparison operator.&lt;/div&gt;

&lt;p&gt;The following program demonstrates how these work.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
int main(int argc, char * argv[]){
     uint8_t w, x, y, z;
     w = 5; //assigns 5 to w
     x = 5; //assigns 5 to x
     y = 10; //assigns 10 to y
     z = x == y; //if x is equal to y, z is assigned one otherwise z is assigned zero
     printf(&amp;quot;1.  5==10 is %d\n&amp;quot;, z);
     z = w == x; //if x is equal to w, z is assigned one otherwise z is assigned zero
     printf(&amp;quot;2.  5==5 is %d\n&amp;quot;, z);
     z = x &amp;gt; y; //if x is greater than y, z is assigned one otherwise z is assigned zero
     printf(&amp;quot;3.  5&amp;gt;10 is %d\n&amp;quot;, z);
     z = x &amp;lt; y; //if x is less than y, z is assigned one otherwise z is assigned zero
     printf(&amp;quot;4.  5&amp;lt;10 is %d\n&amp;quot;, z);
     z = x &amp;lt;= w; //if x is less than/equal to w, z is assigned one otherwise z is assigned zero
     printf(&amp;quot;5.  5&amp;lt;=5 is %d\n&amp;quot;, z);
     z = w &amp;gt;= y; //if w is greater than/equal to y, z is assigned one otherwise z is assigned zero
     printf(&amp;quot;6.  5&amp;gt;=10 is %d\n&amp;quot;, z);
     exit(0);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output of the program is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;1.  5==10 is 0
2.  5==5 is 1
3.  5&amp;gt;10 is 0
4.  5&amp;lt;10 is 1
5.  5&amp;lt;=5 is 1
6.  5&amp;gt;=10 is 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These operators should be pretty straightforward. There is one thing to remember. 
It is bad practice to use == with a floating point value. It is better to bound 
the range using something like&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;((x &amp;gt; 2.0) &amp;amp;&amp;amp; (x &amp;lt; 4.0))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice how the logical 
“and” is used in conjuction with the other operators. Combining operators is 
really where these become powerful tools to programmers.&lt;/p&gt;

&lt;h2 id=&quot;combining-operators&quot;&gt;Combining Operators&lt;/h2&gt;

&lt;p&gt;When combining operators, the order of execution is critical for getting the 
desired result. The order of operations is mentioned briefly above in the 
*\/ and +- section and is equally important for the binary and comparison operators.&lt;/p&gt;

&lt;p&gt;When combining operators, things can get confusing when trying to deduce the order of operations. It is good programming practice to use copious amount of parentheses to make things clear both to you and to future maintainers of your code. The program below illustrates both good and bad use of parentheses when combining operators.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
int main(int argc, char * argv[]){
    int a;
    int b;
    int c;
    a = 5;
    b = 10;
    c = 15;
    //Here is a bad example because we rely soley on order of operations
    if ( a + b  10 &amp;amp;amp;&amp;amp;amp; b + c  100 ){
       printf(&amp;quot;The bad example is true\n&amp;quot;);
    }
    //Here is a better example that uses parentheses
    if( (a + b  10) &amp;amp;amp;&amp;amp;amp; (b + c  100) ){
       printf(&amp;quot;This is a better example\n&amp;quot;);
    }
    //This example furthe clarifies but may be onrous to program
    if ( ((a+b) &amp;lt; 10) &amp;amp;amp;&amp;amp;amp; ((b+c)  100) ){
        printf(&amp;quot;This example leaves no room for error\n&amp;quot;);
    }
    return 0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;shortcut-operators&quot;&gt;Shortcut Operators&lt;/h2&gt;

&lt;p&gt;The C language provides a number of shorthand ways to do some operations. One of the most common is ++ which increments a variable.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
int main(int argc; char * argv[]){
     int x;
     x = 0;
     printf(&amp;quot;x is %d\n&amp;quot;, x++);
     printf(&amp;quot;x is now %d\n&amp;quot;, ++x);
     exit(0);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code above demonstrates both post-increment and pre-increment short cuts. It outputs:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;x is 0&lt;/li&gt;
  &lt;li&gt;x is now 2&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The x++ statement increments x after its value is passed to the printf() function while ++x increments the variable before it is passed to printf().&lt;/p&gt;

&lt;p&gt;Here is the full list of shortcuts plus their equivalents:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;x++; //(post-increment) equivalent to x = x + 1
++x; //(pre-increment) equivalent to x = x + 1
//post/pre increment have different rules for the order of operations
x--; //equivalent to x = x - 1
--x; //equivalent to x = x - 1
x+=y; //equivalent to x = x + y
x-=y; //equivalent to x = x - y
x*=y; //equivalent to x = x * y
x/=y; //equivalent to x = x / y
x%=y; //equivalent to x = x % y
x|=y; //equivalent to x = x | y
x&amp;amp;=y; //equivalent to x = x &amp;amp; y
x^=y; //equivalent to x = x ^ y
x&amp;gt;&amp;gt;=y; //equivalent to x = x &amp;gt;&amp;gt; y
x&amp;lt;&amp;lt;=y; //equivalent to x = x &amp;lt;&amp;lt; y&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;take-away&quot;&gt;Take Away&lt;/h2&gt;

&lt;p&gt;The C language includes many mathematical operators for doing basic arithmetic, comparisons, 
and binary operations. The order of operations is critical in C for correctly evaluating 
expressions. Sometimes understanding this order can be difficult when skimming through code, 
but adding parentheses can help to make code easier to read and avoid unintended evaluation orders.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Raw Types</title>
   <link href="http://stratifylabs.co/embedded%20c%20tutorial/2013/12/03/Embedded-C-Tutorial-Raw-Types"/>
   <updated>2013-12-03T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/embedded%20c%20tutorial/2013/12/03/Embedded-C-Tutorial-Raw-Types</id>
   <content type="html">&lt;h2 id=&quot;using-data-in-programming&quot;&gt;Using Data in Programming&lt;/h2&gt;

&lt;p&gt;Programs are created to do something useful–in embedded systems, to make a device or gadget do something useful. As a means to an end, the program uses data and operations. For example, a motor’s position is represented as data in a program; the motor’s speed, also represented as data, can be calculated using various operations given the change in motor positions for a given period of time. This tutorial introduces C raw data types. The following code snippet illustrates how to use data in C and introduces the raw data type int.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdlib.h&amp;gt; //this declares exit()
#include &amp;lt;unistd.h&amp;gt; //this contains usleep()
#include &amp;quot;motor.h&amp;quot; //this is a fictitious header than contains get_motor_position()
int main(int argc, char * argv[]){
     /* This is where the data variables are declared--All 
     variables must be declared before use Since they are 
     declared inside main&amp;#39;s {}, they are local to the 
     main function */
     int motor_pos0, motor_pos1;  //commas can separate variables
     int motor_speed; //or just use a new statement
 
     motor_pos0 = get_motor_position();  //assign position to motor_pos0
     usleep(1000);	//wait for 1ms (1000 microseconds)
     motor_pos1 = get_motor_position();  //assign the updated motor position
     //now use the positions values and some operators to calculate the speed
     motor_speed = (motor_pos1 - motor_pos0) / 1000;
     exit(0); //exit the program
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;data-types&quot;&gt;Data Types&lt;/h2&gt;

&lt;p&gt;Raw data types are represented by C keywords.  Due to the nature of binary numbers, raw data types in C come in eight-bit chunks.  Eight-bit chunks are combined to make-up the various raw data types in C: char, short, int, and long.  The following is a list of the raw data types in C.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;8 bits wide
    &lt;ul&gt;
      &lt;li&gt;unsigned char 0 to 255&lt;/li&gt;
      &lt;li&gt;signed char -128 to 127&lt;/li&gt;
      &lt;li&gt;char either signed or unsigned depending on the implementation and the usage; typically used to represent characters in a string&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;(At least) 16 bits wide
    &lt;ul&gt;
      &lt;li&gt;unsigned short 0 to 65535&lt;/li&gt;
      &lt;li&gt;or unsigned short int&lt;/li&gt;
      &lt;li&gt;signed short -32768 to 32767&lt;/li&gt;
      &lt;li&gt;or short, short int, signed short int&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;(At least) 32 bits wide
    &lt;ul&gt;
      &lt;li&gt;unsigned long 0 to 4294967296 (just over 4 billion)&lt;/li&gt;
      &lt;li&gt;or unsigned long int&lt;/li&gt;
      &lt;li&gt;signed long -2147483648 to 2147483647 (about -2 billion to 2 billion)&lt;/li&gt;
      &lt;li&gt;or signed long int, long, long int&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;(At least) 64 bits wide
    &lt;ul&gt;
      &lt;li&gt;unsigned long long 0 to 1.8446744E+19 or 2^64 (appropriately named long, long number)&lt;/li&gt;
      &lt;li&gt;or unsigned long long int&lt;/li&gt;
      &lt;li&gt;signed long long -2^63 to (2^63)-1&lt;/li&gt;
      &lt;li&gt;or signed long long int, long long, long long int&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;At least 16-bits but highly architecture dependent
    &lt;ul&gt;
      &lt;li&gt;unsigned int 0 to architecture dependent value&lt;/li&gt;
      &lt;li&gt;int is architecture optimized so 32-bit architectures use 32-bit integers&lt;/li&gt;
      &lt;li&gt;Since int is at least 16-bits, 8-bit architectures are not optimized to use int&lt;/li&gt;
      &lt;li&gt;signed int or int -2^(architecture-1) to (2^(architecture-1)) - 1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Floating point types
    &lt;ul&gt;
      &lt;li&gt;float single precision, 32-bits (most common on embedded architectures)&lt;/li&gt;
      &lt;li&gt;double double precision, 64-bits&lt;/li&gt;
      &lt;li&gt;long double extending precision 80-bits&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above data types can introduce ambiguity when porting code from one architecture to the next. To help eliminate the ambiguity, the C99 standard introduced the stdint.h header. It defines the following types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;uint8_t, int8_t: unsigned, signed 8-bit integer&lt;/li&gt;
  &lt;li&gt;uint16_t, int16_t: unsigned, signed 16-bit integer&lt;/li&gt;
  &lt;li&gt;uint32_t, int32_t: unsigned, signed 32-bit integer&lt;/li&gt;
  &lt;li&gt;uint64_t, int64_t: unsigned, signed 64-bit integer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These types are not raw data types but type definitions (explained later) derived from the raw data types.&lt;/p&gt;

&lt;p&gt;The raw floating-point types must be taken in context. Most embedded processors do not natively support floating point math. This means the compiler must use software to support these types. On small, 8-bit architectures, floating point math takes up too much code space and execution time to be practical. For 32-bit systems, the code space is still substantial, but the execution time is reasonable for some applications. Even in this case, it is not wise (or even supported in some cases) to use double or long double types.&lt;/p&gt;

&lt;h2 id=&quot;take-away&quot;&gt;Take Away&lt;/h2&gt;

&lt;p&gt;Raw types in C come in integer and floating point types.  Integers are much more prevalent on embedded systems than floating point values. The int type is architecture optimized and possibly the most commonly used type. The C99 standard introduced a header that eliminates ambiguity on integer types using int8_t, int32_t, etc.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Functions</title>
   <link href="http://stratifylabs.co/embedded%20c%20tutorial/2013/12/02/Embedded-C-Tutorial-Functions"/>
   <updated>2013-12-02T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/embedded%20c%20tutorial/2013/12/02/Embedded-C-Tutorial-Functions</id>
   <content type="html">&lt;p&gt;A function is a collection of C statements that can be utilized many times throughout a program or packaged into a module and re-used throughout many programs. The anatomy of a C function includes the prototype, the return type, the parameters, the name, and the body. Here is an example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
int my_first_function(int x, int y); //this is the prototype
int main(int argc, char * argv[]){
     int w;
     int z;
     w = 5;
     z = my_first_function(w, 3);
     printf(&amp;quot;z is %d\n&amp;quot;, z);
     exit(0);
}
//this is the type (int), name, and parameters (x and y) of the function
int my_first_function(int x, int y){
     //Inside the curly brackets is the function body
     int sum;
     sum = x + y;
     x = 0;
     return sum; //tells the compiler to return the int x+y to the caller
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code above demonstrates my_first_function(). The prototype is always the return type, name, and parameters followed by a semi-colon. In most cases, the prototype is part of a header file so that the function can be used in many different source files. This is the case for printf() whose prototype is part of the stdio.h header file. The compiler gives a warning if a function is used, but a prototype is not found. It is important for the compiler to know function prototypes so that it can verify the number and types of the parameters passed to a function are compatible. It also checks that the return type is used correctly.&lt;/p&gt;

&lt;h2 id=&quot;name&quot;&gt;Name&lt;/h2&gt;

&lt;p&gt;The name of the function must be a valid C identifier. By convention, user-defined identifiers should not start with an underscore. It is good practice to use descriptive identifiers. Actually, my_first_function() is a poor name because it does not inform the programmer what the function does. A better name is add_xy() because the function returns the sum of the two parameters.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;span class=&quot;label label-danger&quot;&gt;Note&lt;/span&gt; Valid C identifiers must start with a letter or 
underscore and be composed of case-sensitive letters, numbers, and underscores as 
well as not be a &lt;a href=&quot;/embedded%20c%20tutorial/2013/12/10/Embedded-C-Tutorial-Keyword-Reference&quot;&gt;C keyword&lt;/a&gt;.&lt;/div&gt;

&lt;h2 id=&quot;parameters&quot;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;The naming rules for parameters are the same for functions in that they must be C identifiers. A function can have any number of parameters passed to it of any type. The example above has two parameters of type int. Within the body of a function, a parameter acts as a local variable. It can be both read and written. However, any changes to the parameters are lost when the function returns. In the example above, the variable w within main() is not affected by the x = 0 statement within my_first_function() because a copy of w is passed to the function rather than w itself.&lt;/p&gt;

&lt;h2 id=&quot;body&quot;&gt;Body&lt;/h2&gt;

&lt;p&gt;The body of a function includes any number of C statements (separted by semicolons) within curly brackets. The return keyword is used to exit the function. If the return type is void, using return is optional. Also, return does not have to come at the end of the function. A function may conditionally return before it reaches the end. Here are a few examples to illustrate using return.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;void print_output(int value){
     printf(&amp;quot;Output is %d\n&amp;quot;, value);
     //because the return type is void, return is optional here
}
int sum_abc(int a, int b, int c){
     if ( a &amp;lt; 0 ){
          return -1; //conditionally return early if a is less than 0
     }
     return a + b + c; //return the sum (as an int)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;take-away&quot;&gt;Take Away&lt;/h2&gt;

&lt;p&gt;A function is a primary building block in C. A function consists of a prototype, name, return type, parameters, and body. The function name as well as the parameters must be valid C identifiers consisting only of letters, numbers, and underscores. They cannot start with a number and should not start with an underscore. As a programmer, you will create, use, and re-use many, many functions.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello World</title>
   <link href="http://stratifylabs.co/embedded%20c%20tutorial/2013/12/01/Embedded-C-Tutorial-Hello-World"/>
   <updated>2013-12-01T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/embedded%20c%20tutorial/2013/12/01/Embedded-C-Tutorial-Hello-World</id>
   <content type="html">&lt;p&gt;Programming tutorials, as you will notice, always begin with the quintessential 
“Hello World” program which demonstrates: how to use compilers, the basic usage 
of the language, and how to use output–essential for seeing if your program is 
working correctly. The code below is the standard C Hello World program.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;//include is a compiler directive and .h refers to a header file
#include &amp;lt;stdio.h&amp;gt; //contains the prototype for printf
#include &amp;lt;stdlib.h&amp;gt; //contains the prototype for exit

//main is the symbol that the OS looks for to enter the program
int main(int argc, char * argv[]){  
     printf(&amp;quot;Hello World\n&amp;quot;); //printf is part of stdio
     exit(0);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;span class=&quot;label label-danger&quot;&gt;Note&lt;/span&gt; The program above also exposes preprocessor directives, 
raw data types, as well as pointers and arrays. These principles are discussed 
in later lessons. &lt;/div&gt;

&lt;p&gt;The program has the following output.&lt;/p&gt;

&lt;pre&gt;Hello World&lt;/pre&gt;

&lt;h3 id=&quot;compiling-hello-world&quot;&gt;Compiling Hello World&lt;/h3&gt;

&lt;p&gt;The compiler is a software program that converts C code into an executable program. 
Most embedded systems use cross-compilers meaning that the operating system used to 
compile the code is not the same as the operating system used to run the code. 
CoActionOS uses a cross-compiler on Mac OS X or Windows to create programs that run 
on embedded hardware (this tutorial has the details for doing that).&lt;/p&gt;

&lt;p&gt;Using the word compiler is a simplification of what is actually happening. 
“Compiling” is a multi-step process that starts with C files and produces executable 
files or libraries. The compiler converts the C code (text) to object code. 
The object code is then either converted to a library using an archiver program or 
an executable using a linker program.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/compiler-library-flow.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Process Flow for Creating Libraries&lt;/p&gt;

&lt;p&gt;A library is a collection of object code files that is purposed for many different executables. 
For example, a library may contain code that computes a generic cosine. 
The library can then be used in executables that use a cosine calculation in various applications.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/compiler-executable-flow.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Process Flow for Creating Embedded Binary Files&lt;/p&gt;

&lt;p&gt;Libraries and object files are linked together to create an executable image. 
For desktop systems, this is the end of the process. However, most embedded 
systems require the executable image be translated to either a binary or hex file 
so that it can be loaded in embedded RAM or flash memory.&lt;/p&gt;

&lt;p&gt;The compiler is typically a command-line based program, but most developers 
use an integrated development environment (IDE) to both edit the code as well 
as compile and run programs. Eclipse is one popular, free IDE that includes C/C++ 
development tools. Eclipse is great for use with CoActionOS.&lt;/p&gt;

&lt;h3 id=&quot;program-structure&quot;&gt;Program Structure&lt;/h3&gt;

&lt;p&gt;The Hello World program introduces the modular programming structure of the C 
language. Programs consist of functions and data which are either native to the 
program or part of another module packaged in a library. The Hello World program 
does not declare any data and has just a single function, main(), which uses 
printf() and exit() which are part of separate modules from the C Standard library. 
The OS that runs the program uses main() as the entry point which is standard for 
C programming. In the example above, main() is declared with two parameters argc 
and argv which is the norm for desktop operating systems. For some embedded systems, 
main() may be declared more simply (see below) because only one program is 
ever installed on the system and no parameters are passed to main().&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;//OS doesn&amp;#39;t pass any arguments to main(), int is returned
int main(void);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Before running main(), the OS runs startup code referred to as the C-runtime (CRT) 
code which initializes the program. The program then executes statements–separated 
by semi-colons–sequentially meaning printf() is first executed then exit() is executed.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/hello-flow.svg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;standard-output&quot;&gt;Standard Output&lt;/h2&gt;

&lt;p&gt;Hello World uses the printf() function from the stdio module. The stdio, or 
standard input/output, module includes functions and data useful for inputting 
data to the program (from the keyboard for example) and outputting data to the 
user (such as through a console or terminal program). Specifically, printf() writes
 a formatted string to the standard output. The OS determines what the standard output 
 is. On a desktop computer, it is a console or terminal program. On an embedded system, 
 printf() may output data to a UART serial port or over the USB–the default action 
 for CoActionOS.&lt;/p&gt;

&lt;h2 id=&quot;take-away&quot;&gt;Take Away&lt;/h2&gt;

&lt;p&gt;The important things to learn here are that C is a modular programming language 
consisting of functions and data; the OS entry point for a C program is the main() 
function; the basic function used for text output is printf() which is used extensively 
in C during development for debugging.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Motor Control Tutorial</title>
   <link href="http://stratifylabs.co/coactionos%20tutorials/2013/11/11/CoActionOS-Tutorial-Motor-Control"/>
   <updated>2013-11-11T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/coactionos%20tutorials/2013/11/11/CoActionOS-Tutorial-Motor-Control</id>
   <content type="html">&lt;p&gt;Motor control is simple using CoActionOS. In this example, a simple 
PID control loop takes the speed of the motor as an input and computes 
the PWM duty cycle (which sets the motor drive voltage) as the output.&lt;/p&gt;

&lt;p&gt;Here is the circuit diagram for this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/motor-demo-diagram.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;source-code&quot;&gt;Source Code&lt;/h2&gt;

&lt;p&gt;Here is the code. It uses eLib’s PID and EMA functions. After the program initializes, it reads 
the value of the ADC. It uses this value to calculate the speed set point. It measures 
the speed of the motor by taking the number of encoder counts and dividing by the elapsed time. 
These values are fed in to the PID algorithm which computes the PWM value to apply to the motor.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;applib/Pwm.hpp&amp;gt;
#include &amp;lt;applib/Tmr.hpp&amp;gt;
#include &amp;lt;applib/Adc.hpp&amp;gt;
#include &amp;lt;time.h&amp;gt;
#include &amp;lt;dsp.h&amp;gt;
#include &amp;lt;pid.h&amp;gt;
 
#define TMR_PORT 0 //Timer port used to capture encoder data
#define TMR_PINASSIGN 0
#define ADC_PORT 0 //ADC port for getting user input
#define ADC_INPUT_CHAN (7) //ADC channel for user input
#define PWM_PORT 1 //PWM port for Si9986
#define PWM_PINASSIGN 1 //Uses P2.x
#define PWM_CHAN_HIGH (PWM_CHANNEL3)
#define PWM_CHAN_LOW (PWM_CHANNEL4)
#define PWM_FREQ (1000000)  //PWM clock frequency
#define PWM_TOP 1000 //Top value for PWM clock
#define PWM_PERIOD (PWM_TOP*1000/PWM_FREQ) //Period in ms
 
//Set the output duty cycle
static void set_duty(int duty);
 
int main(int argc, char * argv[]){
  Tmr tmr(TMR_PORT);
  Adc adc(ADC_PORT);
  Pwm pwm(PWM_PORT);
  int i;
 
  //These are for sampling the ADC (user input)
  adc_sample_t samp;
  int32_t samp_avg;
  int32_t speed_avg;
  uint16_t alpha;
  uint32_t set_speed;
 
  //This is for measuring the motor speed
  uint32_t delta_ms; //elapsed time in milliseconds
  uint32_t last_ms;
  uint32_t now_ms;
  uint32_t ref_ms;
  struct timespec now;
  uint32_t current_pos; //current position
  uint32_t last_pos  = 0; //position from last measurement
  uint32_t delta_pos;
  uint32_t speed;
 
  //PID variables
  pid_i32_t pid;
  uint32_t duty;
 
  //Initialize the hardware
  adc.init(1&amp;lt;&amp;lt;ADC_INPUT_CHAN);
  tmr.init(0, TMR_CLKSRC_IC0 | TMR_CLKSRC_EDGERISING, TMR_PINASSIGN);
  pwm.init((1&amp;lt;&amp;lt;PWM_CHAN_HIGH)|(1&amp;lt;&amp;lt;PWM_CHAN_LOW), PWM_FREQ, PWM_TOP, 0, PWM_PINASSIGN);
 
  //Turn the motor encoder timer on and set to zero
  tmr.on();
  tmr.set(0);
 
  //Initialize the ADC averaging (EMA filter)
  alpha = DSP_EMA_I32_ALPHA(0.1);
  adc.read(ADC_INPUT_CHAN, &amp;amp;samp, sizeof(adc_sample_t));
  samp_avg = samp;
  speed_avg = 0;
 
  //Since there is no initial measurement, the first speed will be bogus
  last_ms = 0;
 
  //initialize the PID
  pid_init_i32(&amp;amp;pid, 50, 990); //Bound the duty between 10% and 99%
  pid_setconstants_i32(&amp;amp;pid,
      PID_I32_CONSTANT(5.0), //P constant
      PID_I32_CONSTANT(0.2), //I constant
      PID_I32_CONSTANT(0.0)  //D constant
  );
 
  usleep(50*1000);
  set_duty(0);
 
  //Get the initial time so that the program start time is close to zero in the output data
  clock_gettime(CLOCK_REALTIME, &amp;amp;now);
  ref_ms = (now.tv_sec * 1000 + (now.tv_nsec + 500000) / 1000000); //convert to milliseconds
 
  i = 0;
  while(1){
    //Read and averge the ADC to get the set point
    adc.read(ADC_INPUT_CHAN, &amp;amp;samp, sizeof(adc_sample_t));
    samp_avg = dsp_ema_i32(samp, samp_avg, alpha);
    set_speed = samp_avg * 130 / ADC_MAX + 50;  //speed sets between 50 and 180
 
    //Now measure the position and calculate the speed (pos/time)
    clock_gettime(CLOCK_REALTIME, &amp;amp;now);
    now_ms = (now.tv_sec * 1000 + (now.tv_nsec + 500000) / 1000000); //convert to milliseconds
    delta_ms = now_ms - last_ms;
    last_ms = now_ms;
 
 
    current_pos = tmr.get();
    delta_pos = current_pos - last_pos;
    //calculate in RPM (1000*60 ms in a min and 200 counts per revolution)
    speed = (delta_pos*(1000*60/465))/(delta_ms);
    last_pos = current_pos;
 
    //Calculate the new duty cycle
    duty = pid_update_i32(set_speed, speed, &amp;amp;pid);
    set_duty(duty);
 
    speed_avg = dsp_ema_i32(speed, speed_avg, alpha);
 
    //Display the data and wait for the next update
    if ( i++ &amp;gt; 0 ){ //first sample is garbage because the delta values are invalid
      printf(&amp;quot;%d %d %d %d;\n&amp;quot;, (int)(now_ms - ref_ms), (int)set_speed, (int)speed_avg, (int)duty);
    }
    usleep(5*1000); //update every 100 ms
  }
 
  return 0;
}
 
 
void set_duty(int duty){
  Pwm pwm(PWM_PORT);
  //This runs in run mode -- one output is switching the other is high
  pwm.set(PWM_CHAN_HIGH,  PWM_TOP - duty);
  pwm.set(PWM_CHAN_LOW, PWM_TOP);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot; class=&quot;flex-video&quot;&gt;
	&lt;iframe src=&quot;//www.youtube.com/embed/V6nnVzJFD_Q?rel=0&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;The data is plotted using MATLAB (or octave) using the following script.&lt;/p&gt;

&lt;pre&gt;
output = load(&quot;log.txt&quot;);
xmin = min( output(:,1) );
xmax = max( output(:,1) );
ymax = 200;
plot(output(:,1), output(:,2), output(:,1), output(:,3), output(:,1), output(:,4)/10 );
xlabel(&quot;Time (ms)&quot;);
ylabel(&quot;Speed&quot;);
axis([xmin xmax 0 ymax]);
legend(&quot;Set Point&quot;, &quot;Speed&quot;, &quot;Duty*100&quot;);
print(&quot;output.png&quot;, &quot;-dpng&quot;);
&lt;/pre&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/motor-demo-plot.png&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Thread Tutorial</title>
   <link href="http://stratifylabs.co/coactionos%20tutorials/2013/11/10/CoActionOS-Tutorial-Thread"/>
   <updated>2013-11-10T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/coactionos%20tutorials/2013/11/10/CoActionOS-Tutorial-Thread</id>
   <content type="html">&lt;p&gt;CoActionOS Applib includes a Thread class for easily initializing 
and running threads. For more details on using this class, please 
see the &lt;a href=&quot;/coactionos-applib/html/class_thread.html&quot;&gt;Thread Applib documentation&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;applib/Thread.hpp&amp;gt; //for Thread class
#include &amp;lt;applib/Timer.hpp&amp;gt;
#include &amp;lt;cstdio&amp;gt; //for printf
 
//function to execute with thread
static void * thread_func(void * args);
 
int main(int argc, char * argv[]){
  Thread t0; //construct the first thread class
  Thread t1; //construct the second thread class
  int t0_args = 0; //argument for t0
  int t1_args = 1; //argument for t1
 
  //create and run t0
  t0.create(thread_func, &amp;amp;t0_args);
 
  //create and run t1
  t1.create(thread_func, &amp;amp;t1_args);
 
  //wait for the threads to complete
  Timer::wait_sec(10);
 
  //all done
  printf(&amp;quot;done\n&amp;quot;);
  return 0;
}
 
void * thread_func(void * args){
  int * x = (int*)args;
  printf(&amp;quot;This thread was passed %d\n&amp;quot;, *x);
  Timer::wait_sec(8);
  printf(&amp;quot;Thread %d is completing\n&amp;quot;, *x);
  return x;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The threads can be analyzed while they are running by using the Monitor view 
in CoActionOS Link. The following screen shot shows the running tasks while 
all three threads are running (the project is called HelloCpp).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/thread-monitor-example.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above program has the following output.&lt;/p&gt;

&lt;pre&gt;This thread was passed 0
This thread was passed 1
Thread 0 is completing
Thread 1 is completing
done
&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Signals Tutorial</title>
   <link href="http://stratifylabs.co/coactionos%20tutorials/2013/11/10/CoActionOS-Tutorial-Signals"/>
   <updated>2013-11-10T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/coactionos%20tutorials/2013/11/10/CoActionOS-Tutorial-Signals</id>
   <content type="html">&lt;p&gt;CoActionOS allows uers signals to notify different threads or processes 
about events.  It uses POSIX signals as the underlying API.  CoActionOS 
Applib provides a class to easily send and receive signals.  When a thread 
or process receives a signal, its execution is interrupted and the signal 
handler is executed.  This is distinct from hardware interrupt handlers 
because the signal interrupt will not execute until the receiving task 
is scheduled to execute.  Also, hardware interrupts run in privileged 
mode where signal handlers run in user mode.&lt;/p&gt;

&lt;p&gt;The example below shows how to send a signal using software as well 
as how to enable hardware to send a signal when an event happens.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;applib/Timer.hpp&amp;gt;
#include &amp;lt;applib/Tmr.hpp&amp;gt;
#include &amp;lt;applib/Signal.hpp&amp;gt;

volatile bool done;

void sigusr(int a){
	done = true;
}

static void software_trigger_example(void);
static void hardware_trigger_example(void);

int main(int argc, char * argv[]){
	software_trigger_example();
	hardware_trigger_example();
	printf(&amp;quot;Both examples are complete\n&amp;quot;);
	return 0;
}


//this function sets up a handler and triggers it with software
void software_trigger_example(void){
	Signal::Handler handler(sigusr); //the function sigusr is called with this handler
	Signal::Event event(SIGUSR1);
	event.set_handler(&amp;amp;handler);
	done = false;
	event.trigger(getpid()); //send the signal to this process
	while( !done ){
		Timer::wait_usec(100);
	}
	printf(&amp;quot;SIGUSR1 has been handled\n&amp;quot;);
}

//this function sets up a handler and triggers it with hardware (such as a timer event)
void hardware_trigger_example(void){
	Tmr tmr(0); //use hardware tmr0 as the triggering mechanism
	tmr_action_t action;
	Signal::Handler handler(sigusr); //the function sigusr is called with this handler
	Signal::EventPhy event(true, SIGUSR1);

	tmr.init(1000); //tmr0 will run as a 1KHz timer

	tmr.set(0); //set timer to 0
	tmr.setoc(TMR_ACTION_CHANNEL_OC0, 1000); //set output compare 0 to 1000 (triggers after one second)

	action = event.action(Tmr::INTERRUPT, 0);
	tmr.setaction( &amp;amp;action );
	done = false;
	tmr.on();
	while( !done ){
		Timer::wait_usec(100);
	}

	printf(&amp;quot;SIGUSR1 has been handled (triggered by tmr0)\n&amp;quot;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>AIO Tutorial</title>
   <link href="http://stratifylabs.co/coactionos%20tutorials/2013/11/09/CoActionOS-Tutorial-AIO"/>
   <updated>2013-11-09T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/coactionos%20tutorials/2013/11/09/CoActionOS-Tutorial-AIO</id>
   <content type="html">&lt;p&gt;Asynchronous IO (AIO) is used when you want to start an operation and do 
other things while you wait until the operation completes. AIO is supported 
on all peripherals which support read() and write(). Simply pass an Aio 
object to read() or write(), and the operation will perform asynchronously.&lt;/p&gt;

&lt;p&gt;The following program demonstrates AIO using the DAC. See the 
&lt;a href=&quot;/coactionos-applib/html/class_aio.html&quot;&gt;AIO class documenation&lt;/a&gt; and 
&lt;a href=&quot;/coactionos-applib/html/class_dac.html&quot;&gt;DAC class documentation&lt;/a&gt; for more details.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;applib/DbugStdout.hpp&amp;gt; //For the DbugStdout class (or just use printf() is you prefer)
#include &amp;lt;applib/Dac.hpp&amp;gt; //For the DbugStdout class
#include &amp;lt;applib/Aio.hpp&amp;gt;
#include &amp;lt;cmath&amp;gt;
#include &amp;lt;cstdio&amp;gt; //for perror
 
#define NUM_SAMPLES 32
 
//This function generates a sin wave for use with the DAC
static void sin_to_dac(dac_sample_t * samples, int nsamples);
 
int main(int argc, char * argv[]){
  dac_sample_t samples[NUM_SAMPLES];
  Dac dac(0);
  DbugStdout d;
  int i;
  Aio aio(samples, NUM_SAMPLES*sizeof(dac_sample_t)); //this is the Aio object
 
  //Initialize the DAC
  if( dac.init(1&amp;lt;&amp;lt;0, 1000*NUM_SAMPLES) &amp;lt; 0 ){ //enable channel 0 with 1KHz sine wave
    perror(&amp;quot;failed to init&amp;quot;);
    return -1;
  }
 
  //populate the samples with a sine wave
  sin_to_dac(samples, NUM_SAMPLES);
 
  for(i=0; i &amp;lt; 100; i++){
 
    //this is a synchronous write -- does not return until write is complete
    dac.write(0, samples, NUM_SAMPLES*sizeof(dac_sample_t));
 
    //do an asynchronous write of the samples -- returns immediately
    dac.write(aio);
 
    //wait for the operation to complete
    while( aio.inprogress() == true ){
      usleep(2*1000);
    }
 
    //check for errors
    if( aio.ret() &amp;lt; 0 ){
      errno = aio.error();
      perror(&amp;quot;failed to complete write&amp;quot;);
      exit(1);
    }
 
  }
  d &amp;lt;&amp;lt; &amp;quot;Done\n&amp;quot;;
  return 0;
}
 
 
void sin_to_dac(dac_sample_t * samples, int nsamples){
  int i;
  DbugStdout d;
  dac_sample_t sample;
  float tmp;
  for(i=0; i &amp;lt; nsamples; i++){
    tmp = sin(i*2*M_PI/(nsamples)); //tmp is from -1 to 1
    samples[i] = (dac_sample_t)(tmp*DAC_MAX_VALUE/2 + DAC_MAX_VALUE/2);
    d &amp;lt;&amp;lt; samples[i] &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Strings Tutorial</title>
   <link href="http://stratifylabs.co/coactionos%20tutorials/2013/11/08/CoActionOS-Tutorial-Strings"/>
   <updated>2013-11-08T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/coactionos%20tutorials/2013/11/08/CoActionOS-Tutorial-Strings</id>
   <content type="html">&lt;p&gt;The CoActionOS Applib includes a 
&lt;a href=&quot;/coactionos-applib/html/class_string.html&quot;&gt;String class&lt;/a&gt; 
similar to the C++ STL string class.  The Applib String class avoids 
using dynamic memory allocation so that it can run well on systems 
with very little memory.  It is based on standard C 
string manipulation (such as strcpy(), strcmp()) but gives the ease 
of use of the STL string class.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;applib/String.hpp&amp;gt;

int main(int argc, char * argv[]){
	//String Types allows us to allocate various string sizes
	StringMedium mstring; //This is the same as String&amp;lt;64&amp;gt; mstring;
	StringLarge lstring; //This is the same as String&amp;lt;128&amp;gt; lstring;

	mstring = &amp;quot;Hello&amp;quot;; //assignment
	lstring &amp;lt;&amp;lt; &amp;quot;Hello&amp;quot;; //concatenation

	printf(&amp;quot;Medium using %d of %d bytes\n&amp;quot;, mstring.size(), mstring.capacity());
	printf(&amp;quot;Large using %d of %d bytes\n&amp;quot;, lstring.size(), lstring.capacity());


	//Strings can be compared C++ style (to const char*)
	if( mstring == &amp;quot;Hello&amp;quot; ){
		printf(&amp;quot;Hello\n&amp;quot;);
	}

	//Two strings can also be compared
	if( mstring == lstring ){
		printf(&amp;quot;They are the same\n&amp;quot;);
	}

	//We can allows write numbers to the string and concatenate strings
	mstring &amp;lt;&amp;lt; &amp;quot; Number #&amp;quot; &amp;lt;&amp;lt; 5 &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
	printf(&amp;quot;%s&amp;quot;, mstring.c_str()); //it is converted to a c string just like STL string

	//We can also concatenation strings
	mstring = &amp;quot;I am mstring\n&amp;quot;;
	lstring = &amp;quot;I am lstring\n&amp;quot;;
	mstring &amp;lt;&amp;lt; lstring;
	printf(&amp;quot;%s&amp;quot;, mstring.c_str());

	//copy the first five bytes of lstring to mstring
	//This is as close as we can get to implementing substr() with dynamic memory allocation
	lstring = &amp;quot;Hello mstring&amp;quot;;
	mstring.clear(); //since copy doesn&amp;#39;t add a 0 terminator - we clear mstirng now
	lstring.copy(mstring, 5, 0);

	printf(&amp;quot;Now mstring is %s\n&amp;quot;, mstring.c_str());
	return 0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That about covers the basics.  You can read the 
&lt;a href=&quot;/coactionos-applib/html/class_string.html&quot;&gt;String class API&lt;/a&gt; 
for more information.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>PWM Tutorial</title>
   <link href="http://stratifylabs.co/coactionos%20tutorials/2013/11/07/CoActionOS-Tutorial-Pwm"/>
   <updated>2013-11-07T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/coactionos%20tutorials/2013/11/07/CoActionOS-Tutorial-Pwm</id>
   <content type="html">&lt;p&gt;PWM is used to output a pulse signal. It can be used to dim an LED or 
apply a variable voltage to a motor.&lt;/p&gt;

&lt;p&gt;The basic steps to use the PWM are to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open the PWM port&lt;/li&gt;
  &lt;li&gt;Set the attributes (frequency, top, enabled channels)&lt;/li&gt;
  &lt;li&gt;Set the duty cycle&lt;/li&gt;
  &lt;li&gt;Optionally close the PWM (power it down)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following program demonstrates using a PWM output. For more details on 
using PWM, please see the &lt;a href=&quot;/coactionos-applib/html/class_pwm.html&quot;&gt;PWM Applib documentation&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;cstdio&amp;gt; //for printf
#include &amp;lt;applib/Pwm.hpp&amp;gt;//for PWM class
#include &amp;lt;applib/Timer.hpp&amp;gt;
 
int main(int argc, char * argv[]){
  Pwm pwm(1); //instantiate PMW Port 1
  uint8_t channel = PWM_CHANNEL3; //use channel 3
  int i;
 
  pwm.init(1&amp;lt;&amp;lt;channel,
      10000000, //10MHz frequency
      1000, //1000 top value
      0, //PWM Flags (not used on lpc17xx)
      __PWM1_PINASSIGN_PORT2_0_1_2_3_4_5 //pin assignment
  );  //initialize with channel 3 enabled
 
  printf(&amp;quot;Start Updating Duty Cycle\n&amp;quot;);
  for(i=0; i &amp;lt; 1000; i++){
    pwm.set(channel, i); //set channel 3 to duty cycle i / 1000
    Timer::wait_msec(5); //wait 5ms between updates
  }
 
  printf(&amp;quot;Duty Cycle Update Complete\n&amp;quot;);
  pwm.close();
  return 0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>I2C Tutorial</title>
   <link href="http://stratifylabs.co/coactionos%20tutorials/2013/11/06/CoActionOS-Tutorial-I2C"/>
   <updated>2013-11-06T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/coactionos%20tutorials/2013/11/06/CoActionOS-Tutorial-I2C</id>
   <content type="html">&lt;p&gt;I2C is a half duplex serial protocol. It uses two lines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SDA: Serial Data&lt;/li&gt;
  &lt;li&gt;SCL: Serial Clock&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many devices can be connected to the same bus. The master uses slave address to 
communicate with each device.  Most I2C devices use a pointer (or location) 
register to control where reads and writes are performed. CoActionOS uses a 
normal I2C transfer to handle these devices. The chronology of a normal I2C read is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I2C Start&lt;/li&gt;
  &lt;li&gt;Write I2C Address with write bit&lt;/li&gt;
  &lt;li&gt;Write the pointer or location register&lt;/li&gt;
  &lt;li&gt;I2C Restart&lt;/li&gt;
  &lt;li&gt;Write the I2C address with read bit&lt;/li&gt;
  &lt;li&gt;Read data from the I2C device&lt;/li&gt;
  &lt;li&gt;I2C Stop&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And a write is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I2C Start&lt;/li&gt;
  &lt;li&gt;Write I2C Address with write bit&lt;/li&gt;
  &lt;li&gt;Write the pointer or location register&lt;/li&gt;
  &lt;li&gt;Write data to the I2C device&lt;/li&gt;
  &lt;li&gt;I2C Stop&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The steps to use the I2C are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open the I2C port (power it on)&lt;/li&gt;
  &lt;li&gt;Set the attributes (bit rate, pin assignment)&lt;/li&gt;
  &lt;li&gt;Setup the I2C transfer (set the slave address and transfer type)&lt;/li&gt;
  &lt;li&gt;Read and Write data&lt;/li&gt;
  &lt;li&gt;Optionally Close the I2C port (power it down)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following program demonstrates using the &lt;a href=&quot;/coactionos-applib/html/class_i2c.html&quot;&gt;CoActionOS Applib I2C class&lt;/a&gt;. 
For more details on using the I2C, please see the 
&lt;a href=&quot;/coactionos-applib/html/class_i2c.html&quot;&gt;I2C Applib documentation&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;cstdio&amp;gt; //For printf and perror
#include &amp;lt;applib/I2c.hpp&amp;gt; //For the I2C class
 
int main(int argc, char * argv[]){
  char buffer[16];
  I2c i2c(0); //I2C port 0
 
  //initialize at 400KHz bitrate (open and set attributes)
  i2c.init(400000);
 
  //setup a normal transfer for slave address 0x4C
  i2c.setup(0x4C);
 
  i2c.read(0, //location in I2C device memory to start reading (e.g. register 0)
      buffer, //destination memory
      16); //number of bytes to read
 
  //close the port
  i2c.close();
 
  return 0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>SPI Tutorial</title>
   <link href="http://stratifylabs.co/coactionos%20tutorials/2013/11/05/CoActionOS-Tutorial-Spi"/>
   <updated>2013-11-05T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/coactionos%20tutorials/2013/11/05/CoActionOS-Tutorial-Spi</id>
   <content type="html">&lt;p&gt;SPI is a a full duplex serial protocol. It uses four lines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MISO: Master Input/Slave Output (driven by slave when CS is low)&lt;/li&gt;
  &lt;li&gt;MOSI: Master Output/Slave Input (driven by master)&lt;/li&gt;
  &lt;li&gt;SCK: Serial Clock (driven by master)&lt;/li&gt;
  &lt;li&gt;CS: Chip Select (driven by master)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The steps to use the SPI are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open the SPI port (power it on)&lt;/li&gt;
  &lt;li&gt;Set the attributes (bit rate, pin assignment, etc)&lt;/li&gt;
  &lt;li&gt;Configure the PIO pin used with the CS line&lt;/li&gt;
  &lt;li&gt;Optionally, set full-duplex mode&lt;/li&gt;
  &lt;li&gt;Clear the CS line&lt;/li&gt;
  &lt;li&gt;Read and Write data&lt;/li&gt;
  &lt;li&gt;Set the CS line&lt;/li&gt;
  &lt;li&gt;Optionally Close the SPI port (power it down)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following program demonstrates how to use the SPI in CoActinOS. 
For more details on using the SPI, please see the 
&lt;a href=&quot;/coactionos-applib/html/class_spi.html&quot;&gt;SPI Applib documentation&lt;/a&gt;.&lt;br /&gt;
The &lt;a href=&quot;/coactionos-applib/html/class_pin.html&quot;&gt;Pin class documentation&lt;/a&gt; 
may also be helpful.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;cstdio&amp;gt; //For printf and perror
#include &amp;lt;cstdlib&amp;gt; //for NULL
#include &amp;lt;cstring&amp;gt; //for memset
#include &amp;lt;applib/Spi.hpp&amp;gt; //For the SPI class
#include &amp;lt;applib/Pin.hpp&amp;gt; //For the PIN class
 
int main(int argc, char * argv[]){
  char buffer[16];
  char buffer_duplex[16];
  Spi spi(0); //use SPI port 0
  Pin cs(2,10); //use PIO port 2 for the CS
 
  //Initialize the CS line
  cs.init(PIO_MODE_OUTPUT);
  cs = true;  // or use cs.set() or cs.on()
 
  //Initialize at 2MHz bitrate
  spi.init(2000000);
 
  //For full duplex, set the buffer
  spi.setduplex(buffer_duplex); //read buffer when using write(), write buffer when using read()
 
  //Here is a SPI read
  cs = false;  // or use cs.clr() or cs.off() to drive the pin low
  memset(buffer_duplex, 0xFF, 16); //this is written when using read
  spi.read(buffer, 16); //read 16 bytes to buffer and write 16 bytes from buffer_duplex
  cs = true;
 
  //Here is a SPI write
  cs = false;
  memset(buffer, 0xFF, 16); //this is written when using read
  spi.write(buffer, 16); //write 16 bytes from buffer and read 16 bytes to buffer_duplex
  cs = true;
 
  //Put the SPI in half-duplex mode
  spi.setduplex(NULL);
  cs = false;
  spi.write(buffer, 16); //buffer is written, incoming data is discarded
  cs = true;
 
  //Close the peripherals
  spi.close();
  cs.close();
 
  return 0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>UART Tutorial</title>
   <link href="http://stratifylabs.co/coactionos%20tutorials/2013/11/04/CoActionOS-Tutorial-Uart"/>
   <updated>2013-11-04T00:00:00-07:00</updated>
   <id>http://stratifylabs.co/coactionos%20tutorials/2013/11/04/CoActionOS-Tutorial-Uart</id>
   <content type="html">&lt;p&gt;A UART is used to transmit data serially. CoActionOS Applib makes 
configuring and using a &lt;a href=&quot;/coactionos-applib/html/class_uart.html&quot;&gt;UART&lt;/a&gt; on 
CoActionOS both simple and flexible.&lt;/p&gt;

&lt;p&gt;The basic steps to use the UART are to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open the UART (power it on)&lt;/li&gt;
  &lt;li&gt;Set the attributes (baud rate, pins, etc)&lt;/li&gt;
  &lt;li&gt;Read and Write data&lt;/li&gt;
  &lt;li&gt;Optionally Close the UART (power it down)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following program demonstrates how to use the UART. The program assumes 
the TXD line is connected to the RXD line. For more details on using the UART, 
please see the &lt;a href=&quot;/coactionos-applib/html/class_uart.html&quot;&gt;UART Applib documentation&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;cstdio&amp;gt; //For printf
#include &amp;lt;cstdlib&amp;gt;
#include &amp;lt;cstring&amp;gt; //for strcpy and memset
#include &amp;lt;unistd.h&amp;gt; //for usleep
#include &amp;lt;applib/Uart.hpp&amp;gt; //For the UART class
#include &amp;lt;applib/Timer.hpp&amp;gt; //General purpose timer based on clock_gettime()
 
int main(int argc, char * argv[]){
  char buffer[16];
  Uart uart(0); //use UART port 0
 
  //Initialize at 115200 baud rate -- other settings use the default
  uart.init(115200);
 
  //Discard any stale data in the buffers
  uart.flush();
 
  //The UART is now ready to read and write
  printf(&amp;quot;Write:test\n&amp;quot;);
  uart.write(&amp;quot;test&amp;quot;, 4);
  Timer::wait_msec(10); //allow a little time for all bytes to be sent
  memset(buffer, 0, 16); //clear the buffer
  uart.read(buffer, 16); //blocks until at least one byte is received
  printf(&amp;quot;Read:%s\n&amp;quot;, buffer); //Show the data that was read
 
  return 0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Files Tutorial</title>
   <link href="http://stratifylabs.co/coactionos%20tutorials/2013/11/03/CoActionOS-Tutorial-Files"/>
   <updated>2013-11-03T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/coactionos%20tutorials/2013/11/03/CoActionOS-Tutorial-Files</id>
   <content type="html">&lt;p&gt;Files can be accessed in several ways in CoActionOS:
* standard C library (fopen(), fread(), etc)
* POSIX API (open(), read(), etc)
* &lt;a href=&quot;/coactionos-applib/html/class_file.html&quot;&gt;Applib File Class&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The program below demonstrates how to use the &lt;a href=&quot;/coactionos-applib/html/class_file.html&quot;&gt;Applib File Class&lt;/a&gt;.  It uses POSIX calls to access files but is easier to code than using POSIX.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;cstdio&amp;gt; //For printf and perror
#include &amp;lt;cstdlib&amp;gt; //for exit()
#include &amp;lt;cstring&amp;gt; //for strcpy and memset
#include &amp;lt;applib/File.hpp&amp;gt; //For the File class
 
int main(int argc, char * argv[]){
  char tmp[64];
  File f; //Declare f as a File class
 
  printf(&amp;quot;Create a new file\n&amp;quot;);
 
  //Create a new file
  if( f.create(&amp;quot;/home/myfile.txt&amp;quot;) &amp;lt; 0 ){
    perror(&amp;quot;failed to create file&amp;quot;);
    exit(1);
  }
 
  //Construct a string in a temporary variable
  strcpy(tmp, &amp;quot;This is a string to write to the file\n&amp;quot;);
 
  //Write data to the file
  if( f.write(tmp, strlen(tmp)) &amp;lt; 0 ){
    perror(&amp;quot;failed to write&amp;quot;);
  }
 
  //Close the file
  f.close();
 
  //Clear the contents of tmp
  memset(tmp, 0, 64);
 
  //Open the file for reading
  f.open(&amp;quot;/home/myfile.txt&amp;quot;);
 
  //Read and show contents
  f.read(tmp, 64);
  printf(&amp;quot;Read:%s&amp;quot;, tmp);
 
  //Close the file
  f.close();
 
  return 0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>PIO Tutorial</title>
   <link href="http://stratifylabs.co/coactionos%20tutorials/2013/11/02/CoActionOS-Tutorial-Pio"/>
   <updated>2013-11-02T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/coactionos%20tutorials/2013/11/02/CoActionOS-Tutorial-Pio</id>
   <content type="html">&lt;p&gt;CoActionOS Applib provides C++ classes for easy IO access. The following 
program demonstrates using a pin to turn the CoAction Hero on-board LED 
on and off (error checking has been omitted for simplicity). 
See &lt;a href=&quot;/coactionos-applib/html/class_pin.html&quot;&gt;Pin Class&lt;/a&gt; for more details.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;applib/Timer.hpp&amp;gt;
#include &amp;lt;applib/Pin.hpp&amp;gt;
 
int main(int argc, char * argv[]){
 
  //Use PIO port 2 (2.10 has the LED connection)
  Pin pin(2,10);
 
  //open the port
  pin.init(PIO_MODE_OUTPUT);
 
  //Turn the LED on
  printf(&amp;quot;LED is on\n&amp;quot;);
  pin.clr();
  //you can also assign boolean values to the object to do the same thing
  pin = false;
 
  //Sleep for one second
  Timer::wait_sec(1);
 
  //Turn the LED off
  printf(&amp;quot;LED is off\n&amp;quot;);
  pin.set();
  //or use the = operator with a boolean value
  pin = true; 
 
  return 0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>First Project</title>
   <link href="http://stratifylabs.co/coactionos%20tutorials/2013/11/01/CoActionOS-Tutorial-First-Project"/>
   <updated>2013-11-01T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/coactionos%20tutorials/2013/11/01/CoActionOS-Tutorial-First-Project</id>
   <content type="html">&lt;div align=&quot;center&quot; class=&quot;flex-video&quot;&gt;
	&lt;iframe src=&quot;//www.youtube.com/embed/6-rbEx6AV6A?rel=0&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;starting-a-new-project&quot;&gt;Starting a New Project&lt;/h2&gt;

&lt;p&gt;To start a new project for CoActionOS, you start by downloading our default 
Hello World project (see the attached files below). This project can be 
imported to Eclipse by clicking File-&amp;gt;Import… then select “Existing 
Projects into Workspace” under “General”. You then specify the downloaded 
archive file and hit “Finish”. Once the project is in your workspace, you 
can push the hammer icon to build it. Next you install the application using 
CoActionOS Link.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Connect the CoActionOS microcomputer to a desktop computer with a USB cable&lt;/li&gt;
  &lt;li&gt;Launch CoActionOS Link on the desktop computer&lt;/li&gt;
  &lt;li&gt;Establish a connection to the microcomputer by pushing the connect  button&lt;/li&gt;
  &lt;li&gt;Navigate to the Application  view
    &lt;ul&gt;
      &lt;li&gt;Browse to or type in the workspace address and “Hello World” will appear in the project dropdown&lt;/li&gt;
      &lt;li&gt;Select the “Startup”, “Run”, and “RAM” options&lt;/li&gt;
      &lt;li&gt;Startup: runs the application when the device starts (cannot be RAM)&lt;/li&gt;
      &lt;li&gt;Run: runs the application when installation is complete&lt;/li&gt;
      &lt;li&gt;RAM: installs the application in RAM (lost after a reset)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Push the install  button&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hello-world&quot;&gt;Hello World!&lt;/h2&gt;

&lt;p&gt;The source code for main.cpp looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;cstdio&amp;gt;
 
int main(int argc, char * argv[]){
     printf(&amp;quot;Hello World\n&amp;quot;);
     return 0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the standard “Hello World!” program for any platform using the 
C standard library.  When CoActionOS boots up, it initializes the hardware 
and system calls associated with the standard output such that when “Hello World!” 
runs, the standard output is ready to go.&lt;/p&gt;

&lt;h2 id=&quot;customizing-hello-world&quot;&gt;Customizing Hello World&lt;/h2&gt;

&lt;p&gt;Using Eclipse, you can add classes or C source files. Once you add the files, 
the Eclipse builder will automatically include them in the build.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;span class=&quot;label label-danger&quot;&gt;Note&lt;/span&gt; If you download
the attached Hello World project for MacOS X on Windows, it will still work. 
You will just have to clear the include path entries and &lt;a href=&quot;/user%20guides/2013/12/16/CoActionOS-User-Guide-CoActionOS-and-Eclipse&quot;&gt;rebuild the index in 
Eclipse&lt;/a&gt;.&lt;/div&gt;

&lt;p&gt;&lt;a class=&quot;btn btn-default&quot; href=&quot;/attachments/HelloWorld-macosx.zip&quot;&gt;&lt;i class=&quot;fa fa-paperclip&quot;&gt; &lt;/i&gt; Hello World (mac)&lt;/a&gt;
&lt;a class=&quot;btn btn-default&quot; href=&quot;/attachments/HelloWorld-win.zip&quot;&gt;&lt;i class=&quot;fa fa-paperclip&quot;&gt; &lt;/i&gt; Hello World (win)&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Using Op Amps in Embedded Design</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/27/Tips-Using-Op-Amps-in-Embedded-Design"/>
   <updated>2013-10-27T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/27/Tips-Using-Op-Amps-in-Embedded-Design</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/inverting-opamp.svg&quot; /&gt;
Op-amps are very useful devices in electronics and can be very helpful when 
interfacing analog and digital technologies in embedded systems.&lt;/p&gt;

&lt;h2 id=&quot;introduction-to-op-amps&quot;&gt;Introduction to Op-Amps&lt;/h2&gt;

&lt;p&gt;An op-amp (or operational amplifier) is a very common electrical circuit widely used in the electronics industry. It has two inputs (plus and minus) as well as one output. Traditional op-amps require a positive and negative voltage supply (e.g. plus and minus 15V) and the output voltage is limited to within about a volt of each rail–meaning the maximum output for an op-amp with a 15V supply is around 14V. This presents a problem in single supply systems with traditional digital voltage levels. Traditional op-amps are not able to take advantage of the full range of ADCs nor definitively drive digital inputs. The rail problem is overcome by using rail-to-rail op-amps which are designed for single supply operation and can drive its output within a few millivolts of the power rails. Rail-to-rail op-amps are particularly well suited for embedded systems integration. Before looking at some typical applications, it is important to understand how to analyze an op-amp circuits.&lt;/p&gt;

&lt;h2 id=&quot;analyzing-op-amp-circuits&quot;&gt;Analyzing Op-amp Circuits&lt;/h2&gt;

&lt;p&gt;Ideal op-amps are a good first order approximation of op-amp behavior and are used to analyze as well as design op-amp circuits. The ideal op-amp has two basic rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Infinite Input Impedance (no current flows in or out of the input terminals)&lt;/li&gt;
  &lt;li&gt;Output forces voltage difference on inputs to zero in closed-loop designs (meaning the voltage at both input terminals is the same)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To apply these two rules to op-amp circuit analysis, it is important to be familiar with two electrical laws: Ohm’s Law and Kirchhoff’s Current Law. Ohm’s law is defined by the equation:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_equation&quot; src=&quot;/images/ohms-law.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That is, voltage is equal to current times resistance. Ohm’s law can be used to calculate the current through the resistor in the diagram below.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/ohms-law-circuit.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kirchhoff’s current law states that the sum of all currents entering a node is zero. The law implies that all currents entering the node are equal to the currents leaving the node. This law can be applied to the op-amp circuit above (first in the article).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_equation&quot; src=&quot;/images/opamp-kirchhoff-0.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If Ohm’s law is combined with Kirchhoff’s current law, the equation then becomes the following.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_equation&quot; src=&quot;/images/opamp-kirchhoff-1.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The equation is simplified further by applying the rules of an ideal op-am.  First, 
infinite input impedance means that current i3 is zero. Second, the 
voltage difference on the inputs is zero means V&lt;sub&gt;n&lt;/sub&gt; = V&lt;sub&gt;p&lt;/sub&gt; = 0V. 
The resulting equation is as follows.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_equation&quot; src=&quot;/images/opamp-kirchhoff-2.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To calculate the gain of the circuit, the above equation is solved for the output divided by the input.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_equation&quot; src=&quot;/images/opamp-kirchhoff-3.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The op-amp circuit shown above is called an inverting amplifier (the output is the input times a negative number). As drawn, the inverting amplifier is not well adapted to single supply embedded systems because the output is centered at 0V. However, there are plenty of great ways to use op-amps in single supply, embedded designs.&lt;/p&gt;

&lt;h2 id=&quot;using-op-amps-in-embedded-systems&quot;&gt;Using Op-amps in Embedded Systems&lt;/h2&gt;

&lt;p&gt;Op-amps are great in embedded systems when mixing analog and digital circuitry. One common use is signal conditioning before sampling with an analog-to-digital converter (ADC). The op-amp can also be used as a comparator for comparing thresholds or as a frequency counter.&lt;/p&gt;

&lt;h2 id=&quot;signal-conditioning-example&quot;&gt;Signal Conditioning Example&lt;/h2&gt;

&lt;p&gt;A pressure sensor typically has an output in the millivolt range. To measure this voltage with an ADC on a microcontroller, an op-amp is used to scale the output of the pressure sensor to span the range of the ADC input. For example, if the pressure sensor output is zero volts to 250mV and the ADC input range is zero to 2.5V, the amplifier needs to magnify the sensor output with a gain of 10. Because all the voltages are positive, the desired op-amp configuration is a non-inverting op-amp.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/non-inverting-opamp.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The analysis technique described above shows that the output of the op-amp is:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_equation&quot; src=&quot;/images/opamp-kirchhoff-4.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the feedback resistor is 9KOhms and the input resistor is 1KOhms, the gain will be 10 such that the output of the pressure sensor will be scaled to take advantage of the full range of the ADC.&lt;/p&gt;

&lt;h2 id=&quot;frequency-counter-example&quot;&gt;Frequency Counter Example&lt;/h2&gt;

&lt;p&gt;Another useful application of the op-amp is a sine-wave to square-wave converter which can be input to a timer clock input to measure frequency. For example, if you have a sine wave in your embedded application and want to measure the frequency, you can pass the wave through an op-amp and use a timer on the microcontroller to count rising edges. Converting the rising edges to frequency can be done in one of two ways. The fast way is to count the number of MCU clock cycles between rising edges; this method works well if the MCU clock speed is much higher have the input frequency. The slow way is to count the number of rising edges in a given period of time. Either method uses the circuit below to convert the sine wave to a square wave that can act as the timer input.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/freq-counter-circuit.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first stage of the circuit adjusts the sine wave to be centered around Vcc/2. Rf and Ri can be adjusted so that the output swing of the first amplifier is between 0V and Vcc. The second op-amp acts as a voltage comparator. If the input (on the inverting terminal) is greater than Vcc/2 (the non-inverting terminal), the output is zero volts. If the inverting input is less than Vcc/2, the output is Vcc assuming the op-amp is of the rail-to-rail variety.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Op-amps are great for analog signals in digital designs (especially rail-to-rail op-amps). The ideal op-amp as well as knowledge of basic electrical principles greatly simplify designing and integrating op-amps in your embedded designs.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Controlling a Solenoid</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/26/Tips-Controlling-a-Solenoid"/>
   <updated>2013-10-26T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/26/Tips-Controlling-a-Solenoid</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/solenoid-ckt.png&quot; /&gt;
Many products use solenoids to open and close valves. A microcontroller 
can control solenoids programmatically using a GPIO pin and a simple circuit. &lt;/p&gt;

&lt;h2 id=&quot;circuit&quot;&gt;Circuit&lt;/h2&gt;

&lt;p&gt;A solenoid can be enabled using a simple transistor circuit and a microcontroller. 
 The circuit above shows a solenoid, MOSFET transistor, diode, and a microcontroller 
 GPIO signal. To activate the solenoid, the microcontroller GPIO signal goes high 
 causing the MOSFET to turn on. When on, the MOSFET allows current to flow from 
 the power supply through the solenoid and to ground. The voltage rating for the 
 solenoid dictates the voltage of the power supply (it is OK if the power supply 
 voltage is different from the microcontroller voltage). The MOSFET should be 
 selected to handle sufficient current to activate the solenoid as specified in 
 the solenoid’s datasheet.&lt;/p&gt;

&lt;p&gt;Because the solenoid is an inductive device, the diode is added to protect the 
 MOSFET. When the solenoid turns off, the current through the solenoid rapidly 
 drops from the nominal value to zero. Since the voltage drop across the solenoid 
 is proportional to the change in current (see equation below), the current drop 
 creates a voltage spike which can damage the MOSFET. The diode prevents the 
 voltage spike from reaching damaging levels by directing the current back to the 
 power supply.&lt;/p&gt;

&lt;p&gt;V&lt;sub&gt;L&lt;/sub&gt;=L * di / dt&lt;/p&gt;

&lt;h2 id=&quot;firmware-considerations&quot;&gt;Firmware Considerations&lt;/h2&gt;

&lt;p&gt;Controlling the solenoid in firmware is a straightforward operation with one 
 exception. As mentioned, driving the GPIO high will turn the solenoid on, 
 while driving it low will turn it off. However, there is a small amount of 
 time while the microcontroller starts up where the solenoid may open unexpectedly. 
 For example, if the default GPIO configuration is to have an internal pull-up 
 activated, the solenoid will be activated while the microcontroller is starting 
 up.  To avoid this behavior, an external pull-down resistor can be added to the GPIO 
 line (shown below) to ensure the solenoid stays off during microcontroller 
 initialization.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/solenoid-pulldown-ckt.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Controlling solenoids with microcontrollers is simple. Remember to ensure the MOSFET has sufficient current capability to activate the solenoid, include the protection diode to prevent the solenoid from damaging the MOSFET, and include a pull-down resistor on the GPIO line if the microcontroller doesn’t drive the line low at startup.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Using Pull-Up and Pull-Down Resistors</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/25/Tips-Using-Pull-Up-and-Pull-Down-Resistors"/>
   <updated>2013-10-25T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/25/Tips-Using-Pull-Up-and-Pull-Down-Resistors</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/pullup.png&quot; /&gt;
An embedded microcontroller utilizes input/output (IO) signals to 
communicate with the outside world.  The simplest form of IO is 
commonly referred to as general purpose input/output (GPIO) where 
the GPIO voltage level can be high, low, or high-impedance.  Pulling 
resistors are used to ensure GPIO is always in a valid state.&lt;/p&gt;

&lt;h3 id=&quot;gpio-input-states-on-an-embedded-microcontroller&quot;&gt;GPIO Input States on an Embedded Microcontroller&lt;/h3&gt;

&lt;p&gt;GPIO on a microcontroller is usually configured as either input or 
output.  As an input, the pin can take one of three states: low, 
high, and floating (also called high-impedance or tri-stated).  When 
an input is driven above the input high threshold, it is high 
(or logic one).  When driven below the input low threshold, the 
input is low (or logic zero).  When in a high-impedance state, the 
input level is not reliably high nor low.  To ensure an input value 
is always in a known state, a pull-up or pull-down resistor is 
used.  A pull-up resistor pulls the signal to a high state unless it is 
driven low while a pull-down resistor puts the signal in a low state unless driven high.&lt;/p&gt;

&lt;h3 id=&quot;pull-up-or-pull-down&quot;&gt;Pull-up or Pull-down&lt;/h3&gt;

&lt;p&gt;The figure above illustrates a typical pull-up resistor 
application.  The resistor is connected between the power supply and a GPIO 
pin.  A switch is then connected between the GPIO pin and ground.  When the 
switch is open, there is (practically) zero current that flows from 
VCC through the resistor and into the GPIO pin.  The voltage at the 
GPIO pin is given by the following equation derived from Ohm’s law:&lt;/p&gt;

&lt;p&gt;V&lt;sub&gt;GPIO&lt;/sub&gt; &lt;span&gt;=&lt;/span&gt;  V&lt;sub&gt;CC&lt;/sub&gt; -  I&lt;sub&gt;R1&lt;/sub&gt;*R1&lt;/p&gt;

&lt;p&gt;Since there is no current through the resistor I&lt;sub&gt;R1&lt;/sub&gt;=0, there 
is no voltage drop across R1 making the voltage at the GPIO input equal 
to VCC which causes the input to read “high”.  When the switch is closed, 
the GPIO pin is connected directly to ground driving it “low”.  As a side 
effect of closing the switch, current flows through the resistor according 
to the following equation (also from Ohm’s law):&lt;/p&gt;

&lt;p&gt;I&lt;sub&gt;PULLUP&lt;/sub&gt; = V&lt;sub&gt;CC&lt;/sub&gt;/R&lt;sub&gt;PULLUP&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;In some systems, I&lt;sub&gt;PULLUP&lt;/sub&gt; is a significant amount of current through 
the pull-up (or pull-down) resistor.  Increasing the value of the resistor can 
reduce this current while simultaneously causing the pull-up or pull-down to be “weaker”.&lt;/p&gt;

&lt;h3 id=&quot;weak-or-strong-pull-uppull-down-resistor&quot;&gt;Weak or Strong Pull-up/Pull-down Resistor&lt;/h3&gt;

&lt;p&gt;A weak pull-up/pull-down resistor typically has a value of tens or hundreds 
of kilo-ohms.  Strong pulling resistors have values of a few kilo-ohms 
and can override weak pulling resistors if both are used on the same 
microcontroller GPIO pin.  The circuit below shows a GPIO pin with a 
weak internal pull-up resistor–most modern microcontroller designs 
have built-in pull-up and/or pull-down resistors on each GPIO pin–and 
a strong external pull-down resistor.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/internalpullup2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order for the strong pull-down resistor to work properly, it must be correctly sized.&lt;br /&gt;
During normal operation, the voltage at the GPIO pin must be below the input low 
voltage V&lt;sub&gt;IL&lt;/sub&gt; as specified in the electrical characteristics section of the 
device’s datasheet.  The voltage at the GPIO pin is calculated using a voltage divider:&lt;/p&gt;

&lt;p&gt;V&lt;sub&gt;GPIO&lt;/sub&gt; = V&lt;sub&gt;CC&lt;/sub&gt; * R1 / (R2 + R1)&lt;/p&gt;

&lt;p&gt;The value of the strong pull-down must be low enough to make V&lt;sub&gt;GPIO&lt;/sub&gt; &amp;lt; V&lt;sub&gt;IL&lt;/sub&gt;.&lt;br /&gt;
This ensures the voltage at the microcontroller GPIO pin is low (logic zero) 
when the switch is open.  When the switch is closed, the signal is driven high–not 
because of the internal pull-up resistor but because it is directly connected to VCC.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Pull-up/pull-down resistors are a great way to prevent microcontroller GPIO inputs 
from assuming undefined values in embedded designs; however, they must be correctly 
sized (either weak or strong) based on power consumption requirements as well as 
existing circuitry (such as internal pull-up/pull-down resistors) to ensure proper 
circuit operation.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Using LEDs in Embedded Designs</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/24/Tips-Using-LEDs-in-Embedded-Designs"/>
   <updated>2013-10-24T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/24/Tips-Using-LEDs-in-Embedded-Designs</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;post_image_tall&quot; src=&quot;/images/LED-circuit.png&quot; /&gt;
LEDs are a common element of many embedded designs.  Though the devices are 
simple; their implementation is not always simplistic.  Optimizing LED cost 
and performance includes ensuring the driving circuitry is providing the 
correct voltage and current.&lt;/p&gt;

&lt;p&gt;The brightness of an LED is determined by the current that runs through it.  Typical 
applications use a current limiting resistor in series with an LED to set the 
brightness at a fixed level.  The following diagram shows a circuit that powers 
an LED using such a resistor.&lt;/p&gt;

&lt;p&gt;To optimize the performance of the LED, the resistor must be sized correctly (note the resistor can be either above or below the LED without affecting the operation or performance of the circuit).  The LED manufacturer provides the rated current and forward voltage values that are essential to calculating the resistor size.  The rated current is the optimal current value for the LED, and the forward voltage is the drop in voltage across the LED when the rated current is applied.  The following diagram shows fictitious but typical values for VCC, the forward voltage, and the rated current.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image_tall&quot; src=&quot;/images/LED-circuit-annotated.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The value of the resistor is calculated using the given constraints and Ohm’s law.  The voltage drop across R1 is 2.1V, which is VCC (3.3V) minus the forward voltage across the diode (1.2V).  The current through R1–the same as the rated current of D1–is 20mA.  From Ohm’s law, R1 is 105 Ohms.&lt;/p&gt;

&lt;p style=&quot;text-align: center&quot;&gt;
V=IR&lt;br /&gt;
2.1V=20mA*R&lt;sub&gt;1&lt;/sub&gt;&lt;br /&gt;
R&lt;sub&gt;1&lt;/sub&gt;=2.1V / 20mA=105Ohms&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;The rated current, 20mA, is the maximum that can be safely, continuously applied.  Therefore, 105 Ohms is the minimum value for R1.  Decreasing the value of R1 allows more current to flow through D1; increasing R1 decreases the current through D1 as well as the brightness.&lt;/p&gt;

&lt;p&gt;In this circuit D1 is always on.  The ground or power connection can be replaced with driving circuitry that is dynamically controlled with an MCU to make the LED blink or dim.&lt;/p&gt;

&lt;h2 id=&quot;driving-circuitry&quot;&gt;Driving Circuitry&lt;/h2&gt;

&lt;p&gt;p.LED’s can be driven using a GPIO pin or–if more current is needed–a transistor.  Depending on the current capabilities of the GPIO pin, it may act as either a sink or a source for the current through the LED.  The datasheet for the MCU will specifiy how much current each pin can sink or source.  The following picture shows an example of the GPIO acting as a current sink.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image_tall&quot; src=&quot;/images/LED-GPIO-sink.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the GPIO outputs a low value, the LED turns off.  Conversely when the GPIO outputs a high value the LED is off.  Interestingly, the LED is also off when the pin is configured as an input.  The GPIO is called a current sink in this case because the current flows in to the pin (much like water flows down the drain of a kitchen sink).  The pin can also act a a current source if configured as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image_tall&quot; src=&quot;/images/LED-GPIO-source.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case, the LED is on when the GPIO outputs a logic one.  In both these scenarios, the current through the LED is limited by the sinking/sourcing capabilities of the GPIO.  This limitation is overcome by using a transistor to drive the LED (shown below).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image_tall&quot; src=&quot;/images/LED-NMOS.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To turn the LED on, Q1 needs to be turned on; that is, the GPIO pin outputs a logic one.  Outputting a logic zero on the pin turns the LED off.  In this case, if the GPIO is configured as an input, Q1 will be in an un-stable state, and the light may be on, off, or flickering.  If keeping Q1 in a stable state is critical, a pull-up or pull-down resistor may be added to the gate of Q1 to ensure a known state while the GPIO pin is initializing.&lt;/p&gt;

&lt;p&gt;Once the circuit is configured to drive the LED with a GPIO pin, as in any of the above three examples, the brightness can be adjusted dyncamically by rapidly changing the output of the pin.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/pwm-plot.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dynamic-brightness-adjustment&quot;&gt;Dynamic Brightness Adjustment&lt;/h2&gt;

&lt;p&gt;Pulse width modulation (PWM) is a form of digital to analog conversion that can be used to control the brightness of an LED.  PWM is defined by a period and a duty cycle.  The period is the total time; the duty cycle is the percentage of the period that the LED is on.  The following diagram illustrates several PWM duty cycles.&lt;/p&gt;

&lt;p&gt;If the period is set to a relatively large value, such as several seconds, the LED will blink.  Much smaller periods (in the milli- or microsecond range) will make the LED appear to be dimmer with lower duty cycle values and brighter with higher ones.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Using LEDs in embedded designs is relatively simple (and thus a good starting point for beginners).  It is important to use a current limiting resistor in-line with LEDs to prevent damage.  To optimize the performance of the LED, careful sizing of the resistor is necessary.  However, to just get the LED to turn on and off a broad range of resistors will work.  Depending on the current requirements of the LED and the capabilites of the MCU, LEDs may be driven directly using GPIO or, for high current applications, may require the use of a transistor.  Firmware can then be used to simply blink the LED or use PWM to adjust the brightness.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Using Doxygen with C</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/23/Tips-Using-Doxygen-with-C"/>
   <updated>2013-10-23T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/23/Tips-Using-Doxygen-with-C</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/cdoxygen-arch.png&quot; /&gt;
Doxygen is a free source code documentation tool.  It automatically 
decomposes a software design when using an object-oriented programming 
language such as C++ or Java.  When using C, however, there is no natural 
break-down of the code so the developer must create groups (or modules) within 
Doxygen to show a definitive decomposition of the design.&lt;/p&gt;

&lt;p&gt;The first step in using Doxygen to document C code is to create a software 
design.  Embedded systems fit well into a layered software design with the 
lowest layer being the MCU’s peripheral drivers.  The device driver layer 
is on top of the peripheral drivers and provides an API to external 
devices.  Other software libraries may also exist independent of the 
hardware layers.  The highest layer is typically the application.  A sample, 
layered architecture diagram is shown above.&lt;/p&gt;

&lt;p&gt;Once the design is done, each bit of functionality is assigned to a Doxygen 
group.  The groups are then grouped together.  For example, functions in the UART driver are 
part of the UART group, and the UART group is part of the PERIPHERAL group as shown below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;/*! \addtogroup UART UART Driver
 *
 * \ingroup PERIPHERAL
 * @{
 * \details This is the UART perhipheral driver.
 *
 */
 
/*! \file
 * \details This file is the UART peripheral driver header file.
 */
 
#ifndef UART_H_
#define UART_H_
 
/*! \details This function opens the specified UART port.
 * \return Zero if the port opened successfully.
 */
int uart_open(int port /*! The port to open */, int mode /*! The mode for the UART */);
 
/*! \details This function opens the specified UART port.
 * \return The number of bytes read
 */
int uart_rd(int port /*! The port to read */, 
     void * dest /*! A pointer to the destination memory */, 
     int size /*! The number of bytes to read */);
 
/*! \details This function opens the specified UART port.
 * \return The number of bytes written
 */
int uart_wr(int port /*! The port to write */, 
     void * src /*! A pointer to the source memory */, 
     int size /*! The number of bytes to write */);
 
/*! \details This function opens the specified UART port.
 */
void uart_close(int port /*! The port to close */);
 
#endif&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To complete the design hierarchy, the PERIPHERAL group is part of a top group 
called SYSTEM.  To document all of the modules shown in the architecture diagram 
above, the following groups are needed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SYSTEM
    &lt;ul&gt;
      &lt;li&gt;COMMAND_MANAGER&lt;/li&gt;
      &lt;li&gt;SOFTWARE
        &lt;ul&gt;
          &lt;li&gt;PID&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;DEVICE_DRIVERS
        &lt;ul&gt;
          &lt;li&gt;MOTOR_DRIVER&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;PERIPHERAL&lt;/li&gt;
      &lt;li&gt;UART&lt;/li&gt;
      &lt;li&gt;PWM&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&quot;/coactionos/html/&quot;&gt;CoActionOS documentation&lt;/a&gt; includes many examples 
of the techniques described herein.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>USB Virtual Serial Port Firmware</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/22/Tips-USB-Virtual-Serial-Port-Firmware"/>
   <updated>2013-10-22T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/22/Tips-USB-Virtual-Serial-Port-Firmware</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/usb-cdc-desc.svg&quot; /&gt;
Desktop communication to embedded devices is critical for programming and 
debugging.  It is also important in production for data acquisition devices 
and other computer peripherals.  Setting up a device as a virtual serial port 
using USB is a great solution for transferring data between desktop computers 
and embedded systems.  It can be connected to most desktop operating systems 
(Windows, Mac OS X, and Linux) without installing or developing any USB drivers.&lt;/p&gt;

&lt;h2 id=&quot;introduction-to-usb&quot;&gt;Introduction to USB&lt;/h2&gt;

&lt;p&gt;USB is a serial communications protocol that is found in almost all desktop 
computers (its name, Universal Serial Bus, is truly descriptive).  Physically 
USB is just four wires: 5V, ground, data plus and data minus.  It uses 
differential signaling to maximize immunity to noise.  Using differential 
signaling means both data lines are used to send data in one direction making 
USB a half-duplex protocol.  So at any given time, the USB is sending data in 
at most one direction.  The data sent is packetized and error 
checked.  The packets enable communication between logical endpoints stored in the 
host and device.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/usb-endpoints.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The basic logical building block of USB is an endpoint.  Unfortunately, 
unlike USB, endpoint is not a descriptive name.  Endpoints are realized 
as memory buffers in the host and device (see above diagram).  In USB, 
the host is always the master, and the slave is the device.  The host 
initiates all communcations.    When the host sends data to a device 
endpoint, it means that the data is packetized, transmitted across the 
data plus and data minus lines, and stored in one of various memory 
buffers (called endpoints) in the device.&lt;/p&gt;

&lt;p&gt;USB uses endpoint zero as the control endpoint.  This means all USB devices 
have at least one endpoint.  In order for the host to understand the device, 
it uses the control endpoint to load data that describes the device. This data 
is called a USB descriptor.  The four main types of descriptors are:  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Device Descriptor:  contains information about the device such as USB version, power consumption, manufacturer and serial number &lt;/li&gt;
  &lt;li&gt;Configuration Descriptor:  contains information about what the device does like mass storage or communications&lt;/li&gt;
  &lt;li&gt;Interface Descriptor:  describes one of possibly many ways the host can interact with the configuration&lt;/li&gt;
  &lt;li&gt;Endpoint Descriptor:  describes how the host can send data to and get data from an interface&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to these descriptor types, different classes define additional 
descriptors that provide additional information about how the device 
works.  For example, a human interface device (HID) has additional descriptors that 
describe the input type (such as mouse, keyboard, joystick, etc).  For a 
virtual serial port, the communications device class (CDC) provides additional 
information about how the host sends information to the device.&lt;/p&gt;

&lt;h2 id=&quot;abstract-control-model&quot;&gt;Abstract Control Model&lt;/h2&gt;

&lt;p&gt;Successfully implementing the abstract control model on the USB device 
requires three things:&lt;/p&gt;

&lt;h3 id=&quot;properly-implementing-the-usb-descriptors&quot;&gt;Properly implementing the USB descriptors&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Responding to interface requests on endpoint zero&lt;/li&gt;
  &lt;li&gt;Reading and writing data on the data class interface&lt;/li&gt;
  &lt;li&gt;USB Virtual Serial Port USB Descriptors&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The diagram above (top) outlines the USB descriptors for a CDC device 
using the abstract control model (ACM).  The ACM is used for a virtual 
serial port.  Under the CDC configuration, there are two interfaces:&lt;br /&gt;
the communications class interface and the data class interface.  The 
former is used for control (such as telling the host the status of the 
CTS line has changed) while the latter transfers the serial port data.&lt;/p&gt;

&lt;h3 id=&quot;communications-class-interface&quot;&gt;Communications Class Interface&lt;/h3&gt;

&lt;p&gt;The communications class interface includes four special CDC descriptors:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CDC Header:  tells the host the size of the special CDC descriptors&lt;/li&gt;
  &lt;li&gt;ACM:  tells the host the device is, basically, a virtual serial port&lt;/li&gt;
  &lt;li&gt;Union:  tells the host which data class interface to use to transfer data&lt;/li&gt;
  &lt;li&gt;Call Management:  tells the host which, if any, commands the device handles over the control endpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The interrupt endpoint is used when the device needs to send status 
updates to the host.  The endpoint is an in endpoint meaning data is 
sent in to the host from the device.&lt;/p&gt;

&lt;h3 id=&quot;data-class-interface&quot;&gt;Data Class Interface&lt;/h3&gt;

&lt;p&gt;There are two endpoints that are part of the data class interface. These 
endpoints are effectively used to read and write data over the virtual 
serial port. The bulk in endpoint allows the device to send data to the 
host while the bulk out endpoint transfer data from the host to the device.&lt;/p&gt;

&lt;h3 id=&quot;example-code&quot;&gt;Example Code&lt;/h3&gt;

&lt;p&gt;The following code is used to set up the endpoint descriptors for the 
virtual serial port.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdint.h&amp;gt;
 
//This is the standard device descriptor 
//(HWPL_PACK ensure the structures are packed using a pragma)
//on GCC HWPL PACK is #define HWPL_PACK __attribute__((packed))
typedef struct HWPL_PACK {
  uint8_t bLength;
  uint8_t bDescriptorType;
  uint16_t bcdUSB;
  uint8_t bDeviceClass;
  uint8_t bDeviceSubClass;
  uint8_t bDeviceProtocol;
  uint8_t bMaxPacketSize;
  uint16_t idVendor;
  uint16_t idProduct;
  uint16_t bcdDevice;
  uint8_t iManufacturer;
  uint8_t iProduct;
  uint8_t iSerialNumber;
  uint8_t bNumConfigurations;
} usb_dev_desc_t;
 
//definition to aid with declaring USB strings
#define usb_declare_string(len) struct \
    HWPL_PACK { \
  uint8_t bLength; \
  uint8_t bDescriptorType; \
  uint16_t string[len]; \
}
 
//definition to aid with assigning values to a USB string
#define usb_assign_string(len, ...) { \
    .bLength = len*2+2, \
    .bDescriptorType = USB_STRING_DESCRIPTOR_TYPE, \
    .string = { __VA_ARGS__ } }
 
//The standard configuration descriptor
typedef struct HWPL_PACK {
  uint8_t bLength;
  uint8_t bDescriptorType;
  uint16_t wTotalLength;
  uint8_t bNumInterfaces;
  uint8_t bConfigurationValue;
  uint8_t iConfiguration;
  uint8_t bmAttributes;
  uint8_t bMaxPower;
} usb_cfg_desc_t;
 
//The standard interface descriptor
typedef struct HWPL_PACK {
  uint8_t bLength;
  uint8_t bDescriptorType;
  uint8_t bInterfaceNumber;
  uint8_t bAlternateSetting;
  uint8_t bNumEndpoints;
  uint8_t bInterfaceClass;
  uint8_t bInterfaceSubClass;
  uint8_t bInterfaceProtocol;
  uint8_t iInterface;
} usb_interface_desc_t;
 
//The standard endpoint descriptor
typedef struct HWPL_PACK {
  uint8_t bLength;
  uint8_t bDescriptorType;
  uint8_t bEndpointAddress;
  uint8_t bmAttributes;
  uint16_t wMaxPacketSize;
  uint8_t bInterval;
} usb_ep_desc_t;
 
//The CDC functional header
typedef struct {
  uint8_t bFunctionLength;
  uint8_t bDescriptorType;
  uint8_t bDescriptorSubType;
  uint16_t bcdCDC;
} cdc_header_func_desc_t;
 
//The CDC call management descriptor
typedef struct {
  uint8_t bFunctionLength;
  uint8_t bDescriptorType;
  uint8_t bDescriptorSubType;
  uint8_t bmCapabilities;
  uint8_t bDataInterface;
} cdc_call_mgt_func_desc_t;
 
//The CDC ACM descriptor
typedef struct {
  uint8_t bFunctionLength;
  uint8_t bDescriptorType;
  uint8_t bDescriptorSubType;
  uint8_t bmCapabilities;
} cdc_abstract_contorl_model_func_desc_t;
 
//The CDC union descriptor
typedef struct {
  uint8_t bFunctionLength;
  uint8_t bDescriptorType;
  uint8_t bDescriptorSubType;
  uint8_t bMasterInterface;
  uint8_t bSlaveInterface[];
} cdc_union_func_desc_t;
 
//CDC interface descriptor with CDC header, ACM, union, and call management
typedef struct HWPL_PACK {
  usb_dev_cdc_header_t header;
  usb_dev_cdc_acm_t acm;
  usb_dev_cdc_uniondescriptor_t union_descriptor;
  usb_dev_cdc_callmanagement_t call_management;
} cdc_acm_interface_t;
 
//Application level configuration descriptor with interfaces and endpoints
typedef struct HWPL_PACK {
  usb_cfg_desc_t cfg /* The configuration descriptor */;
  usb_interface_desc_t ifcontrol /* The interface descriptor */;
  link_cdc_acm_interface_t acm /*! The CDC ACM Class descriptor */;
  usb_ep_desc_t control /* Endpoint:  Interrupt out for control packets */;
  usb_interface_desc_t ifdata /* The interface descriptor */;
  usb_ep_desc_t data_out /* Endpoint:  Bulk out */;
  usb_ep_desc_t data_in /* Endpoint:  Bulk in */;
  uint8_t terminator  /* A null terminator used by the driver (required) */;
} app_cfg_desc_t;
 
#define USB_DESC_MANUFACTURER_SIZE 15
#define USB_DESC_PRODUCT_SIZE 10
#define USB_DESC_SERIAL_SIZE 16
#define USB_DESC_MANUFACTURER_STRING &amp;#39;C&amp;#39;,&amp;#39;o&amp;#39;,&amp;#39;A&amp;#39;,&amp;#39;c&amp;#39;,&amp;#39;t&amp;#39;,&amp;#39;i&amp;#39;,&amp;#39;o&amp;#39;,&amp;#39;n&amp;#39;,&amp;#39;O&amp;#39;,&amp;#39;S&amp;#39;,&amp;#39;,&amp;#39;,&amp;#39; &amp;#39;,&amp;#39;I&amp;#39;,&amp;#39;n&amp;#39;,&amp;#39;c&amp;#39;
#define USB_DESC_PRODUCT_STRING &amp;#39;C&amp;#39;,&amp;#39;o&amp;#39;,&amp;#39;A&amp;#39;,&amp;#39;c&amp;#39;,&amp;#39;t&amp;#39;,&amp;#39;i&amp;#39;,&amp;#39;o&amp;#39;,&amp;#39;n&amp;#39;,&amp;#39;O&amp;#39;,&amp;#39;S&amp;#39;
#define USB_DESC_SERIAL_STRING &amp;#39;0&amp;#39;,&amp;#39;0&amp;#39;,&amp;#39;0&amp;#39;,&amp;#39;0&amp;#39;,&amp;#39;0&amp;#39;,&amp;#39;0&amp;#39;,&amp;#39;0&amp;#39;,&amp;#39;0&amp;#39;,&amp;#39;0&amp;#39;,&amp;#39;0&amp;#39;,&amp;#39;0&amp;#39;,&amp;#39;0&amp;#39;,&amp;#39;0&amp;#39;,&amp;#39;0&amp;#39;,&amp;#39;0&amp;#39;,&amp;#39;0&amp;#39;
 
 
//The application structure used for storing the strings
struct HWPL_PACK app_usb_string_t {
  uint8_t bLength;
  uint8_t bDescriptorType;
  uint16_t wLANGID;
  usb_declare_string(USB_DESC_MANUFACTURER_SIZE) manufacturer;
  usb_declare_string(USB_DESC_PRODUCT_SIZE) product;
  usb_declare_string(USB_DESC_SERIAL_SIZE) serial;
};
 
const struct link_usb_string_t app_string_desc = {
    .bLength = 4,
    .bDescriptorType = USB_STRING_DESCRIPTOR_TYPE,
    .wLANGID = 0x0409, //English
    .manufacturer = usb_assign_string(USB_DESC_MANUFACTURER_SIZE, USB_DESC_MANUFACTURER_STRING),
    .product = usb_assign_string(USB_DESC_PRODUCT_SIZE, USB_DESC_PRODUCT_STRING),
    .serial = usb_assign_string(USB_DESC_SERIAL_SIZE, USB_DESC_SERIAL_STRING)
};
 
//The application device descriptor assignment
const usb_dev_desc_t app_dev_desc = {
    .bLength = sizeof(usb_dev_desc_t),
    .bDescriptorType = USB_DEVICE_DESCRIPTOR_TYPE,
    .bcdUSB = 0x0200,
    .bDeviceClass = USB_DEVICE_CLASS_COMMUNICATIONS,
    .bDeviceSubClass = 0,
    .bDeviceProtocol = 0,
    .bMaxPacketSize = USB_MAX_PACKET0,
    .idVendor = LINK_USB_VID,
    .idProduct = LINK_USB_PID+10,
    .bcdDevice = 0x0010,
    .iManufacturer = 1,
    .iProduct = 2,
    .iSerialNumber = 3,
    .bNumConfigurations = 1
};
 
//The assignment of the application&amp;#39;s USB configuration descriptor
const link_cfg_desc_t app_cfg_desc = {
    .cfg = {
        .bLength = sizeof(usb_cfg_desc_t),
        .bDescriptorType = USB_CONFIGURATION_DESCRIPTOR_TYPE,
        .wTotalLength = sizeof(app_cfg_desc_t)-1, //exclude the zero terminator
        .bNumInterfaces = 0x02,
        .bConfigurationValue = 0x01,
        .iConfiguration = 0x03,
        .bmAttributes = USB_CONFIG_BUS_POWERED,
        .bMaxPower = USB_CONFIG_POWER_MA( LINK_REQD_CURRENT )
    },
 
    .ifcontrol = {
        .bLength = sizeof(usb_interface_desc_t),
        .bDescriptorType = USB_INTERFACE_DESCRIPTOR_TYPE,
        .bInterfaceNumber = 0x00,
        .bAlternateSetting = 0x00,
        .bNumEndpoints = 0x01,
        .bInterfaceClass = USB_INTERFACE_CLASS_COMMUNICATIONS,
        .bInterfaceSubClass = USB_INTERFACE_SUBCLASS_ACM,
        .bInterfaceProtocol = USB_INTERFACE_PROTOCOL_V25TER,
        .iInterface = 0x00
    },
 
    .acm = {
        .header.bLength = sizeof(usb_dev_cdc_header_t),
        .header.bDescriptorType = 0x24,
        .header.bDescriptorSubType = 0x00,
        .header.bcdCDC = 0x0110,
        .acm.bFunctionLength = sizeof(usb_dev_cdc_acm_t),
        .acm.bDescriptorType = 0x24,
        .acm.bDescriptorSubType = 0x02,
        .acm.bmCapabilities = 0x02,
        .union_descriptor.bFunctionLength = sizeof(usb_dev_cdc_uniondescriptor_t),
        .union_descriptor.bDescriptorType = 0x24,
        .union_descriptor.bDescriptorSubType = 0x06,
        .union_descriptor.bMasterInterface = 0x00,
        .union_descriptor.bSlaveInterface = 0x01,
        .call_management.bFunctionLength = sizeof(usb_dev_cdc_callmanagement_t),
        .call_management.bDescriptorType = 0x24,
        .call_management.bDescriptorSubType = 0x01,
        .call_management.bmCapabilities = 0x00,
        .call_management.bDataInterface = 0x01
    },
 
    .control = {
        .bLength= sizeof(usb_ep_desc_t),
        .bDescriptorType=USB_ENDPOINT_DESCRIPTOR_TYPE,
        .bEndpointAddress=USB_INTIN,
        .bmAttributes=USB_ENDPOINT_TYPE_INTERRUPT,
        .wMaxPacketSize=LINK_INTERRUPT_ENDPOINT_SIZE,
        .bInterval=1
    },
 
    .ifdata = {
        .bLength = sizeof(usb_interface_desc_t),
        .bDescriptorType = USB_INTERFACE_DESCRIPTOR_TYPE,
        .bInterfaceNumber = 0x01,
        .bAlternateSetting = 0x00,
        .bNumEndpoints = 0x02,
        .bInterfaceClass = USB_INTERFACE_CLASS_COMMUNICATIONS_DATA,
        .bInterfaceSubClass = 0x00,
        .bInterfaceProtocol = 0x00,
        .iInterface = 0x00
    },
 
    .data_out = {
        .bLength= sizeof(usb_ep_desc_t),
        .bDescriptorType=USB_ENDPOINT_DESCRIPTOR_TYPE,
        .bEndpointAddress=USB_BULKOUT,
        .bmAttributes=USB_ENDPOINT_TYPE_BULK,
        .wMaxPacketSize=LINK_BULK_ENDPOINT_SIZE,
        .bInterval=1
    },
 
    .data_in = {
        .bLength= sizeof(usb_ep_desc_t),
        .bDescriptorType=USB_ENDPOINT_DESCRIPTOR_TYPE,
        .bEndpointAddress=USB_BULKIN,
        .bmAttributes=USB_ENDPOINT_TYPE_BULK,
        .wMaxPacketSize=LINK_BULK_ENDPOINT_SIZE,
        .bInterval=1
    },
 
 
 
    .terminator = 0
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;required-interface-requests&quot;&gt;Required Interface Requests&lt;/h3&gt;

&lt;p&gt;The firmware must recognize two special interface requests: 
SEND_ENCAPSULATED_COMMAND and GET_ENCAPSULATED_RESPONSE. The firmware 
must not stall the USB endpoint when these requests arrive. However, 
the firmware does not need to do anything special with the requests 
other than receive them and not stall.&lt;/p&gt;

&lt;h3 id=&quot;reading-and-writing-data-over-the-virtual-serial-port&quot;&gt;Reading and Writing Data over the Virtual Serial Port&lt;/h3&gt;

&lt;p&gt;To send and receive data over the virtual serial port is 
simple. Data is written to the BULK IN endpoint and is read from the BULK OUT 
endpoint. These are the endpoints defined in the data interface.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The USB communications device class (CDC) abstract control model (ACM) 
is a great way to create a cross-platform software-firmware 
interface. The connection creates a virtual serial communications port that can be 
read and written like a classic serial port but without the outdated cables.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Understanding Microcontroller Pin Input/Output Modes</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/21/Tips-Understanding-Microcontroller-Pin-Input-Output-Modes"/>
   <updated>2013-10-21T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/21/Tips-Understanding-Microcontroller-Pin-Input-Output-Modes</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/gpio-output-types.png&quot; /&gt;
General purpose input/output (GPIO) pins on microcontrollers have various modes 
for both input and output. Input modes may include pull-up or pull-down resistors, 
hysteresis, or some combination. Output modes can be push-pull, high-drive or open-drain.&lt;/p&gt;

&lt;h3 id=&quot;input-modes&quot;&gt;Input Modes&lt;/h3&gt;

&lt;p&gt;GPIO input modes typically include high impedance, pull-up, pull-down and 
repeater.  Most input circuitry feature hysteresis which prevents spurious 
state changes.&lt;/p&gt;

&lt;h4 id=&quot;floating-high-impedance-tri-stated&quot;&gt;Floating, High Impedance, Tri-Stated&lt;/h4&gt;

&lt;p&gt;When an input pin is in high impedance input mode, its state is indeterminate 
unless it is driven high or low by an external source.  Pins configured as high 
impedance inputs and not currently driven are called “floating”.  Many times 
“float” or “floating” is used interchaneably with “high impedance” or 
“tri-stated”.  To prevent pins from floating when they are not externally 
driven, internally pulling resistors are used.&lt;/p&gt;

&lt;h4 id=&quot;pull-updown&quot;&gt;Pull Up/Down&lt;/h4&gt;

&lt;p&gt;If an input is configured with an internal pull-up, it will be high unless it 
is externally driven low.  The converse is true with pull-down inputs (learn more 
about pulling resistors).  Some GPIO pins also support changing the pull-up and 
pull-down settings dynamically using repeater mode.&lt;/p&gt;

&lt;h4 id=&quot;repeater&quot;&gt;Repeater&lt;/h4&gt;

&lt;p&gt;When a GPIO is configured in repeater mode, the pull-up is enabled when the pin 
is driven high, and the pull-down is enabled when the pin is driven low.  If 
nothing is driving the pin, the pull-enable will retain its last known 
state.  In some designs, this can prevent power from leaking on pins in an 
indeterminate state.&lt;/p&gt;

&lt;h4 id=&quot;hysteresis&quot;&gt;Hysteresis&lt;/h4&gt;

&lt;p&gt;Virtually all GPIO inputs use a principle called hysteresis to prevent spurious 
changes in state when an input value changes.  “Hysteresis is the dependence of a 
system on not only its current environment but also on its past” (read 
more).  Hysteresis is implemented on GPIO by setting two thresholds for a digital input 
which are V&lt;sub&gt;IH&lt;/sub&gt; and V&lt;sub&gt;IL&lt;/sub&gt; typically enumerated in the “Electrical Characteristics” 
section of microcontroller datasheets.  V&lt;sub&gt;IH&lt;/sub&gt; is the input-high voltage and 
represents the minimum voltage that must be applied to drive the pin 
high.  V&lt;sub&gt;IL&lt;/sub&gt; is the maximum input-low voltage needed to drive the pin 
low.  This means if the input voltage is greater than V&lt;sub&gt;IL&lt;/sub&gt; and less 
than V&lt;sub&gt;IH&lt;/sub&gt;, the value at the pin depends on whether the past input 
value was above V&lt;sub&gt;IH&lt;/sub&gt;, in which case the pin is high, or below V&lt;sub&gt;IL&lt;/sub&gt;, 
which means the pin is low.  The following graph illustrates the difference 
between no hysteresis (A) and hysteresis (B) for a given signal (U).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image_tall&quot; src=&quot;/images/smitt_hysteresis_graph.png&quot; /&gt;
Image from Wikipedia:  Schmitt Trigger&lt;/p&gt;

&lt;h3 id=&quot;output-modes&quot;&gt;Output Modes&lt;/h3&gt;

&lt;h4 id=&quot;push-pull&quot;&gt;Push-Pull&lt;/h4&gt;

&lt;p&gt;A push-pull output has the ability to both source and sink current.  TTL 
and CMOS logic circuits use push-pull outputs.  A CMOS push-pull topology 
is illustrated in the figure below.  The “C” in CMOS stands for complementary 
because M2 and M3 are complementary devices.  M2 is a PMOS device while M3 
is an NMOS device.  Because M2 and M3 have the same input signal, M3 is on 
whenever M2 is off and vice versa.  An open-drain output is also shown in the 
figure at the top of the page.&lt;/p&gt;

&lt;h4 id=&quot;open-drain&quot;&gt;Open-Drain&lt;/h4&gt;

&lt;p&gt;From the figure above, the namesake of “open-drain” is obvious to anyone who 
is familiar with MOSFETs.  A MOSFET has three terminals called:  gate, source, 
and drain.  In an open-drain configuration, the source is grounded, the gate 
is driven internally, and the drain is open (i.e. not connected to anything).&lt;/p&gt;

&lt;p&gt;An open-drain output can only sink current.  Its two states are low and 
high-impedance.    When M1 is on, the output is set to 0V.  When M1 is 
off, the output is not driven high nor low.  Most applications, including 
I2C buses, use an external pull-up resistor on any open-drain 
outputs.  Another useful application for open-drain outputs is having multiple 
external devices drive a single, active-low interrupt pin on a microcontroller.&lt;/p&gt;

&lt;h4 id=&quot;high-drive&quot;&gt;High Drive&lt;/h4&gt;

&lt;p&gt;High drive pins are push-pull pins that are capable of higher current.&lt;br /&gt;
A typical push-pull output is able to source/sink around +/-8ma where a 
high drive output can source up to +/-40ma.  The electrical characteristics 
specified in the datasheet enumerate the current capacity of each 
pin.  Understanding the current capabilities of pins is important to reducing 
circuit board costs and complexity.  If a microcontroller is capable of 
directly driving a motor or LED, there is no need to add external circuitry 
(such as a MOSFET).&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;GPIO is the simplest IO available on microcontrollers.  However, it is 
important to understand the intricacies of GPIO such as the input and 
output modes.  Understanding the capabilites of the GPIO can save cost and
complexity in an embedded design while boosting flexiblity.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Sensing the Source Current in an Embedded Application</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/19/Tips-Sensing-the-Source-Current-in-an-Embedded-Application"/>
   <updated>2013-10-19T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/19/Tips-Sensing-the-Source-Current-in-an-Embedded-Application</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/currentsense.png&quot; /&gt;
This is a simple, low-cost way to measure the current output at the power 
source of an embedded system using a microcontroller’s ADC input.&lt;/p&gt;

&lt;p&gt;The above sensor circuit measures the current at the power source of an embedded system.  The power source shown is a battery but can be any DC supply source.  The above schematic shows VCC as both the battery voltage and the op-amp voltage.  However, the battery voltage can be any value, and the circuit will still work.  The key components of the circuit are the sensor resistor (RSENSE) and the amplifier (U1).  The voltage input to U1 (the negative terminal of the battery) will always be a negative voltage with respect to ground.  For this reason, U1 is configured as an inverting amplifier where:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_equation&quot; src=&quot;/images/current-sense-formula1.svg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;analog-and-digital-filtering&quot;&gt;Analog and Digital Filtering&lt;/h2&gt;

&lt;p&gt;The output of the amplifier is then passed through a low pass filter (LPF) consisting 
of R3 and C1.  The filter has a cutoff frequency of:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_equation&quot; src=&quot;/images/current-sense-formula2.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The purpose of the filter is to decrease the amount of noise that is measured at 
the ADC input.  For best results, the microcontroller should sample the ADC input 
at double the cutoff frequency of the low pass filter (read more about the Nyquist 
frequency).  If the signal is still too noisy, digital filtering can be used to 
smooth it out after it is sampled.  An effective digital filter, that is 
easy-to-implement on resource constrained systems, is represented by the following 
equation which calculates an exponential moving average (this is a type of 
infinite impulse response, or IIR, LPF).  The “x” value is read from the 
microcontroller ADC, the “y” value is the average, and alpha is a constant 
between zero (infinite averaging) and one (no averaging).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_equation&quot; src=&quot;/images/filter-formula2.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following code implements the above equation using 32-bit fixed point math.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#define DSP_EMA_I32_ALPHA(x) ( (uint16_t)(x * 65535) )
 
int32_t dsp_ema_i32(int32_t in, int32_t average, uint16_t alpha){
  if ( alpha == 65535 ) return in;
  int64_t tmp0;
  tmp0 = (int64_t)in * (alpha+1) + average * (65536 - alpha);
  return (int32_t)((tmp0 + 32768) / 65536);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code below is an example of how to use the above function.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;int32_t my_avg_func(void){
     static int32_t average = 0;
     int32_t adc_value;    
     adc_value = read_the_current_sense_adc_value();
     average = dsp_ema_i32(adc_value, average, DSP_EMA_I32_ALPHA(0.1));
     return average;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For the sensing circuit to be useful, the output of the digital filter needs to be 
converted to amps (or milliamps).  The first step to do that is to convert the 
input of the ADC (ie the output of the digital filter) to voltage as shown in 
the following equation where X is the input value, VREF is the voltage reference 
for the ADC, and XMAX is the maximum ADC value:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_equation&quot; src=&quot;/images/current-sense-formula3.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next step is to find the value of the voltage at the negative battery 
terminal.  To do this, solve the amplifier voltage output equation for the 
input voltage, where the output voltage is the same value as VADC.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_equation&quot; src=&quot;/images/current-sense-formula4.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ohm’s law describes the current flow between GND and the negative terminal 
of the battery where VIN (input to the op-amp) is the voltage at the negative 
terminal of the battery:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_equation&quot; src=&quot;/images/current-sense-formula5.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Because the value of VIN is always less than zero, the final equation will 
give the positive number of amps flowing out of the positive terminal of the 
battery and in to the negative terminal.  This value can be converted to 
milliamps by multiplying by 1000.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Sensing current in embedded designs is a challenge.  This method uses a precision 
resistor and an operational amplifier at the power source.  This approach is 
inexpensive but slightly decreases the power efficiency of the system.  The current 
signal must be filtered before and after it is digitally sampled in order for the 
data to be useful.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>RAM/Flash Usage in Embedded C Programs</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/18/Tips-RAM-Flash-Usage-in-Embedded-C-Programs"/>
   <updated>2013-10-18T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/18/Tips-RAM-Flash-Usage-in-Embedded-C-Programs</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/flash-map.svg&quot; /&gt;
In embedded designs, memory, especially RAM, is a precious 
resource.  Understanding how C allocates variables in memory 
is crucial to getting the best use of memory in embedded systems.&lt;/p&gt;

&lt;p&gt;Memory in a C program includes code (executable instructions) and 
data.  Code is typically read-only and executable–characteristics 
enforced by the operating system (OS).  Data memory is 
non-executable (enforced by the OS), can be either read-only or 
read-write, and is either statically or dynamically allocated which 
characteristics are managed by the compiler.  In desktop programs, the 
entire memory map is managed through virtual memory using a hardware 
construct, called a Memory Management Unit (MMU), to map the 
program’s memory to physical RAM.  In RAM-constrained embedded systems 
lacking an MMU, the memory map is divided in to a section for flash 
memory (code and read-only data) and a section for RAM (read-write data).&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;span class=&quot;label label-danger&quot;&gt;Note&lt;/span&gt; This article 
talks about specifics of the C language implementation using GCC with 
the ARM Cortex-M3 architecture. Other implementations differ on 
specifics, but the basic concepts are the same.&lt;/div&gt;

&lt;h2 id=&quot;flash--code-and-read-only-memory&quot;&gt;Flash:  Code and Read-Only Memory&lt;/h2&gt;

&lt;p&gt;Code and read-only data are stored in flash memory.  The layout of a C program’s flash memory is shown in the diagram above.  The beginning of the program (the lowest memory location at the bottom of the diagram) is the text section which includes executable code.  This section also includes numerical values that are not assigned to any specific C variable called “literal values”.  The read-only data section follows the text section and is exclusively stored in flash memory (note this is only true for some embedded architectures, not all).  There is then a copy of the “data” section which contains the initial values of global and static variables.  This section is copied to RAM when the program starts up.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
const int read_only_variable = 2000;
int data_variable = 500;
 
void my_function(void){
     int x;
     x = 200;
     printf(&amp;quot;X is %d\n&amp;quot;, x);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above code, read_only_variable is stored in the read-only data section because it is preceded by the &lt;em&gt;const&lt;/em&gt; keyword. The compiler assigns &lt;em&gt;read_only_variable&lt;/em&gt; a specific address location (in flash) and writes the value of &lt;em&gt;2000&lt;/em&gt; to that memory location. When the variable &lt;em&gt;x&lt;/em&gt; within &lt;em&gt;my_function()&lt;/em&gt; is assigned the literal value &lt;em&gt;200&lt;/em&gt;, it references the value stored in a “literal pool” within the text section–at least this is true for the ARM Cortex M architecture; other architectures may take a different approach to literal values but the basic concept is the same.  Finally, a copy of the initial value, &lt;em&gt;500&lt;/em&gt;, assigned to &lt;em&gt;data_variable&lt;/em&gt; is stored in flash memory and copied to RAM when the program starts. When the program references &lt;em&gt;data_variable&lt;/em&gt;, it will refer to its location in RAM.&lt;/p&gt;

&lt;h2 id=&quot;ram--read-write-data&quot;&gt;RAM:  Read-Write Data&lt;/h2&gt;

&lt;p&gt;The following diagram shows the map of the RAM in a C program.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/ram-map.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The read-write data that is stored in RAM is further categorized as statically or dynamically allocated.&lt;/p&gt;

&lt;h2 id=&quot;statically-allocated&quot;&gt;Statically Allocated&lt;/h2&gt;

&lt;h4 id=&quot;data-vs-bss&quot;&gt;Data vs bss&lt;/h4&gt;

&lt;p&gt;Statically allocated memory means that the compiler determines the memory address of the variable at compile time.  Static data is divided in two sections:  data and bss (there is a wikipedia page dedicated to why it is called bss).  The difference is that data is assigned an intial, non-zero value when the program starts while all variables in the bss section are initialized to zero.  For clarification, see the below example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
 
//these variables are globally allocated
int data_var = 500;
int bss_var0;
int bss_var1 = 0;
 
void my_function(void){
     int uninitialized_var;
     printf(&amp;quot;data_var:%d, bss_var0:%d\n&amp;quot;, data_var, bss_var0);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When the C program starts, the C runtime (CRT) start function loads the memory location assigned to &lt;em&gt;data_var&lt;/em&gt; with &lt;em&gt;500&lt;/em&gt;.  This is typically accomplished by copying the value from flash to RAM; this implies that each byte of data will occupy one byte of flash and one byte of RAM.  The CRT start function then sets the memory locations for &lt;em&gt;bss_var0&lt;/em&gt; and &lt;em&gt;bss_var1&lt;/em&gt; to zero which does not require any space in flash memory.&lt;/p&gt;

&lt;h2 id=&quot;the-c-static-keyword&quot;&gt;The C static Keyword&lt;/h2&gt;

&lt;p&gt;Static memory should not be confused with the C keyword &lt;em&gt;static&lt;/em&gt;.  While all C &lt;em&gt;static&lt;/em&gt; variables are allocated as static memory, not all statically allocated memory is declared with &lt;em&gt;static&lt;/em&gt;.  Consider the code snippet:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
 
int global_var; //statically allocated as a global variable
static int static_var; //statically allocated but only accessible within file
 
void my_function(void){
     static int my_static = 0; //statically allocated, accessible within my_function
     int my_stack = 0; //allocated on the stack
 
     printf(&amp;quot;my_static:%d, my_stack:%d\n&amp;quot;, my_static, my_stack);
     my_stack++;
     my_static++;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above code, &lt;em&gt;global_var&lt;/em&gt; can be accessed by any file during the compilation process;  &lt;em&gt;static_var&lt;/em&gt; can only be accessed with functions that are in the same C file as the &lt;em&gt;static_var&lt;/em&gt; declaration.  The &lt;em&gt;my_static&lt;/em&gt; variable, declared as &lt;em&gt;static&lt;/em&gt; within a function, retains its value between successive calls to &lt;em&gt;my_function()&lt;/em&gt; while &lt;em&gt;my_stack&lt;/em&gt; does not.  The output of 5 successive calls to &lt;em&gt;my_function()&lt;/em&gt; is:&lt;/p&gt;

&lt;pre&gt;my_static:0, my_stack:0
my_static:1, my_stack:0
my_static:2, my_stack:0
my_static:3, my_stack:0
my_static:4, my_stack:0&lt;/pre&gt;

&lt;h2 id=&quot;dynamically-allocated&quot;&gt;Dynamically Allocated&lt;/h2&gt;

&lt;p&gt;While the compiler determines the memory address of static memory at compile time, the locations of dynamically allocted variables are determined while the program is running.  The two quintessential, dynamic memory structures in C are the heap and the stack.  The stack grows down (from higher memory address to lower ones) and the heap grows u If memory usage is ignored in the design, the stack and heap can collide causing one or both to become corrupted and result in a situation that can be difficult to debug.  The heap is managed by the programmer while the compiler takes care of the stack.&lt;/p&gt;

&lt;h2 id=&quot;the-heap&quot;&gt;The Heap&lt;/h2&gt;

&lt;p&gt;The beginning of the heap is just above the last bss variable (see diagram above preceding subsection).  The C standard library contains two function families for managing the heap:  &lt;em&gt;malloc()&lt;/em&gt; and &lt;em&gt;free()&lt;/em&gt;.  The following code snippet illustrates their usages:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
 
void my_func(void){
     char * buffer;
 
     buffer = malloc(512); //allocate 512 bytes for buffer on the heap
     if ( buffer == NULL ){
          perror(&amp;quot;Failed to allocate memory&amp;quot;);
          return;
     }
 
     //now buffer can be treated as if it were declared char buffer[512]
     memset(buffer, 0, 512); //zero out the buffer
     sprintf(buffer, &amp;quot;Buffer is at location 0x%lX\n&amp;quot;, buffer); //show buffers address
 
     free(buffer); //This frees 512 bytes to be used by another call to malloc()
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dynamically allocated memory is a convenient tool for application developers but must be used deliberately to minimize the effects of memory fragmentation.  The following code shows how &lt;em&gt;malloc()&lt;/em&gt; and &lt;em&gt;free()&lt;/em&gt; can result in fragmented memory:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
 
void my_fragmenting_function(void){
     char * my_buffers[3];
     int i;
     for(i=0; i &amp;lt; 3; i++){
          my_buffers[i] = malloc(128); //allocated 128 bytes (3 times)
     }
 
     free( buffer[1] );
 
     buffer[1] = malloc(256);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The example above allocates 128 bytes three times then frees the middle 128 bytes.  Since the freed bytes are essentially sandwiched by the other buffers, &lt;em&gt;malloc()&lt;/em&gt; can only use them again when allocating 128 bytes or less.  For the final call to allocate 256 bytes, the previously freed 128 bytes cannot be used.  Fragmentation problems can be largely avoided by careful use of &lt;em&gt;malloc()&lt;/em&gt; and &lt;em&gt;free()&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-stack&quot;&gt;The Stack&lt;/h2&gt;

&lt;p&gt;Variables that are declared within a function, known as local variables, are either allocated on the stack or simply assigned a register value.  Whether a variable is allocated on the stack or simply assigned to a register depends on many factors such as the compiler (including conventions associated with the architecture), the microcontroller architecture, as well as the number of variables already assigned to registers.  Consider the following code example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
 
int my_function(int a, int b, int c, int d){
     int x;
     register int y;
     char buf[64];
 
     sprintf(buf, &amp;quot;Test String\n&amp;quot;);
     x = a + b + c + strlen(buf);
     y = d*d;
     return x*y
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The paramaters &lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;, &lt;em&gt;c&lt;/em&gt;, and &lt;em&gt;d&lt;/em&gt; to &lt;em&gt;my_function()&lt;/em&gt; are stored in registers &lt;em&gt;r0&lt;/em&gt;, &lt;em&gt;r1&lt;/em&gt;, &lt;em&gt;r2&lt;/em&gt;, and &lt;em&gt;r3&lt;/em&gt;–this is true for the ARM Cortex-M but varies between architectures; though most use some number of registers for parameter passing and then pass additional parameters on the stack.  The &lt;em&gt;x&lt;/em&gt; variable in &lt;em&gt;my_function()&lt;/em&gt; is likely assigned to a register, but if no registers are available, it assigned a memory location on the stack.  The &lt;em&gt;y&lt;/em&gt; variable is treated similarly, but because it uses the register keyword, the compiler gives it preference over &lt;em&gt;x&lt;/em&gt; when allocating registers.  The &lt;em&gt;buf&lt;/em&gt; variable is allocated on the stack because it is 1) likely too large for register allocation and 2) it is an array, and many architectures have instructions that making working with arrays in memory (rather than registers) perform well.  Unlike global and static variables, local variables are only initializes when the program assigns a value to them.  For example, before the line &lt;em&gt;x = a + b + c + strlen(buf);&lt;/em&gt;, the value of &lt;em&gt;x&lt;/em&gt; is whatever the value the register or memory location had before this line was executed.  Therefore, local variables should never to used before they are assigned a value within the function.&lt;/p&gt;

&lt;h2 id=&quot;registers-vs-registers&quot;&gt;Registers vs Registers&lt;/h2&gt;

&lt;p&gt;It is important to make the distinction between the registers used with local variables and those used to configure the microcontroller features and peripherals.  Microcontroller datasheets and user manuals refer to “registers” that are used, for example, to turn the UART on and off and configure its baud rate.  These configuration”registers” are not the same as the ones mentioned above used with local function variables.  Configuration registers are accessed in the same way that RAM is; they are assigned a fixed location in the memory ma Normal registers (such as r0) are memory that is tightly integrated with the central processing logic of the microcontroller and an integral part of the instruction set.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In embedded systems, it is crucial to pay close attention to memory usage.  Having a sound understanding of how C allocates variables in RAM and flash both dynamically and statically is key to getting the most out of limited memory.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Motor Control using PWM and PID</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/15/Tips-Motor-Control-using-PWM-and-PID"/>
   <updated>2013-10-15T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/15/Tips-Motor-Control-using-PWM-and-PID</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/h-bridge.png&quot; /&gt;
Bi-directional motor control can be done using an H-bridge circuit 
with pulse-width modulation (PWM) from a microcontroller to vary 
the speed. Several design challenges include preventing shoot-through, implementing 
a snubber circuit, as well as open and closed loop (such as PID) control 
mechanisms.&lt;/p&gt;

&lt;h2 id=&quot;pwm-control-of-an-h-bridge&quot;&gt;PWM Control of an H-Bridge&lt;/h2&gt;

&lt;p&gt;An H-bridge circuit consists of four transistors (usually two PMOS’s and two NMOS’s).  To maximize efficiency, the transistors are driven at a higher voltage than the microcontroller.  A typical H-bridge circuit with logic scaling circuitry is shown above.&lt;/p&gt;

&lt;p&gt;Each side of the H-bridge has two transistors with the gates tied together resulting in complementary operation–Q3 is always off when Q1 is on and vice versa.  The same is true for Q2 and Q4.  The circuit works by setting PWMB to logic zero (Q2 on; Q4 off) and then setting PWMA to logic high (Q1 off; Q3 on).  The motor direction can be reversed by toggling PWMA and PWMB.&lt;/p&gt;

&lt;p&gt;PWM is a simple way to vary the voltage applied to the motor. Most microcontrollers have dedicated PWM hardware, but an output compare timer can also generate a PWM signal.  PWM works by rapidly turning the motor on and off. For example, if the motor supply is 12V, the motor can be driven at 6V by applying a 50% duty cycle where half the time 12V is applied, and half the time 0V is applied as shown by the green signal in the plot below.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/pwm-plot.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While using PWM is simple, it introduces a problem called shoot-through which occurs when current flows directly from the power supply to ground when the transistors are being switched.  For example, when the PWMA input signal switches from high to low, Q1 turns on and Q3 turns off.  For a brief period of time, both Q1 and Q3 are partially on allowing current to flow from the supply to ground.  This causes efficiency to plummet and introduces heating problems in the transistors.  To overcome this problem additional circuitry must be added to ensure Q3 turns completely off before Q1 starts to turn on.&lt;/p&gt;

&lt;h3 id=&quot;preventing-shoot-through&quot;&gt;Preventing Shoot-through&lt;/h3&gt;

&lt;p&gt;The easiest way to implement a shoot-through prevention circuit is to use an integrated circuit (IC) that has shoot-through protection built-in.  The Si9986 IC from Vishay is an H-bridge motor driver circuit with built-in shoot-through protection as well as logic translation circuitry (Q5A and Q5B in the diagram above).  It is a great solution for controlling a small DC motor using a PWM signal from a microcontroller.  When using the Si9986, as with using any motor driver, a snubber circuit is required to reduce electromagnetic noise in the system.&lt;/p&gt;

&lt;h3 id=&quot;a-snubber-circuit-to-decrease-noise&quot;&gt;A Snubber Circuit to Decrease Noise&lt;/h3&gt;

&lt;p&gt;A snubber circuit is used to suppress the voltage transients caused by PWM switching (as well as by the inherent switching in brushed motors).  A DC motor is an inductive load; the voltage across which is proportional to the change in current, given by:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_equation&quot; src=&quot;/images/inductor-voltage-formula.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the PWM signal switches the motor from on to off, there is a rapid change 
in current (ie di/dt is large) which causes a voltage spike.  Without a snubber 
circuit, the energy from the voltage spike can result in arcing, damage to the 
body diode in the H-bridge transistors, or cause electromagnetic interference 
in nearby circuitry.  The snubber circuit safely dissipates the energy in 
passive elements.  A simple, effective snubber circuit consists of a resistor 
and capacitor in series across the terminals of the motor as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/motorsnubber.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pid-control&quot;&gt;PID Control&lt;/h3&gt;

&lt;p&gt;With an H-bridge, a pair of PWM signals, and a snubber circuit, the motor is ready for bi-directional control.  The simplest form of control is open loo This means the controller simply applies a voltage (a PWM signal in this case) but has no way to measure the effect of the applied voltage.  The controller simply assumes higher voltage makes the motor go faster.  Closed loop control uses feedback from the motor, such as the motor current or speed, to adjust the PWM signal.&lt;/p&gt;

&lt;p&gt;A PID loop–verbosely known as proportional, integral, differential loop–is a popular algorithm in many closed loop systems.&lt;/p&gt;

&lt;h3 id=&quot;pid-loop&quot;&gt;PID loop&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/pid_en.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Image from Wikipedia&lt;/p&gt;

&lt;p&gt;The diagram above represents a PID controlled process.  In this case, the “process” or “plant” is the motor.  The feedback mechanism–y(t) called the process variable–can be either the motor current or speed.  The set point, u(t), is the desired current or speed.  The PID loop takes the difference (or error), e(t), between the set point and the process variable, applies namesake adjustments–proportional, integral, as well as differential–and then sums the result to get the new value of the manipulated variable (the PWM duty cycle).&lt;/p&gt;

&lt;p&gt;The following code is a PID loop implementation using floating point variables.  The structure (pid_f_t) is first initialized using pid_init_f() with the minimum and maximum values for the manipulated variable accepted as parameters.  The minimum is useful if the motor requires some minimum PWM duty cycle to make it turn while the maximum ensures the PID algorithm does not try to exceed 100% duty cycle.  The pid_update_f() function uses the current set point and the process variable as well as the constants stored in the pid_f_t structure to compute the manipulated variable.  The application loop includes a function to measure the motor current or speed, call pid_update_f(), and set the PWM value according to the manipulated variable.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;typedef struct{
  float max /*! Max manipulated value */;
  float min /*! Miniumum manipulated value */;
  float e /*! Error value */;
  float i /*! Integrator value */;
  float kp /*! Proportional constant */;
  float ki /*! Integrator constant */;
  float kd /*! Differential constant */;
} pid_f_t;
 
/*! \details This function initializes the data in a PID structure.
 *
 */
void pid_init_f(pid_f_t * ptr /*! A pointer to the PID data structure */,
    float min /*! The manipulated variable&amp;#39;s minimum value */,
    float max /*! The manipulated variable&amp;#39;s maximum value */){
  memset(ptr, 0, sizeof(pid_f_t));
  ptr-&amp;gt;min = min;
  ptr-&amp;gt;max = max;
}
 
/*! \details This function updates the value of the manipulated variable (MV)
 * based on the current state of the PID loop.
 */
float pid_update_f(float sp /*! The set point */,
    float pv /*! The process variable */,
    pid_f_t * ptr /*! A pointer to the PID constants */){
  float temp;
  float e;
  float p;
  float manp;
  float tmpi;
  e = ptr-&amp;gt;e;
  ptr-&amp;gt;e = sp - pv;
  tmpi = ptr-&amp;gt;i + ptr-&amp;gt;e;
  //bound the integral
  manp = ptr-&amp;gt;kp * ptr-&amp;gt;e + ptr-&amp;gt;ki * tmpi + ptr-&amp;gt;kd * (e - ptr-&amp;gt;e);
  if ( (manp &amp;lt; ptr-&amp;gt;max) &amp;amp;amp;&amp;amp;amp; (manp &amp;gt; ptr-&amp;gt;min) ){
    ptr-&amp;gt;i = tmpi;
  } else if ( manp &amp;gt; ptr-&amp;gt;max ){
    manp = ptr-&amp;gt;max;
  } else if ( manp &amp;lt; ptr-&amp;gt;min ){
    manp = ptr-&amp;gt;min;
  }
  return manp;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is important to properly apply the manipulated variable to the process.  In the H-bridge shown above, Q5 inverts the PWM signal which means the software needs to invert the PWM value before applying it.  Also while switching Q2 and Q4, the states of Q1 and Q3 determine the motor direction; this affects how the sign of the manipulated variable is interpreted.  These nuances in the circuit can make debugging a PID loop tricky but can be overcome with sound analysis as well as trial and error.&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;Here is an example circuit and code using the Laertes Lite Microcomputer running CoActionOS, a 12V DC motor connected to a rotary encoder, and the Si9986 H-Bridge driver chiThe image below shows the breadboard setup.&lt;/p&gt;

&lt;h4 id=&quot;hardware-setup&quot;&gt;Hardware Setup&lt;/h4&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/motordemo.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The parts include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.coactionos.com/getting-started/33-getting-started-123/89-buy-the-hardware-details.html&quot;&gt;CoAction Hero Microcomputer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SMT to DIP Adapter and Si89986 H-Bridge PWM Driver&lt;/li&gt;
  &lt;li&gt;Generic 12V DC Brushed Motor&lt;/li&gt;
  &lt;li&gt;Rotary Motor Encoder (200 counts per revolution from Sparkfun Electronics)&lt;/li&gt;
  &lt;li&gt;10K Potentiometer (used for user input)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following drawing shows the specific connections. The user input (to set the speed) consists of a potentiometer wiper connected to P0.2 (ADC Channel 7). The rotary encoder is connected to P1.26 which also serves as a clock input for timer zero. Finally, 2.3 and 2.4 are PWM outputs connected to the input of the Si9986 H-bridge driver. For more details, please see the “CoAction Hero Microcomputer”:http://www.coactionos.com/getting-started/33-getting-started-123/89-buy-the-hardware-details.html page where the schematic and datasheet are available.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/motordemo-drawing.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;source-code&quot;&gt;Source Code&lt;/h3&gt;

&lt;p&gt;The source code uses a PID loop to control the motor speed. First, it reads the ADC to calculate a speed setting from 1500RPM to 10,000RPM which is set by the user using the potentiometer. After the ADC is sampled, it is filtered using an exponential moving average, low-pass filter. This prevents noise on the ADC from causing changes to the speed setting. The code then calculates the motor speed in revolutions per minute. It measures the rising edges of the rotary encoder (200 counts per revolution) using the timer clock input. It then uses the POSIX function (provided by CoActionOS) clock_gettime() to calculate the change in time since the last measurement. The current speed is then the change in number of revolutions divided by the change in time. The current speed and the set point speed are then passed to the PID calculation which returns the duty cycle which is applied to the PWM output.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;applib/pwm.h&amp;gt;
#include &amp;lt;applib/tmr.h&amp;gt;
#include &amp;lt;applib/adc.h&amp;gt;
#include &amp;lt;time.h&amp;gt;
#include &amp;lt;dsp.h&amp;gt;
#include &amp;lt;pid.h&amp;gt;
 
#define TMR_PORT 0 //Timer port used to capture encoder data
#define ADC_PORT 0 //ADC port for getting user input
#define ADC_INPUT_CHAN (7) //ADC channel for user input
#define PWM_PORT 1 //PWM port for Si9986
#define PWM_CHAN_HIGH (PWM_CHANNEL5)
#define PWM_CHAN_LOW (PWM_CHANNEL4)
#define PWM_FREQ (1000000)  //PWM clock frequency
#define PWM_TOP 1000 //Top value for PWM clock
#define PWM_PERIOD (PWM_TOP*1000/PWM_FREQ) //Period in ms
 
static int init(void); //initilize timer, PWM and ADC
static int init_tmr(void);
static int init_pwm(void);
static int init_adc(void);
 
//Set the output duty cycle
static void set_duty(int duty);
 
int main(int argc, char * argv[]){
  pwm_reqattr_t req;
  int i;
 
  //These are for sampling the ADC (user input)
  adc_sample_t samp;
  int32_t samp_avg;
  uint16_t alpha;
  uint32_t set_speed;
 
  //This is for measuring the motor speed
  uint32_t delta_ms; //elapsed time in milliseconds
  uint32_t last_ms;
  uint32_t now_ms;
  uint32_t ref_ms;
  struct timespec now;
  uint32_t current_pos; //current position
  uint32_t last_pos; //position from last measurement
  uint32_t delta_pos;
  uint32_t speed;
 
  //PID variables
  pid_i32_t pid;
  uint32_t duty;
 
  if( init() &amp;lt; 0 ){
                //exit unsuccessfully if any hardware failed to initialize
    exit(1);
  }
 
  //Initialize the ADC averaging (EMA filter)
  alpha = DSP_EMA_I32_ALPHA(0.1);
  adc_read(ADC_PORT, ADC_INPUT_CHAN, &amp;amp;samp, sizeof(adc_sample_t));
  samp_avg = samp;
 
  //Since there is no initial measurement, the first speed will be bogus
  last_ms = 0;
 
  //initialize the PID
  pid_init_i32(&amp;amp;pid, 200, 900); //Bound the duty between 20% and 90%
  pid_setconstants_i32(&amp;amp;pid,
                        //These constants take some tweaking to get everything to work smoothly
      PID_I32_CONSTANT(0.05), //P constant
      PID_I32_CONSTANT(0.01), //I constant
      PID_I32_CONSTANT(0.0001)  //D constant
      );
 
  usleep(50*1000);
  set_duty(0);
 
  //Get the initial time so that the program start time is close to zero in the output data
  clock_gettime(CLOCK_REALTIME, &amp;amp;now);
  ref_ms = (now.tv_sec * 1000 + (now.tv_nsec + 500000) / 1000000); //convert to milliseconds
 
  i = 0;
  while(1){
    //Read and averge the ADC to get the set point
    adc_read(ADC_PORT, ADC_INPUT_CHAN, &amp;amp;samp, sizeof(adc_sample_t));
    samp_avg = dsp_ema_i32(samp, samp_avg, alpha);
    set_speed = samp_avg * 8500 / ADC_MAX + 1500;
 
    //Now measure the position and calculate the speed (pos/time)
    clock_gettime(CLOCK_REALTIME, &amp;amp;now);
    now_ms = (now.tv_sec * 1000 + (now.tv_nsec + 500000) / 1000000); //convert to milliseconds
    delta_ms = now_ms - last_ms;
    last_ms = now_ms;
 
 
    current_pos = tmr_get(TMR_PORT);
    delta_pos = current_pos - last_pos;
    //calculate in RPM (1000*60 ms in a min and 200 counts per revolution)
    speed = (delta_pos*(1000*60/200))/(delta_ms);
    last_pos = current_pos;
 
    //Calculate the new duty cycle
    duty = pid_update_i32(set_speed, speed, &amp;amp;pid);
    set_duty(duty);
 
    //Display the data and wait for the next update
    if ( i++ &amp;gt; 0 ){ //first sample is garbage because the delta values are invalid
      printf(&amp;quot;%d %d %d %d;\n&amp;quot;, now_ms - ref_ms, set_speed, speed, duty);
    }
    usleep(25*1000); //update every 25 ms
  }
 
  return 0;
}
 
int init(void){
        if( init_tmr() &amp;lt; 0 ){ return -1; }
  if( init_adc() &amp;lt; 0 ){ return -1; }
  if( init_pwm() &amp;lt; 0 ){ return -1; }
  return 0;
}
 
int init_tmr(void){
  tmr_attr_t attr;
 
  //Open the timer port
  if( tmr_open(TMR_PORT) &amp;lt; 0 ){
    perror(&amp;quot;failed to open tmr&amp;quot;);
    return -1;
  }
 
  //We are using Capture 0 on timer 0 (CAP0. -- count rising edges
  attr.clksrc = TMR_CLKSRC_IC0 | TMR_CLKSRC_EDGERISING;
  attr.freq = 0; //this is not used with input capture counting
  attr.enabled_ic_chans = 0; //not used
  attr.enabled_oc_chans = 0; //not used
  attr.pin_assign = 0; //From the datasheet, this pin is using TMR1(0) where 0 is the pin assignment
  if( tmr_setattr(TMR_PORT, &amp;amp;attr) &amp;lt; 0 ){
    perror(&amp;quot;failed to setattr tmr&amp;quot;);
    return -1;
  }
 
  //Turn the timer on (start counting edges)
  if ( tmr_on(TMR_PORT) &amp;lt; 0 ){
    perror(&amp;quot;failed to turn tmr on&amp;quot;);
  }
 
  return 0;
}
 
int init_pwm(void){
  pwm_attr_t attr;
  pwm_reqattr_t req;
 
  //Open the PWM port
  if( pwm_open(PWM_PORT) &amp;lt; 0 ){
    perror(&amp;quot;failed to open pwm&amp;quot;);
    return -1;
  }
 
  //Set the PWM attributes
  attr.enabled_channels = (1&amp;lt;&amp;lt;PWM_CHAN_HIGH)|(1&amp;lt;&amp;lt;PWM_CHAN_LOW);
  attr.freq = PWM_FREQ;
  attr.top = PWM_TOP;
  attr.pin_assign = 1; //Using PWM1(1) from the datasheet the (1) means pin assignment 1
  if( pwm_setattr(PWM_PORT, &amp;amp;attr) &amp;lt; 0 ){
    perror(&amp;quot;failed to setattr pwm&amp;quot;);
  }
 
  //Allow the PWM clock time to initialize
  usleep(100*1000);
 
  //Set both PWM outputs to Zero
  req.channel = PWM_CHAN_HIGH;
  req.duty = 0;
  if( pwm_set(PWM_PORT, &amp;amp;req) &amp;lt; 0 ){
    perror(&amp;quot;failed to set high duty&amp;quot;);
  }
 
  req.channel = PWM_CHAN_LOW;
  if( pwm_set(PWM_PORT, &amp;amp;req) &amp;lt; 0 ){
    perror(&amp;quot;failed to set low duty&amp;quot;);
  }
 
  return 0;
}
 
int init_adc(void){
  adc_attr_t attr;
 
  //Open the ADC port
  if( adc_open(ADC_PORT) &amp;lt; 0){
    perror(&amp;quot;failed to open adc&amp;quot;);
    return -1;
  }
 
  //Set the ADC attributes
  attr.enabled_channels = (1&amp;lt;&amp;lt;ADC_INPUT_CHAN);
  attr.freq = ADC_MAX_FREQ;
  attr.pin_assign = 0;
  if( adc_setattr(ADC_PORT, &amp;amp;attr) &amp;lt; 0 ){
    perror(&amp;quot;failed to setattr for adc&amp;quot;);
    return -1;
  }
 
  return 0;
}
 
void set_duty(int duty){
  pwm_reqattr_t req;
  if( duty == 0 ){
    //This turns on the brake -- both outputs low
    req.duty = duty;
    req.channel = PWM_CHAN_HIGH;
    pwm_set(PWM_PORT, &amp;amp;req);
    req.channel = PWM_CHAN_LOW;
    pwm_set(PWM_PORT, &amp;amp;req);
  } else {
    //This runs in run mode -- one output is switching the other is high
    req.duty = PWM_TOP - duty;
    req.channel = PWM_CHAN_HIGH;
    pwm_set(PWM_PORT, &amp;amp;req);
    req.duty = PWM_TOP;
    req.channel = PWM_CHAN_LOW;
    pwm_set(PWM_PORT, &amp;amp;req);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;results&quot;&gt;Results&lt;/h3&gt;

&lt;p&gt;To see how the well the code works, the output is plotted against time using the following MATLAB (or octave) script.&lt;/p&gt;

&lt;pre&gt;
output = load(&quot;log.txt&quot;);
plot(output);
xmin = min( output(:,1) );
xmax = max( output(:,1) );
ymax = 10000;
plot(output(:,1), output(:,2), output(:,1), output(:,3), output(:,1), output(:,4) );
xlabel(&quot;Time (ms)&quot;);
ylabel(&quot;Speed&quot;);
axis([xmin xmax 0 ymax]);
legend(&quot;Set Point&quot;, &quot;Speed&quot;, &quot;Duty*1000&quot;);
print(&quot;output.png&quot;, &quot;-dpng&quot;);
&lt;/pre&gt;

&lt;p&gt;The following shows the motor speed, duty cycle (per one thousand), and the actual speed.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/motordemoplot.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To get the above performance, the PID constants required tweaking. The approach was to set the I and D values to zero and monitor the performance by changing the P value. Once a stable P value was found, the I value was adjusted to find a good trade-off between accuracy and stability. Finally, the D constant–the least significant in this application–was set.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Precision, bi-directional motor control is achievable in embedded designs using an H-bridge driver, circuitry to sense feedback from the motor, and a PID algorithm.  It is important to have a well designed H-bridge that prevents shoot-through and suppresses electomagnetic interference with a snubber circuit.  The sensing feedback can come in the form of speed (using encoders) or current; though, the best results will be achieved using an encoder.  Finally, the PID algorithm can be tuned to ensure the control algorithm meets the application’s requirements.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>How Microcontrollers Work</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/14/Tips-How-Microcontrollers-Work"/>
   <updated>2013-10-14T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/14/Tips-How-Microcontrollers-Work</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;post_image_tall&quot; src=&quot;/images/sili-atom.svg&quot; /&gt;
Microcontrollers are small computers that contain a central processor, memory, 
and input/output circuitry all on one integrated chiComputers in general 
contain all these components with varying degrees of integration. Most people 
are familiar with the CPU acronym which refers to the central processing 
unit. The core of a microcontroller is also a central processing unit and is 
also the focus of this article.&lt;/p&gt;

&lt;p&gt;Microcontroller processors are built on a silicon base. The silicon has 
extra elements added in a controlled manner to create millions of semiconductor 
devices on a small piece of silicon. The devices are arranged and connected–basically 
with tiny integrated wires–to form logic gate circuits that use boolean algebra 
to perform mathematical operations such as addition, subtraction, et cetera. This 
type of logic is called combinational logic. The semiconductor devices are also 
arranged to form memory (such as RAM) using sequential logic. These logical 
building blocks are used by microcontroller designers to create the various 
parts of a microcontroller CPU such as the arithmetic logic unit (ALU), CPU 
registers, buses, and memory.&lt;/p&gt;

&lt;p&gt;From the atomic level to the CPU architecture, here is an overview of how 
microcontrollers work:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Semiconductor Physics: silicon is doped to create semiconductor properties&lt;/li&gt;
  &lt;li&gt;Transistors: semiconductor material is arranged for form transistors&lt;/li&gt;
  &lt;li&gt;CMOS: transistors come together to form circuits that perform boolean algebra&lt;/li&gt;
  &lt;li&gt;Logic: both combinational and sequential logic used to form the major building blocks of a CPU&lt;/li&gt;
  &lt;li&gt;Microcontroller Architecture: digital logic circuitry comes together to execute instructions&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;semiconductor-physics&quot;&gt;Semiconductor Physics&lt;/h2&gt;

&lt;p&gt;Modern semiconductors are made primarily from silicon. Silicon, per se, does 
not conduct electricity; however when impurities are introduced, silicon 
semi-conducts electricity. To understand how silicon is transformed from a 
non-conductor to a semi-conductor, it is important to be familiar with the 
Lewis octet rule.&lt;/p&gt;

&lt;p&gt;The Lewis octet rule is a rule of thumb in chemistry that says atoms with a 
low number of electrons (low atomic number) tend to bond with other atoms in 
such a way to produce eight valence electrons. A valence electron is one in 
the outer regions of the atom that is used to bond with other atoms. A single 
silicon atom has four valence electrons (as shown in the image at the top of the page).&lt;/p&gt;

&lt;p&gt;When silicon atoms are around other silicon atoms, they share valence electrons 
such that each has eight–thus fulfilling the Lewis octet rule. The following 
diagram illustrates this in two dimensions, but in real life, the bonding happens 
in three dimensions.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/sili-atom-group.svg&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;span class=&quot;label label-danger&quot;&gt;Note&lt;/span&gt;  This model
inspired the CoActionOS logo.  The symbol inside the gear is a silicon atom.&lt;/div&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;span class=&quot;label label-danger&quot;&gt;Note&lt;/span&gt; The 
center atom has four valence electrons of its own and shares one from each of 
four surrounding atoms.&lt;/div&gt;

&lt;p&gt;With pure silicon, the Lewis octet rule holds up nicely. When impurities are 
introduced, instead of four valence electrons, there might be only three 
valence electrons on some atoms; this is the case when Boron is added. Other 
impurities, such as nitrogen add an additional electron.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;span class=&quot;label label-danger&quot;&gt;Note&lt;/span&gt; When a 
material has extra valence electrons, it is more negative and called N-type.&lt;/div&gt;

&lt;p&gt;A material that has fewer valence electrons is more positive and called P-type.&lt;/p&gt;

&lt;p&gt;With extra electrons bouncing around, current is able to flow through the material 
when a potential is applied. In the diagram below, new electrons are injected from 
the “-“ site while being attracted to the “+” site. The extra electrons provided by 
the nitrogen atoms allow the electrons to flow across the material.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/sili-nit-group.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Silicon can also be doped with Boron. Instead of having extra electrons, it 
has “holes” (less than eight valence electrons). These holes provide a place 
for electrons to jump across when a voltage is applied. The resulting 
material (Silicon doped with Boron) also conducts current.&lt;/p&gt;

&lt;p&gt;Thus far, the materials mentioned are still conductors rather then 
semiconductors. It is only when the above materials are combined do they 
become semiconductors.&lt;/p&gt;

&lt;h2 id=&quot;diodes-the-pn-junction&quot;&gt;Diodes, the PN Junction&lt;/h2&gt;

&lt;p&gt;The diode is the most basic semiconductor device. It permits current to flow 
in one direction and prevents it from flowing in the opposite direction. It 
essentially acts as a one way valve. A diode is created by juxtaposing a P-type 
material and an N-type material (known as the PN junction). The diagram below 
shows a PN junction with N-type doping on the left using Nitrogen and P-type 
doping on the right using Boron. The red electrons represent the extra valence 
electrons provided by the Nitrogen atoms, and the empty electrons represent 
the “holes” introduced by the Boron atoms.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/p-n-junction.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When a positive voltage is applied to the P-type side of a PN junction, current 
flows. The extra electrons on the N-type side are pulled over to the P-type side 
while the negative potential injects electrons.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;span class=&quot;label label-danger&quot;&gt;Note&lt;/span&gt; Current 
flows from positive to negative, but electrons flow from 
negative to positive because electrons have a negative charge value.&lt;/div&gt;

&lt;p&gt;The diagram below illustrates how electrons are pulled across a PN junction.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/pn-junction-flow.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the voltage potential is reversed, current does not flow across the junction. All the electrons on the N-type side are pulled to the positive potential, and the electrons injected in the P-type side fill the existing holes. However, the electrons that occupy the holes are unable to flow across the N-type side because the positive potential has effectively removed the doping leaving the equivalent of pure, non-conducting Silicon.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/pn-junction-noflow.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The diode is the most basic semiconductor device. However, it is not the main building block of microcontrollers. This designation belongs to the transistor.&lt;/p&gt;

&lt;h2 id=&quot;field-effect-transistors-fets&quot;&gt;Field Effect Transistors (FETs)&lt;/h2&gt;

&lt;p&gt;The first widely-used transistors were the bi-polar junction transistors (BJTs). They are created by using an additional doping material with the PN junction resulting in either an NPN or PNP transistor. However, BJTs are better at amplification than switching. The second widely used transistors were the Field effect transistors (FETs). FETs are typically “on” or “off” and rarely operate in the linear region between these states making them well-suited as tiny switches.&lt;/p&gt;

&lt;p&gt;FETs also use N-type and P-type materials but they are arranged distinctly. The metal-oxide-semiconductor FET (MOSFET) was the first FET and one of the most common in use today. The diagram below shows the anatomy of an N-channel MOSFET (or NMOS).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/nmos.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The NMOS consists of a P-type substrate with two N-type regions connected to the source and drain. The gate is connected to the substrate through an insulating oxide layer (electrically it acts as a capacitor). The gate is used to control whether the switch is on or off. When the gate-source voltage is 0V, the substrate acts like two diodes that are butted together in opposite directions preventing current flow in both directions. When the gate-source voltage is above a threshold, the positive charge on the gate pushes away the positively charged “holes” in the P-type region and attracts negatively charged electrons creating a depletion layer that is effectively a channel of N-type material (hence the name N-channel).&lt;/p&gt;

&lt;p&gt;A P-channel MOSFET (PMOS) has the same structure but uses an N-type material for the substrate and P-type for the drain and source connections. Also the gate-source voltage must be below a certain (negative) threshold to turn on.&lt;/p&gt;

&lt;p&gt;In practice, the source of an NMOS is almost always connected to ground while the source of a PMOS is mostly connected to VDD. This is especially true in single supply systems. This configuration makes it easy to apply a positive voltage to the NMOS gate and a negative voltage to the PMOS gate (both voltages being with respect to the source). The diagram below shows simplified schematic symbols for NMOS and PMOS transistors. Though the the symbols have horizontal symmetry, the conventional wisdom mentioned above holds true for subsequent illustrations meaning NMOS source is down (ground) and PMOS source is up (VDD).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/mosfet-symbols.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;NMOS and PMOS transistors work complementary to form what is called CMOS logic–the C signifies complementary.&lt;/p&gt;

&lt;h2 id=&quot;cmos&quot;&gt;CMOS&lt;/h2&gt;

&lt;p&gt;CMOS stands for complementary metal-oxide-semiconductor and is the result of using NMOS and PMOS transistors together to create logic gates. To grasp the importance of CMOS logic, understanding boolean algebra is crucial.&lt;/p&gt;

&lt;h2 id=&quot;boolean-algebra&quot;&gt;Boolean Algebra&lt;/h2&gt;

&lt;p&gt;Boolean algebra is named after George Boole who published a book called An Investigation of the 
Laws of Thought in 1854. In this book, he defined an algebraic system based on the values of 0 
and 1. The operations defined are distinct to decimal number operations such as plus and minus 
as well as multiply and divide. Nonetheless, these boolean operations are the building blocks 
for implementing traditional algebraic operations using CMOS circuitry.&lt;/p&gt;

&lt;p&gt;The basic boolean operators are NOT, AND, and OR. While AND as well as OR have two or more 
inputs, NOT operates on a single input value. Boolean operations are typically expressed 
using a truth table (a table of inputs and outputs). Here is the truth table for x NOT equals z.&lt;/p&gt;

&lt;table class=&quot;table table-striped table-bordered center&quot;&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;z&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The following truth table expresses x AND y is z.&lt;/p&gt;

&lt;table class=&quot;table table-striped table-bordered center&quot;&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;y&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;z&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;This table is x OR y equals z.&lt;/p&gt;

&lt;table class=&quot;table table-striped table-bordered center&quot;&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;y&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;z&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;These operations can also be combined. NOR is a combination of NOT and OR where NOT is applied to the output of OR. Additionally, NAND is NOT applied to the output of AND. These combinations are important for building CMOS circuitry of these operations. To start building these operators with CMOS circuitry, the CMOS inverter performs the NOT operation.&lt;/p&gt;

&lt;h2 id=&quot;cmos-inverter&quot;&gt;CMOS Inverter&lt;/h2&gt;

&lt;p&gt;The diagram below shows a CMOS inverter which is the CMOS implementation of the boolean NOT operation–the circuit is also known as a NOT gate. The transistor on the VDD side is a PMOS while the one connected to ground is an NMOS. The drains of the PMOS and NMOS are connected at the voltage output. The gates are also connected at the voltage input.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image_tall&quot; src=&quot;/images/cmos-inverter.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the voltage input is zero volts, the output voltage is VDD (henceforth called logic zero and logic one respectively). With zero input voltage, the gate-source voltage of the PMOS is -VDD. This causes the PMOS to conduct current. Effectively, the output is shorted to VDD. In this state, the gate-source voltage on the NMOS is zero volts keeping the NMOS off.&lt;/p&gt;

&lt;p&gt;Conversely, when the voltage input is VDD, the output is logic zero. In this state, the NMOS is on, and the PMOS is off. Each input scenario is shown in the diagram below.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image_tall&quot; src=&quot;/images/cmos-inverter-on-off.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By adding two more complementary transistors, other gates are created.&lt;/p&gt;

&lt;h2 id=&quot;and-gate&quot;&gt;AND Gate&lt;/h2&gt;

&lt;p&gt;An AND gate is built using a NAND gate and an inverter. The NAND gate is shown in the following diagram.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/cmos-nand.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The NAND gate above is built with two NMOS and two PMOS transistors. The transistors are arranged in a complementary–there’s the C word again–configuration with the PMOSs in parallel and the NMOSs in series. To round out the AND gate, the output of the NAND gate is put through a NOT gate (CMOS inverter) to yield the AND truth table.&lt;/p&gt;

&lt;h2 id=&quot;or&quot;&gt;OR&lt;/h2&gt;

&lt;p&gt;OR is implemented similarly to AND. First, a NOR gate is used (shown below) which output is sent through an inverter (not shown). The NOR gate uses two NMOS transistor in parallel with two PMOS transistors in series–again using a complementary configuration.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/cmos-nor.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With just these three gates, many other logic gates, as well as more advanced digital circuitry, can be built.&lt;/p&gt;

&lt;h2 id=&quot;logic&quot;&gt;Logic&lt;/h2&gt;

&lt;p&gt;There are two fundamental types of logic used in microcontrollers: combinational and sequential. The output of combinational logic depends only on the current inputs much like the AND, OR and NOT gates previously discussed. Sequential logic depends both on the current inputs as well as the previous inputs and is the basis for forming memory circuits.&lt;/p&gt;

&lt;h2 id=&quot;combinational-logic&quot;&gt;Combinational Logic&lt;/h2&gt;

&lt;p&gt;Microcontrollers process data by performing mathematical operations. These operations are defined by the instruction set and are performed using circuitry especially designed to add, subtract, multiply, et cetera. The digital circuitry used in these operations is built using logic gates such as AND, OR, and NOT discussed previously in the CMOS section as well as additional gates (which can be built using these gates) including NAND, NOR, XOR, and XNOR.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/logic-gate-legend.svg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;adder-circuit&quot;&gt;Adder Circuit&lt;/h2&gt;

&lt;p&gt;A binary adder has two inputs and two outputs. The inputs are the bits being added. The outputs are the sum and the carry value. Adding two binary numbers can yield four results: 0 and 1 with and without a carry. The carry bit is added to the next digit of the binary number meaning that the next addition will include three inputs: the bits to be added and the carry from the previous bit.&lt;/p&gt;

&lt;table class=&quot;table table-striped table-bordered center&quot;&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;c (in)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;a&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;b&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;c (out)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;s&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The top half of the above truth table (where the carry is zero) is called a half adder circuit. The sum is a XOR b and the carry is a AND b. The entire table (known as a full adder) is represented by the equations below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;s = (a XOR b) XOR cin&lt;/li&gt;
  &lt;li&gt;cout = (a AND b) OR ((a XOR b) AND cin)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These equations are calculated using the following circuit.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/adder.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above circuit adds just one bit to another bit. Most microcontrollers have 8, 16 or 32 bit architectures, which means they respectively add 8, 16, or 32 bits at one time. This is done by cascading the adder circuit above. A four-bit adder looks like the following circuit.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/four-bit-adder.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The circuit above (expanded to 8, 16, or 32 bits) is used when the microcontroller executes an “add” instruction. Every microcontroller has an instruction set which defines which circuitry is available. Most can add, subtract, invert, shift, rotate, and complement. Some can multiply, and a few can divide. All the operations are performed using sequential logic gates using the design approach illustrated for the adder circuit starting with CMOS transistors to form logic gates. Before an operation (such as addition) starts, it needs to be loaded from memory. Likewise once an operation completes, the result is stored in memory. Combinational logic cannot store information but sequential logic can.&lt;/p&gt;

&lt;h2 id=&quot;sequential-logic&quot;&gt;Sequential Logic&lt;/h2&gt;

&lt;p&gt;While combination logic provides a given output for a given input, sequential logic takes both current and past input values into account when generating an output. The most basic sequential logic circuit is the SR-latch. It stores one bit of data. The circuit below shows how two NOR gates can be used for form an SR latch.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/sr-flip-flop.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Q is the output of the circuit. R is used to reset the output (write to zero), and S is used to set the output (write to one). Q’ (pronounced Q not) is always the opposite value of Q. To understand the circuit, first consider the truth table for the NOR gate which is the OR output passed through a NOT gate.&lt;/p&gt;

&lt;table class=&quot;table table-striped table-bordered center&quot;&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;a&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;b&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;NOR&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Now, here are the truth tables of the two NOR gates side by side.&lt;/p&gt;

&lt;table class=&quot;table table-striped table-bordered center&quot;&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;R&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Q&#39; (present)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Q (next)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;S&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Q (present)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Q&#39; (next)&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;In the above table, notice when R is one, Q is forced to zero and when S is one, Q’ is forced to zero, and Q is forced to one. If both S and R are one, the circuit will become unstable and have an undefined output.&lt;/p&gt;

&lt;table class=&quot;table table-striped table-bordered center&quot;&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;S&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;R&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Action&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Hold&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Reset&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Set&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Undefined&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The SR latch is just one of many types of memory storage circuitry. Static RAM (SRAM) (used in most microcontrollers) is not made up of SR latches but uses the same design principles. Dynamic RAM (DRAM) (used in most desktop computers) combines logic with a capacitor which stores the memory as a charge. Flash memory uses principles similar to SRAM. However, the transistor semiconductor design is tweaked to allow the gates to be programmed to retain their state when power is removed.&lt;/p&gt;

&lt;p&gt;Combination and sequential logic circuitry lay the foundation for creating the digital circuitry that makes up a microcontroller’s central processing unit.&lt;/p&gt;

&lt;h2 id=&quot;microcontroller-architecture&quot;&gt;Microcontroller Architecture&lt;/h2&gt;

&lt;p&gt;Microcontroller architecture relies on digital devices created using combinational and sequential logic. When a microcontroller starts up, it goes to a predetermined location in memory and starts executing instructions that are stored there. Typical operations include loading data from memory, executing calculations, and storing data to memory. Some memory regions are designed to not just store data but control the input/output mechanisms of the microcontroller. This memory is typically referred to as peripheral registers because reading and writing the registers control peripheral circuitry (as opposed to the central processing).&lt;/p&gt;

&lt;p&gt;A basic microcontroller architecture includes memory, a CPU, and peripheral circuitry. The memory might be flash (typically used for program instructions) and RAM. The CPU contains circuitry that can load and store data from memories as well as perform various calculations such as adding and subtracting using the arithmetic logic unit (ALU). The CPU also has a set of registers, which is a special type of RAM that is directly wired to the ALU. This means the CPU cannot directly add two values from RAM. It must first load the values to the CPU registers to perform the calculation. The general purpose CPU registers are typically called r0, r1, r2, and so on. Special CPU registers also include the program counter and stack pointer. Finally, microcontrollers contain peripheral circuitry that is controlled using peripheral registers. The peripheral registers are also RAM like. But instead of the data just sitting there, it actively controls the peripheral circuitry such as the UART, SPI, I2C, GPIO, and so on. Therefore by reading and writing the peripheral registers, the CPU can interact with external devices (such as a bluetooth radio).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image_tall&quot; src=&quot;/images/mcu-arch.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For a microcontroller to execute an instruction, it goes through three basic steps.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fetch&lt;/li&gt;
  &lt;li&gt;Decode&lt;/li&gt;
  &lt;li&gt;Execute&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When an instruction is fetched, the CPU grabs an instruction from the flash memory using the instruction 
bus (see &lt;span class=&quot;badge&quot;&gt;1&lt;/span&gt; above). The CPU uses a special register called the program counter (part of CPU registers above) to 
keep track of what instruction should be loaded next. The program counter automatically increments–meaning it 
has special digital circuitry designed using logic to make it increment–each time an instruction is 
executed. Microcontrollers use branching instructions to make the program counter jump around in the case 
of executing a loop or an “if” statement.&lt;/p&gt;

&lt;p&gt;Once the instruction is fetched, the CPU executes it. For load instructions, this means loading data from 
RAM or the peripheral registers to the CPU registers using the data bus (see &lt;span class=&quot;badge&quot;&gt;2&lt;/span&gt; above). Sometimes with 
load instructions that use indirect addressing, the ALU is used to calculate the address to load. Store 
instructions work similarly except that data from the CPU registers is stored in RAM or peripheral memory. Math 
based instructions pass one or two registers (see &lt;span class=&quot;badge&quot;&gt;3&lt;/span&gt; above) to the ALU which then performs a 
calculation (such as addition) and stores the result in a CPU register (see &lt;span class=&quot;badge&quot;&gt;4&lt;/span&gt; above).&lt;/p&gt;

&lt;p&gt;The above described architecture is not all encompassing. It is more specifically a Harvard architecture 
with a load-store instruction set. Many other architectures exist each with various advantages and disadvantages.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Understanding how microcontrollers work starts with a basic understanding of semiconductor physics. Silicon doped into N-type and P-type materials enable the creation of semiconductor devices such as diodes and transistors. Microcontrollers consists of millions of transistors arranged a on single silicon based circuit to create many logic gates–such as AND, NOT, OR, XOR–to form the digital circuitry that make up microcontrollers.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>FFT on the ARM Cortex M3</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/13/Tips-FFT-on-the-ARM-Cortex-M3"/>
   <updated>2013-10-13T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/13/Tips-FFT-on-the-ARM-Cortex-M3</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/DIT-FFT-butterfly.png&quot; /&gt;
The ARM Cortex-M3 combined with a Fast Fourier Transform (FFT) implementation 
is a powerful, embedded digital signal processing (DSP) solution.  The ARM 
Cortex-M3 is a mid-range microcontroller architecture with clock speeds 
over 100MHz and a powerful arithmetic logic unit (ALU).  The FFT, a useful 
tool in many DSP applications, utilizes these features enabling the ARM 
Cortex-M3 to be a suitable replacement for dedicated DSP’s in some embedded 
applications.&lt;/p&gt;

&lt;h2 id=&quot;arm-cortex-m3&quot;&gt;ARM Cortex-M3&lt;/h2&gt;

&lt;p&gt;The ARM Cortex-M3 architecture is a 32-bit microcontroller architecture core.  The 
core is implemented by various manufacturers, including NXP, TI, STMicro, 
and Atmel, as microcontrollers that are competitively priced against 8/16 bit 
cores.  It offers substantial performance improvements over 8/16 bit architectures 
including various features that enable signal processing algorithms such as 
single cycle 32-bit multiply and bit reversal instructions as well as separate 
data and instruction busses.  The FFT makes frequent use of both the multiply 
and bit-reversal instructions as well as takes advantage of the separate busses.&lt;/p&gt;

&lt;h2 id=&quot;fft&quot;&gt;FFT&lt;/h2&gt;

&lt;p&gt;The FFT is an algorithm, or more accurately a family of algorithms, that implement the Discrete Fourier Transform (DFT) in a “fast” way–hence the name.  The FFT re-uses calculations to provide faster computing times but sacrifices a small amount of accuracy in doing so.  It turns out there are many uses for a fast approximation of the DFT.&lt;/p&gt;

&lt;h2 id=&quot;fft-applications&quot;&gt;FFT Applications&lt;/h2&gt;

&lt;p&gt;The FFT is used frequently in both audio (and other one-dimensional signals) and 
image processing applications.  The FFT allows a signal to be analyzed in the 
frequency domain rather than the discrete time domain.  The following graph 
shows a signal in the time domain (top) as well as the frequency domain (middle 
and bottom).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/time-freq.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above graphs use the following equation for the time-domain representation:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_equation&quot; src=&quot;/images/fft-formula1.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This signal represents the number five using dual-tone multi-frequency 
encoding (DTMF)–that is, the sound you hear when you are on a phone call and 
press the number five.  When looking at this signal in the time domain as 
compared to the frequency domain, it is much easier to decipher the tone looking 
at the frequency plot, hence the usefulness of the FFT.&lt;/p&gt;

&lt;p&gt;In the frequency plot (middle above), there are four spikes.  The spikes on the 
left represent the frequencies at 770Hz and 1366Hz (the bottom plot zooms in on 
these spikes).  The spikes on the right are a mirror image of the aforementioned 
frequencies.  In fact, the FFT always mirrors all frequencies below half the 
sampling frequency (see Nyquist Rate for more information).&lt;/p&gt;

&lt;p&gt;Image processing also uses the FFT.  Consider the images below.  The one on the 
left is the original while the other has had an edge detection algorithm applied.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/EdgeDetectionMathematica.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Image from Wikpedia:  &lt;a href=&quot;http://en.wikipedia.org/wiki/Edge_detection&quot;&gt;Edge Detection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Edge detection is done by using an operation called convolution.  A filter matrix 
is “convolved” with an image to produce the edge detected image.  Because 
convolution is computationally intensive in the time domain, frequency domain 
multiplication can be used instead to reduced the number of operations 
performed.  This means, rather than convolving, the following steps are taken:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;first the FFT is applied to the image and the filter,&lt;/li&gt;
  &lt;li&gt;the image and the filter are multiplied,&lt;/li&gt;
  &lt;li&gt;finally, an inverse FFT is applied to the result in order to get the edge detected image.  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Despite being more steps, this approach actually uses much less computing power 
than convolution.  However, convolution is much easier than an FFT to implement 
in code.  The code sample below helps to bridge that gap.&lt;/p&gt;

&lt;h2 id=&quot;fft-code&quot;&gt;FFT Code&lt;/h2&gt;

&lt;p&gt;The code below is a snippet for performing an FFT.  ARM provides a DSP library
as part of the Cortex Microcontroller Software Inteface Standard (CMSIS).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;typedef struct {
  int32_t real;
  int32_t imag;
} fft_i32_t;
 
void core_fft_i32(fft_context_i32_t * context, fft_i32_t * dest, fft_i32_t * src, int sign){
  int n, k, m;
  int half_N;
  int k2;
  int twiddle;
  int twiddle_jump;
  int twiddle_max;
  int n_jump;
  int n_start;
  fft_i32_t tmp_product;
  fft_i32_t twiddle_factor;
  fft_i32_t tmp;
 
  //copy the signal input to the tmp variable
  for(n=0; n &amp;lt; context-&amp;gt;N; n++){
    m = bit_reversal(n,context-&amp;gt;order);
    dest[n] = src[m];
  }
 
        //This loop performs the FFT using the Cooley-Tukey algorithm
  half_N = context-&amp;gt;N &amp;gt;&amp;gt; 1;
  for(k=0; k &amp;lt; context-&amp;gt;order; k++){
    n = 0;
    k2 = (1&amp;lt;&amp;lt;k);
 
    //Calculate the twiddle jump and max for the stage
    twiddle_max = (1&amp;lt;&amp;lt;(context-&amp;gt;order - 1));
    twiddle_jump = (1&amp;lt;&amp;lt;(context-&amp;gt;order - k - 1)); //equals 2^(kmax - k)
 
    //Calculate the n jump for the stage
    n_jump = k2&amp;lt;&amp;lt;1;
    n_start = 0;
 
    for(twiddle = 0; twiddle &amp;lt; twiddle_max; twiddle += twiddle_jump){
 
      //twiddle value in the table (always &amp;lt; N/2)
      twiddle_factor.real = context-&amp;gt;twiddle_table[twiddle].real;
      twiddle_factor.imag = context-&amp;gt;twiddle_table[twiddle].imag * sign;
 
                        //This loop executes a single butterfly operation (size-2 DFT operation)
      for(n=n_start; n &amp;lt; context-&amp;gt;N; n+= n_jump){
        m = n+k2;
        //This is the butterfly code
        tmp_product = fft_mult_i32(dest[m], twiddle_factor);  //multiply
        tmp = scale_add_i32(dest[n], tmp_product, context-&amp;gt;scale); //accumlate
        dest[m] = scale_subtract_i32(dest[n], tmp_product, context-&amp;gt;scale);
        dest[n] = tmp;
 
      }
      n_start++;
    }
 
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The combination of the ARM CM3 and the FFT allow developers to execute some 
signal processing algorithms previously reserved for dedicated DSP 
hardware.  This is possible due to the single cycle multiply as well as bit 
reversal instructions available on the CM3 and the high speed CPU cores that 
are available.  All of this functionality comes at power budgets and price 
points that are competitive with 8/16 microcontroller architectures.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Effective Use of ARM Cortex-M3 SVCall</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/12/Tips-Effective-Use-of-ARM-Cortex-M3-SVCall"/>
   <updated>2013-10-12T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/12/Tips-Effective-Use-of-ARM-Cortex-M3-SVCall</id>
   <content type="html">&lt;p&gt;The ARM Cortex-M3 service call (SVCall) can be a tricky feature to integrate in to your system software. It is useful for two things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Allowing a piece of code to execute without interruption&lt;/li&gt;
  &lt;li&gt;Jumping to privileged mode from unprivileged mode&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;svcall-introduction&quot;&gt;SVCall Introduction&lt;/h2&gt;

&lt;p&gt;The SVCall (contraction of service call) is a software triggered interrupt. It is useful for several reasons. First, depending on interrupt priorities, the handler can be uninterruptible by one interrupt but interruptible by another. For example, if you have a piece of code that should not be interrupted by the timer but can be interrupted by the UART, you can set the interrupt priorities on the ARM Cortex-M3 in such a fashion to have the SVCall interrupt priority be higher than the timer but lower than the UART. Second, if you are using the MPU or privileged mode on the ARM Cortex-M3, the SVCall provides the code executing in unprivileged mode a way to access privileged resources.&lt;/p&gt;

&lt;p&gt;The SVC instruction invokes the service call interrupt. The bottom 8-bits of the SVC instruction can be set to any value and then interpreted by the interrupt handler. This essentially allows the user a way to execute 256 different types of service calls. Alternatively, parameters can be placed on the stack and then extracted by the interrupt handler to provide unlimited service calls with up to three parameters. The sample code below shows how to do this using two parameters.&lt;/p&gt;

&lt;h2 id=&quot;svcall-sample-code&quot;&gt;SVCall Sample Code&lt;/h2&gt;

&lt;p&gt;To effectively use the service call interrupt, we pass two arguments to a function which immediately invokes the SVC instruction. The arguments are a pointer to a function to execute in privileged mode and a pointer to a data structure that the function can use to read/write data in the caller’s context. The following code shows the prototype and body of the function.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;//we need to decrease the optimization so the the compiler
//does not ignore func and args
void service_call(void (*func)(void*), void* args) __attribute__((optimize(&amp;quot;1&amp;quot;));
 
void service_call(void (*func)(void*), void* args){
     //by convention func is in r0 and args is in r1
     asm volatile(&amp;quot;svc 0&amp;quot;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When SVC is executed, the NVIC immediately stacks various registers including r0 and r1 and then executes the interrupt handler. The interrupt handler then needs to grab the values of r0 and r1 from the stack. The value in r0 is the function pointer while r1 is a pointer to some data in the caller’s context. The r0 value is type casted as a function and executed with a single argument, the value of r1.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;typedef void (*svcall_t)(void*);
 
void svcall_handler(void){
  register uint32_t * frame;
  register svcall_t call;
  register void * args;
  asm volatile (&amp;quot;MRS %0, psp\n\t&amp;quot; : &amp;quot;=r&amp;quot; (frame) ); //assumes PSP in use when service_call() invoked
  call = (svcall_t)frame[0];
  args = (void*)(frame[1]);
  call(args);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, to make a privileged call:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;void my_priv_func(void * data){
    int * my_int;
    my_int = data;
    if (*my_int == 10 ){
        *my_int = 0;
    }
}
 
int main(void){
    int var;
    var = 10;
    service_call(my_priv_func, &amp;amp;var); //executes my_priv_func() in interrupt mode
    if( var == 0 ){
        //if this is true, that means everything worked
    }
    return 0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This very simple code sample provides a powerful and effective mechanism for using the ARM Cortex-CM3 SVCall (service call) interrupt. It allows an arbitrary function to be executed uninterrupted in privileged mode. The code is both re-entrant and thread-safe (as long as the context-switch can’t interrupt the service call handler).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Deploying Qt Applications on Mac OSX</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/11/Tips-Deploying-Qt-Applications-on-Mac-OSX"/>
   <updated>2013-10-11T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/11/Tips-Deploying-Qt-Applications-on-Mac-OSX</id>
   <content type="html">&lt;p&gt;Qt is a multi-platform development framework supporting Windows, Mac, and Linux. It is great for 
creating desktop applications that interact with embedded devices. Though the code runs on multiple 
platforms deploying a Qt application to different platforms can be challenging.&lt;/p&gt;

&lt;p&gt;The following is a script that takes a Qt project and bundles it into a Mac OS X disk image. It 
also does code signing which is becoming more important on Mac OS X starting with Mountain Lion. The 
script is used to deploy CoActionOS Link but can adapted to any Qt application.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;#!/bin/bash
VERSION=$1
QTSDKPATH=/Users/tgil/QtSDK
APP=CoActionOS-Link
TEMPDIR=$APP-tmp
SIGNATURE=CoActionOS,\ Inc
NAME=`uname`
if [ &amp;quot;$NAME&amp;quot; != &amp;quot;Darwin&amp;quot; ]; then
    echo &amp;quot;This is not a Mac&amp;quot;
    exit 1
fi
if [ &amp;quot;$VERSION&amp;quot; = &amp;quot;&amp;quot; ]; then
    echo &amp;quot;Usage:  ../deploy &amp;quot;
    exit 1
fi
make
if [ &amp;quot;$?&amp;quot; -ne &amp;quot;0&amp;quot; ]; then
    echo &amp;quot;Failed to Build&amp;quot;
    exit 1
fi
#use macdeployqt to deploy the application
$QTSDKPATH/Desktop/Qt/4.8.0/gcc/bin/macdeployqt ./$APP.app
if [ &amp;quot;$?&amp;quot; -ne &amp;quot;0&amp;quot; ]; then
    echo &amp;quot;Failed to run macdeployqt&amp;quot;
    exit 1
fi
echo &amp;quot;Create $TEMPDIR&amp;quot;
#Create a temporary directory if one doesn&amp;#39;t exist
mkdir -p $TEMPDIR
if [ &amp;quot;$?&amp;quot; -ne &amp;quot;0&amp;quot; ]; then
    echo &amp;quot;Failed to create temporary folder&amp;quot;
    exit 1
fi
echo &amp;quot;Clean $TEMPDIR&amp;quot;
#Delete the contents of any previous builds
rm -Rf ./$TEMPDIR/*
if [ &amp;quot;$?&amp;quot; -ne &amp;quot;0&amp;quot; ]; then
    echo &amp;quot;Failed to clean temporary folder&amp;quot;
    exit 1
fi
echo &amp;quot;Move application bundle&amp;quot;
#Move the application to the temporary directory
mv ./$APP.app ./$TEMPDIR
if [ &amp;quot;$?&amp;quot; -ne &amp;quot;0&amp;quot; ]; then
    echo &amp;quot;Failed to move application bundle&amp;quot;
    exit 1
fi
echo &amp;quot;Sign the code&amp;quot;
#This signs the code
echo &amp;quot;Sign Code with $SIGNATURE&amp;quot;
codesign -s &amp;quot;$SIGNATURE&amp;quot; -f ./$TEMPDIR/$APP.app
if [ &amp;quot;$?&amp;quot; -ne &amp;quot;0&amp;quot; ]; then
    echo &amp;quot;Failed to sign app bundle&amp;quot;
    exit 1
fi
echo &amp;quot;Create symbolic link&amp;quot;
#Create a symbolic link to the applications folder
ln -s /Applications ./$TEMPDIR/Applications
if [ &amp;quot;$?&amp;quot; -ne &amp;quot;0&amp;quot; ]; then
    echo &amp;quot;Failed to create link to /Applications&amp;quot;
    exit 1
fi
echo &amp;quot;Create new disk image&amp;quot;
#Create the disk image
rm -f ./$APP-$VERSION.dmg
hdiutil create -srcfolder ./$TEMPDIR -format UDBZ ./$APP-$VERSION.dmg
if [ &amp;quot;$?&amp;quot; -ne &amp;quot;0&amp;quot; ]; then
    echo &amp;quot;Failed to create disk image&amp;quot;
    exit 1
fi
#delete the temporary directory
rm -Rf ./$TEMPDIR/*
if [ &amp;quot;$?&amp;quot; -ne &amp;quot;0&amp;quot; ]; then
    echo &amp;quot;Failed to clean temporary folder&amp;quot;
    exit 1
fi
exit 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hopefully, this script is helpful in your endeavours to deploy Qt applications on Mac OS X.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Decoupling Capacitors (and Other Power Rules of Thumb)</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/10/Tips-Decoupling-Capacitors"/>
   <updated>2013-10-10T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/10/Tips-Decoupling-Capacitors</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/decouple-caps.png&quot; /&gt;
It is ubiquitous in the digital electronics industry to use small capacitors 
next to power pins.  These capacitors stabilize the power delivered to 
digital devices and reduce noise.  They are not the only good idea in 
embedded systems power supply design.  Ferrite beads further attenuate 
noise on the power supply line while diodes prevent reverse voltage and 
overvoltage conditions.&lt;/p&gt;

&lt;p&gt;Digital circuitry, especially a microcontroller, typically draws high current in response to an event (such as a clock edge) and uses minimal current between events.  The graph below illustrates hypothetical current spikes on dual clock edges of a 1MHz clock signal.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/current-clock.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To prevent the current spikes in the graph above from propagating through the entire board, a decoupling capacitor is placed close to the digital device.  The capacitor does two things:  1) ensures enough current is delivered to the digital device and 2) reduces the noise on the power and ground planes by minimizing the current loop path. &lt;/p&gt;

&lt;p&gt;The schematic below shows a decoupling capacitor next to a digital accelerometer.  The red arrows show the loop where the current spikes travel.  Without the capacitor, the high current loop extents all the way back to VCC and ground.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/bma150-decouple.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;span class=&quot;label label-danger&quot;&gt;Important&lt;/span&gt; Always 
place capacitors as close as possible to the power and ground pins of all digital 
devices.&lt;/div&gt;

&lt;p&gt;On the PCB layout, the high current loop should be made as small as practical.  Decoupling capacitors are only effective if the impedance between the capacitor and the device is significantly smaller than the impedance between the capacitor and the power source.  The impedances are directly proportional to the length of the traces.  The impedance mismatch allows the capacitor to quickly discharge when the device needs high current then charge at a slower rate with current delivered from the power supply.&lt;/p&gt;

&lt;h2 id=&quot;ferrite-beads&quot;&gt;Ferrite Beads&lt;/h2&gt;

&lt;p&gt;Ferrite beads can be used to further reduce the amount of noise emitted from digital circuitry on to the power supply planes.  Using ferrite beads is especially important in mixed signal designs where digital noise can disrupt precise analog measurements.  The circuit below illustrates a 1.8V power supply for an ethernet switch.  FB2 is placed between the analog power supply and digital power supply to prevent noise from the digital circuitry from disrupting the analog circuitry.  &lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/analog-decouple.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ferrite beads are rated for impedance at frequency (100 Ohm @ 100MHz above).  Ferrite beads essentially act as short circuits at low frequencies and absorb high frequency energy dissipating it as heat.  The frequency rating (100MHz in this example) does not refer to the digital clock frequency.  It refers to the frequency of the high current spike, which is typically in the hundreds of megahertz range for most digital circuitry.&lt;/p&gt;

&lt;h2 id=&quot;diodes-traditional-and-zener&quot;&gt;Diodes (Traditional and Zener)&lt;/h2&gt;

&lt;p&gt;Diodes are another great power supply design tool.  They can provide protection against reverse voltage (traditional diodes) and over voltage (zener diodes).  Using traditional diodes in a half bridge configuration (as in the image below) provides reverse voltage protection.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/half-bridge.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The drawback of using a half bridge is that the diodes dissipate some amount of energy as heat reducing the efficiency of the system overall.  &lt;/p&gt;

&lt;p&gt;A full bridge diode configuration is a clever solution which allows the circuit to work regardless of polarity albeit with the same efficiency reduction as the half bridge.  Full bridge rectifiers are typically used to convert an AC signal to DC.  However, when used with a DC power supply, the power supply is converted to a positive voltage given a negative or positive input.  This concept is illustrated in the following diagrams with the red arrows showing the respective current paths.  Notice that the current through the resistive load is in the same direction in both illustrations.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/full-bridge-a.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/full-bridge-b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While the above bridges use traditional diodes to protect against reverse polarity, zener diodes protect against over-voltage and are selected based on the reverse breakdown voltage.  For example, for a circuit that operates at 3V but has an absolute maximum rating of 6V, a zener diode with a reverse breakdown voltage of 5V protects the circuit against over-voltage.  Even if there is no chance the user will apply an overvoltage, zener diodes also protect against voltage surges due to EMI or electrostatic discharge.  The image below shows a resistive load with a half bridge circuit and zener diode protections.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/zener-protection.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Decoupling capacitors, ferrite beads, and diodes are vital components to embedded systems power supplies.  Decoupling capacitors ensure steady power is delivered to digital chips and help reduce noise on the power supply lines.  Ferrite beads act to further reduce noise while diodes offer both reverse polarity and over voltage protection.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Context Switching on the Cortex-M3</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/09/Tips-Context-Switching-on-the-Cortex-M3"/>
   <updated>2013-10-09T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/09/Tips-Context-Switching-on-the-Cortex-M3</id>
   <content type="html">&lt;p&gt;The ARM Cortex-M3 architecture is designed with special features to 
facilitate implementing a pre-emptive RTOS. The system code takes 
advantage of these features when implementing context switching code.&lt;/p&gt;

&lt;h3 id=&quot;arm-cortex-m3-context-switching-hardware&quot;&gt;ARM Cortex-M3 Context Switching Hardware&lt;/h3&gt;

&lt;h4 id=&quot;interrupts&quot;&gt;Interrupts&lt;/h4&gt;

&lt;p&gt;The SysTick and PendSV interrupts can both be used for context 
switching. The SysTick peripheral is a 24-bit timer that interrupts 
the processor each time it counts down to zero. This makes it 
well-suited to round-robin style context switching. The PendSV 
interrupt allows a task to cede control of the CPU when it is 
inactive (such as when sleeping or waiting for a hardware resource) which 
is helpful for FIFO style context switching. In addition to these 
interrupts, the ARM Cortex-M3 also includes two stack pointers.&lt;/p&gt;

&lt;h4 id=&quot;stacks&quot;&gt;Stacks&lt;/h4&gt;

&lt;p&gt;The stack pointers for the ARM Cortex-M3 include the main stack 
pointer (MSP) and the process stack pointer (PSP). The MSP is always 
used when handling interrupts and optionally used during regular 
program execution. The PSP is only used during regular program 
execution.  ARM recommends using the MSP for the kernel as well 
as interrupts and recommends the PSP for executing other 
tasks.  While the architecture provides the interrupts and the 
stack pointers, the implementation must provide the context 
switching code.&lt;/p&gt;

&lt;h3 id=&quot;context-switching-software-implementation&quot;&gt;Context Switching Software Implementation&lt;/h3&gt;

&lt;p&gt;The RTOS manages the interrupts and stacks in order to achieve 
context switching.  When switching contexts, the RTOS needs a way 
to keep track of which tasks are doing what using a task or scheduler 
table.  Three routines are then required to: perform the context 
switch, initialize the system, and create new tasks.&lt;/p&gt;

&lt;h4 id=&quot;task-table&quot;&gt;Task Table&lt;/h4&gt;

&lt;p&gt;The task table, at a minimum, saves each task’s stack pointer; it is 
also helpful to save other information, such as the task parent and 
status, to allow the context switcher to selectively execute 
tasks.  The following code shows an example of a structure that can 
be used for an entry in the task table:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;typedef struct {
     void * sp; //The task&amp;#39;s current stack pointer
     int flags; //Status flags includes activity status, parent task, etc
} task_table_t;
int current_task;
task_table_t task_table[MAX_TASKS];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The sp member stores the value of the task’s stack pointer, while 
flags holds the task status. In this example, the task uses two 
status bits: one to indicate that the table entry is in use and 
the other to specify whether or not to execute the task.&lt;/p&gt;

&lt;h3 id=&quot;context-switching-routine&quot;&gt;Context Switching Routine&lt;/h3&gt;

&lt;p&gt;The context switcher needs to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;save the state of the current task,&lt;/li&gt;
  &lt;li&gt;update the current task index to the next task to be executed,&lt;/li&gt;
  &lt;li&gt;set up the CPU to either use the MSP (if it’s time to run the kernel) or the PSP,&lt;/li&gt;
  &lt;li&gt;and finally load the context of the task which is about to execute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following code is an example of a context switcher, preceded by some 
helper functions, and the interrupt handlers.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;static uint32_t * stack; //This is stored on the heap rather than the stack
 
#define MAIN_RETURN 0xFFFFFFF9  //Tells the handler to return using the MSP
#define THREAD_RETURN 0xFFFFFFFD //Tells the handler to return using the PSP
 
//Reads the main stack pointer
static inline void * rd_stack_ptr(void){
  void * result=NULL;
  asm volatile (&amp;quot;MRS %0, msp\n\t&amp;quot;
      //&amp;quot;MOV r0, %0 \n\t&amp;quot;
      : &amp;quot;=r&amp;quot; (result) );
  return result;
}
 
//This saves the context on the PSP, the Cortex-M3 pushes the other registers using hardware
static inline void save_context(void){
  uint32_t scratch;
  asm volatile (&amp;quot;MRS %0, psp\n\t&amp;quot;
      &amp;quot;STMDB %0!, {r4-r11}\n\t&amp;quot;
      &amp;quot;MSR psp, %0\n\t&amp;quot;  : &amp;quot;=r&amp;quot; (scratch) );
}
 
//This loads the context from the PSP, the Cortex-M3 loads the other registers using hardware
static inline void load_context(void){
  uint32_t scratch;
  asm volatile (&amp;quot;MRS %0, psp\n\t&amp;quot;
      &amp;quot;LDMFD %0!, {r4-r11}\n\t&amp;quot;
      &amp;quot;MSR psp, %0\n\t&amp;quot;  : &amp;quot;=r&amp;quot; (scratch) );
}
 
//The SysTick interrupt handler -- this grabs the main stack value then calls the context switcher
void systick_handler(void){
    save_context();  //The context is immediately saved
    stack = (uint32_t *)rd_stack_ptr();
    if ( SysTick-&amp;gt;CTRL &amp;amp; (1&amp;lt;16) ){ //Indicates timer counted to zero
        context_switcher();
    }
    load_context(); //Since the PSP has been updated, this loads the last state of the new task
}
 
//This does the same thing as the SysTick handler -- it is just triggered in a different way
void pendsv_handler(void){
    save_context();  //The context is immediately saved
    stack = (uint32_t *)rd_stack_ptr();
    core_proc_context_switcher();
    load_context(); //Since the PSP has been updated, this loads the last state of the new task
}
 
//This reads the PSP so that it can be stored in the task table
static inline void * rd_thread_stack_ptr(void){
    void * result=NULL;
    asm volatile (&amp;quot;MRS %0, psp\n\t&amp;quot; : &amp;quot;=r&amp;quot; (result) );
    return(result);
}
 
//This writes the PSP so that the task table stack pointer can be used again
static inline void wr_thread_stack_ptr(void * ptr){
    asm volatile (&amp;quot;MSR psp, %0\n\t&amp;quot; : : &amp;quot;r&amp;quot; (ptr) );
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the function for the actual context switcher. This context 
switcher uses the MSP for task 0 (assumed to be the kernel) and the 
PSP for other tasks.  It is also possible to use the PSP for the 
kernel and just use the MSP during interrupt handling.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;//This is the context switcher
void context_switcher(void){
   task_table[current_task].sp = rd_proc_stack_ptr(); //Save the current task&amp;#39;s stack pointer
   do {
      current_task++;
      if ( current_task == MAX_TASKS ){
         current_task = 0;
         *((uint32_t*)stack) = MAIN_RETURN; //Return to main process using main stack
         break;
      } else if ( task_table[current_task].flags &amp;amp; EXEC_FLAG ){ //Check exec flag
         //change to unprivileged mode
         *((uint32_t*)stack) = THREAD_RETURN; //Use the thread stack upon handler return
         break;
      }
   } while(1);
   wr_proc_stack_ptr( task_table[current_task].sp ); //write the value of the PSP to the new task
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The following diagram shows the chronology of the stack pointer when a 
switch happens between task one and task two. Note that because this 
implementation uses the MSP for task zero, the mechanics of a context 
switch are slightly different when switching to and from task zero. A 
context switching implementation can just as easily use the PSP for 
all tasks and the MSP for interrupts by using THREAD_RETURN rather 
than MAIN_RETURN above.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/psp-chronology.svg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;initialization&quot;&gt;Initialization&lt;/h3&gt;

&lt;p&gt;The first thing that must be done is to initialize the main stack’s 
task table entry.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;//This defines the stack frame that is saved  by the hardware
typedef struct {
  uint32_t r0;
  uint32_t r1;
  uint32_t r2;
  uint32_t r3;
  uint32_t r12;
  uint32_t lr;
  uint32_t pc;
  uint32_t psr;
} hw_stack_frame_t;
 
//This defines the stack frame that must be saved by the software
typedef struct {
  uint32_t r4;
  uint32_t r5;
  uint32_t r6;
  uint32_t r7;
  uint32_t r8;
  uint32_t r9;
  uint32_t r10;
  uint32_t r11;
} sw_stack_frame_t;
 
static char m_stack[sizeof(sw_stack_frame_t)];
 
void task_init(void){
     ...
     task_table[0].sp = m_stack + sizeof(sw_stack_frame_t);
     ....
    //The systick needs to be configured to the desired round-robin time
    //..when the systick interrupt fires, context switching will begin
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;creating-a-new-task&quot;&gt;Creating a New Task&lt;/h3&gt;

&lt;p&gt;Once the context switcher is initialized, there needs to be a mechanism 
to start new tasks. Starting a new task involves finding an available 
entry in the task table and initializing the new task’s stack.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;int new_task(void *(*p)(void*), void * arg, void * stackaddr, int stack_size){
    int i, j;
    void * mem;
    uint32_t * argp;
    void * pc;
    hw_stack_frame_t * process_frame;
    //Disable context switching to support multi-threaded calls to this function
    systick_disable_irq();
    for(i=1; i &amp;lt; MAX_TASKS; i++){
        if( core_proc_table[i].flags == 0 ){
            process_frame = (hw_stack_frame_t *)(stackaddr - sizeof(hw_stack_frame_t));
            process_frame-&amp;gt;r0 = (uint32_t)arg;
            process_frame-&amp;gt;r1 = 0;
            process_frame-&amp;gt;r2 = 0;
            process_frame-&amp;gt;r3 = 0;
            process_frame-&amp;gt;r12 = 0;
            process_frame-&amp;gt;pc = ((uint32_t)p);
            process_frame-&amp;gt;lr = (uint32_t)del_process;
            process_frame-&amp;gt;psr = 0x21000000; //default PSR value
            core_proc_table[i].flags = IN_USE_FLAG | EXEC_FLAG;
            core_proc_table[i].sp = mem + 
                stack_size - 
                sizeof(hw_stack_frame_t) - 
                sizeof(sw_stack_frame_t);
            break;
        }
    }
    systick_enable_irq();  //Enable context switching
    if ( i == MAX_TASKS ){
        //New task could not be created
        return 0;
    } else {
        //New task ID is i
        return i;
    }
}
 
//This is called when the task returns
void del_process(void){
  task_table[current_task_index].flags = 0; //clear the in use and exec flags
  SCB-&amp;gt;ICSR |= (1&amp;lt;&amp;lt;28); //switch the context
  while(1); //once the context changes, the program will no longer return to this thread
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;ARM, with the Cortex M architecture, delivers valuable hardware 
resources to enable context switching.  The interrupts support both 
round robing and FIFO style scheduling while the dual stacks allow 
the kernel process and interrupts to execute on a dedicated stack.  With 
just a few software routines to perform the context switching, initialize 
the system, and create new stacks, system developers can create a 
functioning pre-emptive kernel.&lt;/p&gt;

&lt;p&gt;For more information on context switching on the Cortex-M3, see the 
Cortex-M3 technical reference manual from ARM.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Building and Installing Autotools</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/08/Tips-Building-and-Installing-Autotools"/>
   <updated>2013-10-08T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/08/Tips-Building-and-Installing-Autotools</id>
   <content type="html">&lt;p&gt;Autotools is a set of tools used to build and manage software builds on 
multiple platforms.&lt;/p&gt;

&lt;p&gt;To build and install, first use ftp (on Mac OS X) or wget (on Windows Mingw) to download the sources.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;#Define the desired versions
export AUTOMAKE_VERSION=1.12.6
export AUTOCONF_VERSION=2.68
export LIBTOOL_VERSION=2.4.2
export TOOLSPATH=/usr/local/CoActionOS
mkdir -p automake
mkdir -p autoconf
mkdir -p libtool
#Download and extract the source
ftp http://ftp.gnu.org/gnu/automake/automake-$AUTOMAKE_VERSION.tar.gz
tar -zxvf automake-$AUTOMAKE_VERSION.tar.gz
ftp http://ftp.gnu.org/gnu/autoconf/autoconf-$AUTOCONF_VERSION.tar.gz
tar -zxvf autoconf-$AUTOCONF_VERSION.tar.gz
ftp http://ftp.gnu.org/gnu/libtool/libtool-$LIBTOOL_VERSION.tar.gz
tar -zxvf libtool-$LIBTOOL_VERSION.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now configure and build the sources. For Windows Mingw, the “sudo” is not used. Autoconf must be built first.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd autoconf
../autoconf-$AUTOCONF_VERSION/configure \
  --prefix=$TOOLSPATH
make
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now build Automake. The configure script may complain that the correct version of Autoconf is not installed. If this is the case, the PATH variable needs to be updated to include TOOLSPATH before any other directories that might have an older version of Autoconf.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd ../automake../automake-$AUTOMAKE_VERSION/configure \
  --prefix=$TOOLSPATH
make
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The following commands are used to build libtool.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd ../libtool
../libtool-$LIBTOOL_VERSION/configure \
  --prefix=$TOOLSPATH
make
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The Autotools binaries should now be available in TOOLSPATH/bin.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Building and Installing a Cortex-M3 Compiler on Ubuntu</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/07/Tips-Building-and-Installing-a-Cortex-M3-Compiler-on-Ubuntu"/>
   <updated>2013-10-07T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/07/Tips-Building-and-Installing-a-Cortex-M3-Compiler-on-Ubuntu</id>
   <content type="html">&lt;p&gt;GCC is a open source C compiler which can be downloaded, compiled, and 
installed on Ubuntu.  It is the compiler of choice for CoActionOS.&lt;/p&gt;

&lt;p&gt;To install GCC for the ARM Cortex M3 architecture on a computer running  Ubuntu 10.10, ensure the following packages (or their equivalents are installed): flex, bison, libgmp3-dev, libmpfr-dev, libmpc-dev, autoconf, texinfo, and  build-essential.  These packages can be installed apt-get.  Once the pre-requisite packages are installed, the binutils, GCC, and newlib source files must be downloaded and extracted.&lt;/p&gt;

&lt;p&gt;First specify the program to download the sources (or use a browser).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;export GET=wget&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that all prerequisites are installed, binutils, gcc, and newlib 
can be compiled and installed using the same directions for &lt;a href=&quot;/embedded%20design%20tips/2013/10/06/Tips-Building-and-Installing-a-Cortex-M3-Compiler-on-Mac-OS-X&quot;&gt;Mac OS X&lt;/a&gt;.  The only
exception is that the for Mac you specify “CC=clang” and on Ubuntu, you omit this.
]
You can also follow the directions for &lt;a href=&quot;/embedded%20design%20tips/2014/10/05/Tips-Building-and-Installing-a-Cortex-M4-Compiler-on-Mac-OS-X&quot;&gt;installing an ARM cortex-M4 compiler&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Building and Installing a Cortex-M3 Compiler on Mac OS X</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/06/Tips-Building-and-Installing-a-Cortex-M3-Compiler-on-Mac-OS-X"/>
   <updated>2013-10-06T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/06/Tips-Building-and-Installing-a-Cortex-M3-Compiler-on-Mac-OS-X</id>
   <content type="html">&lt;p&gt;GCC is a open source C compiler which can be downloaded, compiled, and installed on Mac OS X.  It is 
the compiler of choice for CoActionOS, and an excellent general purpose ARM Cortex-M3 compiler.&lt;/p&gt;

&lt;p&gt;To install GCC for the ARM Cortex M3 architecture on a computer running Mac OS X (10.5 or higher), you 
must have XCode installed.  Also, ensure the following packages (or their equivalents are installed): flex, 
bison, libgmp3, libppl, libmpfr, autoconf, automake, texinfo, libmpc, and  build-essential.  These 
packages can be installed using Fink or Macports.  Once the pre-requisite packages are installed, the 
binutils, GCC, and newlib source files must be downloaded and extracted.&lt;/p&gt;

&lt;p&gt;The GMP, PPL, MPFR, and MPC libraries may be installed from source. The latest versions can be downloaded from:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gmplib.org/&quot;&gt;GMP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bugseng.com/products/ppl/download&quot;&gt;PPL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mpfr.org/&quot;&gt;MPFR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.multiprecision.org/&quot;&gt;MPC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you download the source, enter the following commands in the Terminal.  Replace the version 
values with the version you download.&lt;/p&gt;

&lt;pre&gt;
export GMP_VERSION=6.0.0
#If you use ppl-1.0, you need to use GMP 5.0.x
export PPL_VERSION=1.1
export MPFR_VERSION=3.1.2
export MPC_VERSION=1.0.2
export TOOLSPATH=/usr/local/CoActionOS
mkdir -p gmp
mkdir -p ppl
mkdir -p mpfr
mkdir -p mpc
cd gmp
../gmp-$GMP_VERSION/configure --prefix=$TOOLSPATH  --enable-cxx
make
make install
cd ../ppl
#on mingw add: --disable-shared --enable-static --disable-debugging
../ppl-$PPL_VERSION/configure --prefix=$TOOLSPATH --with-gmp=$TOOLSPATH
make
#dont use sudo on Windows
sudo make install
cd ../mpfr
../mpfr-$MPFR_VERSION/configure --prefix=$TOOLSPATH --with-gmp=$TOOLSPATH
make
#dont use sudo on Windows
sudo make install
cd ../mpc
../mpc-$MPC_VERSION/configure --prefix=$TOOLSPATH --with-gmp=$TOOLSPATH --enable-static --disable-shared
make
#dont use sudo on Windows
sudo make install
&lt;/pre&gt;

&lt;p&gt;Now specify the program to download the sources (or use a browser).&lt;/p&gt;

&lt;pre&gt;
export GET=ftp
&lt;/pre&gt;

&lt;p&gt;Now that all prerequisites are installed, binutils, gcc, and newlib can be compiled and installed using the following commands.&lt;/p&gt;

&lt;pre&gt;
#Define the desired versions
export CPU=cm3
export FLOAT=soft
export FPU=
export BINUTILS_VERSION=2.24
export GCC_VERSION=4.7.4
export NEWLIB_VERSION=1.19.0
export TOOLSPATH=/usr/local/CoActionOS
export ARCH=arm-$CPU-eabi
export PROGPREFIX=$ARCH-
mkdir binutils
mkdir gcc
mkdir newlib
#Download and extract the source
$GET ftp://mirrors.kernel.org/gnu/binutils/binutils-$BINUTILS_VERSION.tar.gz
tar -zxvf binutils-$BINUTILS_VERSION.tar.gz
$GET ftp://mirrors.kernel.org/gnu/gcc/gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.gz
tar -zxvf gcc-$GCC_VERSION.tar.gz
$GET ftp://sources.redhat.com/pub/newlib/newlib-$NEWLIB_VERSION.tar.gz
tar -zxvf newlib-$NEWLIB_VERSION.tar.gz
&lt;/pre&gt;

&lt;p&gt;The binutils source needs to be built first.  Again in the same directory where the binutils source was extracted, type (or copy and paste) the following commands in the terminal:&lt;/p&gt;

&lt;pre&gt;
cd binutils
../binutils-$BINUTILS_VERSION/configure \
  --program-prefix=$PROGPREFIX \
  --target=$ARCH \
  --disable-nls \
  --disable-werror \
  --with-cpu=cortex-$CPU \
  --with-no-thumb-interwork \
  --with-mode=thumb \
  --prefix=$TOOLSPATH \
  --with-gnu-as \
  --with-gnu-ld CC=clang
make
#dont use sudo on Windows
sudo make install
export PATH=$TOOLSPATH/bin:$PATH
&lt;/pre&gt;

&lt;p&gt;After binutils is built, GCC is next:&lt;/p&gt;

&lt;pre&gt;
cd ../gcc
../gcc-$GCC_VERSION/configure \
     --disable-werror \
     --target=$ARCH \
     --with-cpu=cortex-$CPU \
     --with-mode=thumb \
     --disable-multilib \
     --with-float=$FLOAT \
     $FPU \
     --with-newlib \
     --enable-languages=&quot;c,c++&quot; \
     --disable-shared \
     --with-gnu-as \
     --with-gnu-ld \
     --program-prefix=$PROGPREFIX \
     --prefix=$TOOLSPATH \
     --with-gmp=$TOOLSPATH \
     --with-ppl=$TOOLSPATH \
     --with-no-thumb-interwork \
     --enable-target-optspace \
     --disable-libssp \
     CC=clang 
make CXXFLAGS=&quot;-fbracket-depth=1024&quot; all-gcc
#dont use sudo on Windows
sudo make install-gcc
&lt;/pre&gt;

&lt;p&gt;Now, we need to build newlib.  In order to get newlib to build the floating point libraries correctly, we pass the -D__IEEE_LITTLE_ENDIAN -D__IEEE_BYTES_LITTLE_ENDIAN definitions.  The &lt;strong&gt;BUFSIZ&lt;/strong&gt; definition specifies what size buffer to use with printf() and file I/O.  Smaller values mean slower performance using less RAM.  To build newlib, type (or copy and paste) the following in a terminal window:&lt;/p&gt;

&lt;pre&gt;
cd ../newlib
../newlib-$NEWLIB_VERSION/configure \
  --target=$ARCH \
  --disable-multilib \
  --disable-werror \
  --with-gnu-as \
  --with-gnu-ld \
  --prefix=$TOOLSPATH \
  --disable-newlib-supplied-syscalls \
  --disable-nls \
  --enable-target-optspace \
  --disable-libssp \
  --enable-newlib-reent-small \
  --enable-newlib-multithread \
  --disable-libgloss
make CFLAGS_FOR_TARGET=&quot;-D__IEEE_LITTLE_ENDIAN -D__IEEE_BYTES_LITTLE_ENDIAN -D__BUFSIZ__=64&quot;
#dont use sudo on Windows
sudo make install
&lt;/pre&gt;

&lt;p&gt;Finally, we need to finish building GCC.&lt;/p&gt;

&lt;pre&gt;
cd ../gcc
make CXXFLAGS=&quot;-fbracket-depth=1024&quot;
#dont use sudo on Windows
sudo make install
&lt;/pre&gt;

&lt;p&gt;That’s it.  If all went well, a dedicated ARM Cortex M3 compiler is now installed in /usr/local/CoActionOS.  To uninstall the compiler tools, delete the /usr/local/CoActionOS folder.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Building and Installing a Cortex-M3 Compiler in Windows</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/05/Tips-Building-and-Installing-a-Cortex-M3-Compiler-in-Windows"/>
   <updated>2013-10-05T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/05/Tips-Building-and-Installing-a-Cortex-M3-Compiler-in-Windows</id>
   <content type="html">&lt;p&gt;GCC is a open source C compiler which can be downloaded, compiled, and 
installed on Windows.  It is the compiler of choice for CoActionOS.&lt;/p&gt;

&lt;p&gt;To build and install GCC for the ARM Cortex M3 architecture on a 
computer running Windows XP, Vista or 7, you must first install 
MinGW.  You can download the installer from 
the &lt;a href=&quot;http://www.mingw.org/wiki/Getting_Started&quot;&gt;MinGW Getting Started&lt;/a&gt; and 
download the latest 
installer (&lt;a href=&quot;http://sourceforge.net/projects/mingw/files/Automated%20MinGW%20Installer/mingw-get-inst/&quot;&gt;mingw-get-inst&lt;/a&gt;).  When running 
the installer, include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C Compiler&lt;/li&gt;
  &lt;li&gt;C++ Compiler&lt;/li&gt;
  &lt;li&gt;MSYS Basic System&lt;/li&gt;
  &lt;li&gt;MinGW Developer ToolKit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rest of this tutorial assumes you are installing MinGW in the default 
directory (C:\MinGW) and that the installer created a Start Menu 
item called “MinGW”.&lt;/p&gt;

&lt;p&gt;The default console application lacks key 
functionality (such as copy/paste, resize-ability, customization).  It 
is recommended to use mintty instead.  To install mintty, open a 
MSYS Shell by going to the “MinGW” folder under “All Programs” in 
the start menu.  At the shell prompt type:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mingw-get install mintty&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To launch mintty, edit the “MSYS Shell” shortcut by right-clicking the 
shortcut in the “Start Menu” under “All Programs” and “MinGW” and 
clicking properties.  Then add “–mintty” to the end of target so 
that target reads “C:\MinGW\msys\1.0\msys.bat –mintty”.&lt;/p&gt;

&lt;p&gt;To ease the downloading of required software, wget can be copied to the C:\MinGW\bin directory.  The executable can be found in the 
&lt;a href=&quot;https://sourceforge.net/project/downloading.php?group_id=2435&amp;amp;filename=wget-1.9.1-mingwPORT.tar.bz2&amp;amp;a=85590697&quot;&gt;wget mingwPORT&lt;/a&gt;.  This step is optional; if you choose to skip it, you will have to download the prerequisite and GCC source code manually.&lt;/p&gt;

&lt;p&gt;Once the build system is install, you can build and install the compiler using the same directions for &lt;a href=&quot;/embedded%20design%20tips/2013/10/06/Tips-Building-and-Installing-a-Cortex-M3-Compiler-on-Mac-OS-X&quot;&gt;Mac OS X&lt;/a&gt;.  The only exception is that the for Mac you specify “CC=clang” and on Windows, you omit this.&lt;/p&gt;

&lt;p&gt;You can also follow the directions for &lt;a href=&quot;/embedded%20design%20tips/2014/10/05/Tips-Building-and-Installing-a-Cortex-M4-Compiler-on-Mac-OS-X&quot;&gt;installing an ARM cortex-M4 compiler&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>An Easy-to-Use Digital Filter</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/04/Tips-An-Easy-to-Use-Digital-Filter"/>
   <updated>2013-10-04T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/04/Tips-An-Easy-to-Use-Digital-Filter</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;post_image_tall&quot; src=&quot;/images/316px-Fourier_Series.png&quot; /&gt;
The exponential moving average (EMA) is a type of infinite impulse response (IIR) filter 
that can be used in many embedded DSP applications.  It requires only a small amount 
of RAM and computing power.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-filter&quot;&gt;What is a Filter?&lt;/h2&gt;

&lt;p&gt;Filters come in both analog and digital forms and exist to remove specific frequencies 
from a signal.  A common analog filter is the low pass RC filter shown below.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image_tall&quot; src=&quot;/images/lpf-1st-order.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Analog filters are characterized by their frequency response; that is how much the 
frequencies are attenuated (magnitude response) and shifted (phase response).  The 
frequency response can be analyzed using a Laplace transform which defines a transfer 
function in the S-domain.  For the above circuit, the transfer function is given by:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_equation&quot; src=&quot;/images/filter-formula1.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For R equals one kilo-ohm and C equals one microfarad, the magnitude response is 
shown below.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/lpf-mag.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that the x-axis is logarithmic (every tick mark is 10 times greater than the last one).  The y-axis is in decibels (which is a logarithmic function of the output).  The “cutoff frequency” for this filter is 1000 rad/s or 160 Hz.  This is the point where less than half the power at a given frequency is transferred from the input to the output of the filter.&lt;/p&gt;

&lt;p&gt;Analog filters must be used in embedded designs when sampling a signal using an 
analog to digital converter (ADC).  The ADC only captures frequencies that are 
up to half the sampling frequency.  For example, if the ADC acquires 320 samples 
per second, the filter above (with a cutoff frequency of 160Hz) is placed between 
the signal and the ADC input to prevent aliasing (which is a phenomena where higher 
frequencies show up in the sampled signal as lower frequencies).&lt;/p&gt;

&lt;h3 id=&quot;digital-filters&quot;&gt;Digital Filters&lt;/h3&gt;

&lt;p&gt;Digital filters attenuate frequencies in software rather than using analog 
components.  Their implementation includes sampling the analog signals with 
an ADC then applying a software algorithm.  Two common design approaches to 
digital filtering are FIR filters and IIR filters.&lt;/p&gt;

&lt;h3 id=&quot;fir-filters&quot;&gt;FIR Filters&lt;/h3&gt;

&lt;p&gt;Finite Impulse Response (FIR) filters use a finite number of samples to generate 
the output.  A simple moving average is an example of a low pass FIR filter.  Higher 
frequencies are attenuated because the averaging “smooths” out the signal.  The 
filter is finite because the output of the filter is determined by a finite number 
of input samples.  As an example, a 12 point moving average filter adds up the 12 most 
recent samples then divides by 12.  The output of IIR filters is determined 
by (up to) an infinite number of input samples.&lt;/p&gt;

&lt;h3 id=&quot;iir-filters&quot;&gt;IIR Filters&lt;/h3&gt;

&lt;p&gt;Infinite Impulse Response (IIR) filters are a type of digital filter where the 
output is inifinetely–in theory anyway–influenced by an input.  The exponential 
moving average is an example of a low pass IIR filter.&lt;/p&gt;

&lt;h2 id=&quot;exponential-moving-average-filter&quot;&gt;Exponential Moving Average Filter&lt;/h2&gt;

&lt;p&gt;An exponential moving average (EMA) applies exponential weights to each sample 
in order to compute an average.  Though this seems complicated, the 
equation–known in digital filtering parlance as the difference equation–to 
compute the output is simple.  In the equation below, y is the output; x is 
the input; and alpha is a constant that sets the cutoff frequency.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_equation&quot; src=&quot;/images/filter-formula2.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To analyze how this filter impacts the frequency of the output, the Z-domain transfer 
function is used. &lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_equation&quot; src=&quot;/images/filter-formula3.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The magnitude response is shown below for alpha equal 0.5.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/dig-mag.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The y-axis is, again, shown in decibels.  The x-axis is logarithmic from 0.001 to 
pi.  The real-world frequency maps to the x-axis with zero being the DC voltage 
and pi being equal to half the sampling frequency.  Any frequencies that are 
greater than half the sampling frequency will be “aliased”. As mentioned, an 
analog filter can ensure practically all frequencies in the digital signal are 
below half the sampling frequency.&lt;/p&gt;

&lt;p&gt;The EMA filter is beneficial in embedded designs for two reasons.  First, it is 
easy to adjust the cutoff frequency.  Decreasing the value of alpha will lower 
the cutoff frequency of the filter as illustrated by comparing the above 
alpha = 0.5 plot to the below plot where alpha = 0.1.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/dig-mag2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Second, the EMA is easy to code and requires only a small amount of computing power 
and memory.  The code implementation of the filter uses the difference equation.  There 
are two multiply operations and one addition operation for each output–this ignores 
the operations required for rounding fixed point math.  Only the most recent sample 
must be stored in RAM.  This is substantially less than using a simple moving average 
filter with N points which requires N multiply and addition operations as well as N 
samples to be stored in RAM.  The following code implements the EMA filter using 32-bit 
fixed point math.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#define DSP_EMA_I32_ALPHA(x) ( (uint16_t)(x * 65535) )
 
int32_t dsp_ema_i32(int32_t in, int32_t average, uint16_t alpha){
  if ( alpha == 65535 ) return in;
  int64_t tmp0;
  tmp0 = (int64_t)in * (alpha+1) + average * (65536 - alpha);
  return (int32_t)((tmp0 + 32768) / 65536);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code below is an example of how to use the above function.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;int32_t my_avg_func(void){
     static int32_t average = 0;
     int32_t adc_value;    
     adc_value = read_the_adc_value();
     average = dsp_ema_i32(adc_value, average, DSP_EMA_I32_ALPHA(0.1));
     return average;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Filters, both analog and digital, are an essential part of embedded designs.  They 
allow developers to get rid of unwanted frequencies when analyzing sensor input.  For 
digital filters to be useful, analog filters must remove all frequencies above half 
the sampling frequency.  Digital IIR filters can be powerful tools in embedded design 
where resources are limited.  The exponential moving average (EMA) is an example of 
such a filter that works well in embedded designs because of the low memory and 
computing power requirements.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>ADC Thermistor Circuit and Lookup Table</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/03/Tips-ADC-Thermistor-Circuit-and-Lookup-Table"/>
   <updated>2013-10-03T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/03/Tips-ADC-Thermistor-Circuit-and-Lookup-Table</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/thermistor-circuit.png&quot; /&gt;
Thermistors are simple to integrate in embedded designs but their temperature 
response can be challenging to interpret.  A lookup table is a convenient way 
to convert a thermistor’s ADC reading to temperature.&lt;/p&gt;

&lt;p&gt;A thermistor’s resistance varies with temperature.  As an example, assume T1 
in the circuit above to be part number NTCLE413E2103H400 from 
Vishay/Dale Inc. This thermistor has the resistive characteristics shown 
in the table below.  At cold temperatures, the resistance is very large 
but decreases non-linearly as temperature increases.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image_tall&quot; src=&quot;/images/resistance-temperature.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The complete datasheet for the part referenced is available &lt;a href=&quot;http://www.vishay.com/docs/29078/ntcle413.pdf&quot;&gt;here&lt;/a&gt;.  The 
voltage at the ADC input is calculated using a voltage divider:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_equation&quot; src=&quot;/images/adc-thermistor-formula1.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the T1 resistance is large, the voltage at the ADC input is close to 
zero.  As the thermistor gets warmer, the voltage gets closer to V1.  The 
transition, however, is non-linear.  This means for embedded firmware to 
interpret the ADC reading as a temperature, it needs to either calculate 
a complicated transfer function or approximate the temperature using a lookup 
table and linear extrapolation.&lt;/p&gt;

&lt;h2 id=&quot;lookup-tables&quot;&gt;Lookup Tables&lt;/h2&gt;

&lt;p&gt;A lookup table consists of two (or more) columns of data, in this case, a column 
for the voltage representing the output of the sensing circuit and a column for 
the temperature.&lt;/p&gt;

&lt;h2 id=&quot;creating-the-lookup-table&quot;&gt;Creating the Lookup Table&lt;/h2&gt;

&lt;p&gt;A spreadsheet program is an excellent tool to create (and update) the lookup 
table and can be designed to easily copy and paste as a data table in a C 
file.  The image below shows a screen shot of an example.  The highlighted 
portion can be directly copied and pasted into the code.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/lookup-table-shot.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(The source file for the above image can be downloaded from 
this &lt;a href=&quot;https://dl.dropbox.com/u/33863234/CoActionOS/lookup-table-sheet.xlsx&quot;&gt;link&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;The table contains distinct points on the voltage temperature curve.  Linear 
extrapolation is used to estimate the temperature between the points.&lt;/p&gt;

&lt;h2 id=&quot;extrapolating-the-data&quot;&gt;Extrapolating the Data&lt;/h2&gt;

&lt;p&gt;To extrapolate the data between points, the firmware first needs to select two 
data points.  It must scan the values in the x-column and find the two values 
directly above and below the input.  The firmware then uses the point slope 
formula to extrapolate the temperature value.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;post_equation&quot; src=&quot;/images/adc-thermistor-formula2.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The values x0, x1, y0, and y1 are taken from the lookup table.  The x value is 
the input from the ADC, and the y value is the temperature.  The code below 
implements a lookup table using floating point variables.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
 
typedef struct {
  float x;
  float y;
} dsp_lookup_f_t;
 
 
float dsp_lookup_f(const dsp_lookup_f_t * table, float x, int size){
  int i;
  float m;
  i = 0;
  while((i &amp;lt; (size)) &amp;amp;amp;&amp;amp;amp; (x &amp;gt; table[i].x) ){  //find the two points in the table to use
    i++;
  }
  if ( i == size ){   //make sure the point isn&amp;#39;t past the end of the table
    return table[i-1].y;
  }
 
  if ( i == 0 ){  //make sure the point isn&amp;#39;t before the beginning of the table
    return table[i].y;
  }
 
  m = (table[i].y - table[i-1].y) / ( table[i].x - table[i-1].x); //calculate the slope
  return m * (x - table[i].x) + table[i].y; //this is the solution to the point slope formula
}
 
#define TABLE_SIZE 17
//The table below is copied and pasted from the spreadsheet
dsp_lookup_f_t my_table[TABLE_SIZE] = {          
{ .x=  11839  ,  .y=  -40  },
{ .x=  16050  ,  .y=  -35  },
{ .x=  21385  ,  .y=  -30  },
{ .x=  27980  ,  .y=  -25  },
{ .x=  35921  ,  .y=  -20  },
{ .x=  45214  ,  .y=  -15  },
{ .x=  55761  ,  .y=  -10  },
{ .x=  67358  ,  .y=  -5  },
{ .x=  79703  ,  .y=  0  },
{ .x=  92422  ,  .y=  5  },
{ .x=  105128  ,  .y=  10  },
{ .x=  117450  ,  .y=  15  },
{ .x=  129084  ,  .y=  20  },
{ .x=  139810  ,  .y=  25  },
{ .x=  149497  ,  .y=  30  },
{ .x=  158097  ,  .y=  35  },
{ .x=  165626  ,  .y=  40  },
}  
 
void read_temp(void){
     uint16_t adc_sample;
     float temp;
     adc_sample = read_adc_temp_channel();
     temp = dsp_lookup_f(my_table, (float)adc_sample, TABLE_SIZE);
     printf(&amp;quot;Temperature is %f\n&amp;quot;, temp);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Thermistors are great to use in embedded designs because they come in a variety 
of shapes and sizes and are easy to interface with a microcontroller ADC input.  The 
main design challenge is interpreting the non-linear temperature response.  Taking 
the temperature response and creating a lookup table using a spreadsheet is a 
relatively easy way of getting the table in C code.  The firmware then just 
needs to use linear extrapolation to approximate the temperature between 
points in the lookup table.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>A FIFO Buffer Implementation</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/02/Tips-A-FIFO-Buffer-Implementation"/>
   <updated>2013-10-02T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/02/Tips-A-FIFO-Buffer-Implementation</id>
   <content type="html">&lt;p&gt;&lt;img class=&quot;post_image_tall&quot; src=&quot;/images/fifo.png&quot; /&gt;
A FIFO buffer is a useful way of storing data that arrives to a microcontroller peripheral 
asynchronously but cannot be read immediately.  One example is storing bytes incoming on a 
UART. Buffering the bytes eases the real-time requirements for the embedded firmware.&lt;/p&gt;

&lt;p&gt;A FIFO buffer stores data on a first-in, first-out basis.   The storage structure is typically 
an array of contiguous memory.  Data is written to the “head” of the buffer and read from 
the “tail”.  When the head or tail reach the end of the memory array, it wraps around to 
the beginning.  If the tail runs in to the head, the buffer is empty.  But if the head runs 
in to the tail, the implementation must define if the oldest data is discarded or the write 
does not complete.  In the example below, data is never discarded.&lt;/p&gt;

&lt;h2 id=&quot;general-implementation&quot;&gt;General Implementation&lt;/h2&gt;

&lt;p&gt;The code below shows a general implementation of a FIFO buffer.  The code assumes an 
overflow condition is not allowed (that is when the head meets the tail, the buffer is 
full and no more data can be written).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;typedef struct {
     char * buf;
     int head;
     int tail;
     int size;
} fifo_t;
 
//This initializes the FIFO structure with the given buffer and size
void fifo_init(fifo_t * f, char * buf, int size){
     f-&amp;gt;head = 0;
     f-&amp;gt;tail = 0;
     f-&amp;gt;size = size;
     f-&amp;gt;buf = buf;
}
 
//This reads nbytes bytes from the FIFO
//The number of bytes read is returned
int fifo_read(fifo_t * f, void * buf, int nbytes){
     int i;
     char * p;
     p = buf;
     for(i=0; i &amp;lt; nbytes; i++){
          if( f-&amp;gt;tail != f-&amp;gt;head ){ //see if any data is available
               *p++ = f-&amp;gt;buf[f-&amp;gt;tail];  //grab a byte from the buffer
               f-&amp;gt;tail++;  //increment the tail
               if( f-&amp;gt;tail == f-&amp;gt;size ){  //check for wrap-around
                    f-&amp;gt;tail = 0;
               }
          } else {
               return i; //number of bytes read 
          }
     }
     return nbytes;
}
 
//This writes up to nbytes bytes to the FIFO
//If the head runs in to the tail, not all bytes are written
//The number of bytes written is returned
int fifo_write(fifo_t * f, const void * buf, int nbytes){
     int i;
     const char * p;
     p = buf;
     for(i=0; i &amp;lt; nbytes; i++){
           //first check to see if there is space in the buffer
           if( (f-&amp;gt;head + 1 == f-&amp;gt;tail) ||
                ( (f-&amp;gt;head + 1 == f-&amp;gt;size) &amp;amp;&amp;amp; (f-&amp;gt;tail == 0) ){
                 return i; //no more room
           } else {
               f-&amp;gt;buf[f-&amp;gt;head] = *p++;
               f-&amp;gt;head++;  //increment the head
               if( f-&amp;gt;head == f-&amp;gt;size ){  //check for wrap-around
                    f-&amp;gt;head = 0;
               }
           }
     }
     return nbytes;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-a-fifo-with-a-microcontroller-uart&quot;&gt;Using a FIFO with a Microcontroller UART&lt;/h2&gt;

&lt;p&gt;Many microcontroller designs have limited buffer space for data arriving on the 
UART.  Incorporating a FIFO in the UART ISR can make it easier to manage incoming 
data.  The following pseudo-code uses the above FIFO as part of the UART ISR.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;static fifo_t * uart_fifo;
 
void uart_fifo_init(fifo_t * fifo){
     uart_fifo = fifo;
}
 
void uart_isr(void){
     char incoming_byte;
     //execute any required ISR entrance code
 
     while( UART_REGISTER_FLAG_DATA_READY ){ //check the register for incoming data
          incoming_byte = UART_REGISTER_READ_DATA_BYTE; //read the UART data
          fifo_write(uart_fifo, &amp;amp;amp;incoming_byte, 1); //write the data to the fifo
     }
 
     //execute any required ISR exit code
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using a FIFO in the above way lessens the real-time requirements for an application as 
well as gives the application developer more leeway in handling incoming data.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;FIFOs are a storage mechanism which operate on a first-in, first-out basis.  They are useful 
for managing the arrival of asynchronous data.  Integrating a FIFO with an ISR, such as the 
UART ISR, can make processing the incoming data much easier for the application developer.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>8 vs 16 vs 32 Bit Microcontrollers--A Case Study</title>
   <link href="http://stratifylabs.co/embedded%20design%20tips/2013/10/01/Tips-8-vs-16-vs-32-Bit-Microcontrollers"/>
   <updated>2013-10-01T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/embedded%20design%20tips/2013/10/01/Tips-8-vs-16-vs-32-Bit-Microcontrollers</id>
   <content type="html">&lt;table class=&quot;table table-striped table-bordered&quot;&gt;
&lt;tr&gt;
	&lt;td&gt;&lt;strong&gt;MCU&lt;/strong&gt;&lt;/td&gt;
	&lt;td&gt;&lt;strong&gt;Arch&lt;/strong&gt;&lt;/td&gt;
	&lt;td&gt;&lt;strong&gt;Flash (KB)&lt;/strong&gt;&lt;/td&gt;
	&lt;td&gt;&lt;strong&gt;RAM (KB)&lt;/strong&gt;&lt;/td&gt;
	&lt;td&gt;&lt;strong&gt;Clock (MHz)&lt;/strong&gt;&lt;/td&gt;
	&lt;td&gt;&lt;strong&gt;Current (mA)&lt;/strong&gt;&lt;/td&gt;
	&lt;td&gt;&lt;strong&gt;mA/MHz&lt;/strong&gt;&lt;/td&gt;
	&lt;td&gt;&lt;strong&gt;Price (USD) at 1k&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;LPC1765FBD100,551&lt;/td&gt;
	&lt;td&gt;ARM Cortex-M3 (32)&lt;/td&gt;
	&lt;td&gt;256&lt;/td&gt;
	&lt;td&gt;64&lt;/td&gt;
	&lt;td&gt;100&lt;/td&gt;
	&lt;td&gt;50&lt;/td&gt;
	&lt;td&gt;0.5&lt;/td&gt;
	&lt;td&gt;5.06&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;ATxmega128A1&lt;/td&gt;
	&lt;td&gt;AVR (8)&lt;/td&gt;
	&lt;td&gt;128&lt;/td&gt;
	&lt;td&gt;8&lt;/td&gt;
	&lt;td&gt;32&lt;/td&gt;
	&lt;td&gt;20&lt;/td&gt;
	&lt;td&gt;0.63&lt;/td&gt;
	&lt;td&gt;6.05&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;MSP430F5436AIPZR&lt;/td&gt;
	&lt;td&gt;MSP430 (16)&lt;/td&gt;
	&lt;td&gt;192&lt;/td&gt;
	&lt;td&gt;16&lt;/td&gt;
	&lt;td&gt;25&lt;/td&gt;
	&lt;td&gt;10&lt;/td&gt;
	&lt;td&gt;0.4&lt;/td&gt;
	&lt;td&gt;4.797&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;PIC32MX340F128L-80I/PT&lt;/td&gt;
	&lt;td&gt;PIC32 (32)&lt;/td&gt;
	&lt;td&gt;128&lt;/td&gt;
	&lt;td&gt;32&lt;/td&gt;
	&lt;td&gt;80&lt;/td&gt;
	&lt;td&gt;55&lt;/td&gt;
	&lt;td&gt;0.69&lt;/td&gt;
	&lt;td&gt;4.82&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;STM32F103VBT6&lt;/td&gt;
	&lt;td&gt;ARM Cortex-M3 (32)&lt;/td&gt;
	&lt;td&gt;128&lt;/td&gt;
	&lt;td&gt;20&lt;/td&gt;
	&lt;td&gt;72&lt;/td&gt;
	&lt;td&gt;33&lt;/td&gt;
	&lt;td&gt;0.46&lt;/td&gt;
	&lt;td&gt;4.29&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Traditional microcontroller projects have been based on 8-bit architectures.  However, 16-bit and 32-bit architectures (such as the ARM Cortex-M3) are becoming very attractive alternatives with competitive pricing and power consumption requirements.&lt;/p&gt;

&lt;h2 id=&quot;a-small-case-study-8-bit-16-bit-and-32-bit-microcontroller-architectures&quot;&gt;A Small Case Study: 8-bit, 16-bit, and 32-bit Microcontroller Architectures&lt;/h2&gt;

&lt;p&gt;The table abobe offers a simple comparison between several microcontroller architectures (8-bit, 16-bit, and 32-bit) of the same package (QFP100) and roughly the same price. The comparison is simplified in order to give a rough idea of the relative value of each microcontroller.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;span class=&quot;label label-danger&quot;&gt;Note&lt;/span&gt; Prices updated
2013-12-28 using Digikey.&lt;/div&gt;

&lt;h2 id=&quot;flash-memory&quot;&gt;Flash Memory&lt;/h2&gt;

&lt;p&gt;As far as flash memory goes, each microcontroller above has a comparable amount. The LPC1765 (ARM Cortex-CM3) offers 
the best value especially when compared to the other 32-bit microcontroller samples. However, because code densities 
can vary greatly across 8-bit/16-bit/32-bit architectures, it is difficult to determine which has the best value 
overall. RAM requirements are more easily compared.&lt;/p&gt;

&lt;h2 id=&quot;ram&quot;&gt;RAM&lt;/h2&gt;

&lt;p&gt;Since RAM is not typically associated with code densities, we can assume the RAM requirements for an application 
are roughly the same for different MCUs. With this assumption, the LPC1765 offers the best value for RAM 
at 64KB. The 8-bit and 16-bit systems simply do not have comparable RAM sizes to the 32-bit microcontroller samples.&lt;/p&gt;

&lt;h2 id=&quot;cpu-speeds&quot;&gt;CPU Speeds&lt;/h2&gt;

&lt;p&gt;For clock speeds, the 32-bit microcontroller systems offer significantly better performance. They can run 
at higher clock speeds and do more per cycle with a 32-bit instruction set and data bus. The ARM 
Cortex-CM3 (LPC1765), again, has a great value with a maximum clock speed of 100MHz. The drawback is that 
a higher clock speed means more power is consumed.&lt;/p&gt;

&lt;h2 id=&quot;power-consumption&quot;&gt;Power Consumption&lt;/h2&gt;

&lt;p&gt;To save power, the microcontroller can run at a lower clock speed. The mA/MHz ratio in the table is the 
current consumption at max speed divided by the max speed. This gives a general idea of how efficient the 
microcontroller is. The MSP430, which is specifically designed for ultra-low power consumption, has the 
best Current/MHz ratio followed closely by the ARM Cortex CM3 designs (STM32 and LPC1765).&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Though brief, this case study illustrates that 32-bit microcontroller architectures can, from a practical 
standpoint, replace 8-bit systems without a cost increase and with a boost in RAM size and performance.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Get the Software</title>
   <link href="http://stratifylabs.co/getting%20started/2013/09/02/Getting-Started-Get-the-Software"/>
   <updated>2013-09-02T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/getting%20started/2013/09/02/Getting-Started-Get-the-Software</id>
   <content type="html">&lt;p&gt;There are two software packages used with CoActionOS for Windows, Mac, and Linux&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CoActionOS Compiler (used for building programs)&lt;/li&gt;
  &lt;li&gt;CoActionOS Link (used for installing and running programs)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also recommend downloading &lt;a href=&quot;http://www.eclipse.org/downloads/&quot;&gt;Eclipse IDE for C/C++ Developers&lt;/a&gt; to use for editing code and invoking the compiler.&lt;/p&gt;

&lt;h2 id=&quot;windows&quot;&gt;Windows&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/33863234/CoActionOS/win/CoActionOS-Compiler-Installer-4.7.3-1.3.1.exe&quot;&gt;CoActionOS Compiler Installer GCC 4.7.3 CoActionOS 1.3.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/CoActionOS/CoActionOS-Desktop/releases&quot;&gt;CoActionOS Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please be sure to read &lt;a href=&quot;/user%20guides/2013/12/20/CoActionOS-User-Guide-Installing-Windows-Device-Drivers&quot;&gt;Installing Windows Device Drivers&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;mac-os-x&quot;&gt;Mac OS X&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/33863234/CoActionOS/macosx/CoActionOS-Compiler-4.7.4-1.6.0.pkg&quot;&gt;CoActionOS Compiler Installer GCC 4.7.4 (cm4 and cm3), CoActionOS 1.6.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/33863234/CoActionOS/macosx/CoActionOS-Compiler-4.7.3-1.3.1.pkg&quot;&gt;CoActionOS Compiler Installer GCC 4.7.3, CoActionOS 1.3.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/CoActionOS/CoActionOS-Desktop/releases&quot;&gt;CoActionOS Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ubuntu-linux&quot;&gt;Ubuntu Linux&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/33863234/CoActionOS/linux/CoActionOS-Compiler-4.7.3-1.2.7.tar.gz&quot;&gt;CoActionOS Compiler Installer GCC 4.7.3, CoActionOS 1.2.7&lt;/a&gt; (&lt;a href=&quot;https://www.coactionos.com/redmine/boards/3/topics/5&quot;&gt;more info&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Even though the Linux distribution is not as up to date, you can always download the code and build/install from &lt;a href=&quot;https://github.com/CoActionOS/CoActionOS&quot;&gt;source&lt;/a&gt; using Eclipse.&lt;/li&gt;
  &lt;li&gt;CoActionOS Link: currently only available in &lt;a href=&quot;https://github.com/CoActionOS/CoActionOS-Desktop&quot;&gt;source form&lt;/a&gt;. You need to install Qt 5.1.0 in order to build the binary.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can install the compiler using the following commands. This assumes the tar file is downloaded to the ~/Downloads directory.&lt;/p&gt;

&lt;pre&gt;
cd /
sudo tar -xvf ~/Downloads/CoActionOS-Compiler-4.7.3-1.2.7.tar.gz
&lt;/pre&gt;

&lt;h2 id=&quot;upgrading-coactionos-kernel-libraries&quot;&gt;Upgrading CoActionOS Kernel Libraries&lt;/h2&gt;

&lt;p&gt;The latest version of the &lt;a href=&quot;https://github.com/CoActionOS/CoActionOS-Public&quot;&gt;CoActionOS source code is available on Github&lt;/a&gt;.  Once downloaded, you can import the CoActionOS and CoActionOS-Applib projects directly into Eclipse (without even extracting the contents of the zip).  In Eclipse, do File-&amp;gt;Import…-&amp;gt;Existing Projects into Workspace-&amp;gt;Select archive file.&lt;/p&gt;

&lt;p&gt;Once imported, right click on CoActionOS and select Build Configurations-&amp;gt;Build All.  Do the same for the CoActionOS-Applib project.&lt;/p&gt;

&lt;p&gt;More information is available from this &lt;a href=&quot;/user%20guides/2013/12/15/CoActionOS-User-Guide-Building-and-Installing-CoActionOS&quot;&gt;post&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Buy the Hardware</title>
   <link href="http://stratifylabs.co/getting%20started/2013/09/01/Getting-Started-Buy-the-Hardware"/>
   <updated>2013-09-01T00:00:00-06:00</updated>
   <id>http://stratifylabs.co/getting%20started/2013/09/01/Getting-Started-Buy-the-Hardware</id>
   <content type="html">&lt;h2 id=&quot;mbed&quot;&gt;mbed&lt;/h2&gt;

&lt;p&gt;CoActionOS can also run on the &lt;a href=&quot;http://mbed.org/platforms/mbed-LPC1768/&quot;&gt;mbed LPC1768&lt;/a&gt;
board.&lt;/p&gt;

&lt;p&gt;The CoActionOS kernel image is installed by using the mass storage device drivers that
come with the mbed.  After that, applications are installed using CoActionOS Link.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;span class=&quot;label label-danger&quot;&gt;Note&lt;/span&gt; When
connecting to CoActionOS on the mbed using CoActionOS Link, the internal circuitry
uses a UART rather than native USB which has better performance.  The CoAction
Hero and mbed with the Xively jumpstart kit both use native USB to connect to CoActionOS
Link.&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;post_image&quot; src=&quot;/images/mbed-xively-kit.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CoActionOS also supports running the mbed with the &lt;a href=&quot;https://xively.com/dev/kits/&quot;&gt;Xively jumpstart kit&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;installing-on-mbed&quot;&gt;Installing on mbed&lt;/h2&gt;

&lt;p&gt;CoActionOS can be installed on mbed by dragging and dropping &lt;a href=&quot;/files/Coaction-mbed.bin&quot;&gt;the binary file&lt;/a&gt;
on the MBED drive.  After the file is copied to the drive, just push the mbed reset button to start running CoActionOS.&lt;/p&gt;

&lt;h2 id=&quot;installing-on-mbed-with-xively&quot;&gt;Installing on mbed with Xively&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/files/Coaction-mbed-xively.bin&quot;&gt;This binary file&lt;/a&gt; can be dropped on the 
on the MBED drive mounted on a Xively board.  After the file is copied to the drive, the USB cable needs to be re-connected directly
to the Xively board to access CoActionOS.&lt;/p&gt;

&lt;p&gt;Once CoActionOS is installed and running, you can install and run applications using CoActionOS Link.&lt;/p&gt;

</content>
 </entry>
 
 
</feed>